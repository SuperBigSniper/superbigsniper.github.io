<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Sniper</title>
    <link>http://zhoujunxiong.gitee.com/</link>
    
    <atom:link href="http://zhoujunxiong.gitee.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Sat, 05 Apr 2025 14:12:57 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Antd-Form源码</title>
      <link>http://zhoujunxiong.gitee.com/2025/04/05/%E5%89%8D%E7%AB%AF/%E6%A1%86%E6%9E%B6/Antd-Form%E6%BA%90%E7%A0%81/</link>
      <guid>http://zhoujunxiong.gitee.com/2025/04/05/%E5%89%8D%E7%AB%AF/%E6%A1%86%E6%9E%B6/Antd-Form%E6%BA%90%E7%A0%81/</guid>
      <pubDate>Sat, 05 Apr 2025 12:00:30 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;FormItem-与-shouldUpdate&quot;&gt;&lt;a href=&quot;#FormItem-与-shouldUpdate&quot; class=&quot;headerlink&quot; title=&quot;FormItem 与 shouldUpdate&quot;&gt;&lt;/a&gt;FormItem 与 should</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="FormItem-与-shouldUpdate"><a href="#FormItem-与-shouldUpdate" class="headerlink" title="FormItem 与 shouldUpdate"></a>FormItem 与 shouldUpdate</h1><p>在周会上，我们讨论了关于表单的问题，同事问了一个问题，FormItem 中可以设置函数和<code>shouldUpdate</code>，如果是你去设计，你会怎么设计？</p><p>我的想法是<code>shouldUpdate</code>可以控制子组件是否更新，如果没有更新，那么就会使用上一次的 fiber 节点，那么它一定是缓存了之前的 fiber 节点（我以为是和 vue 的 keepAlive 实现一样）</p><p>也就是说我的观点是<code>shouldUpdate</code>可以控制子组件是否更新，如果返回 false 或者函数返回 false，那么子组件函数就完全不会执行。</p><p>这个时候有同事站出来说了，好像不是这样，我使用的时候这个函数是会执行的</p><p>那么到底是怎么样的呢</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Form</span>, <span class="title class_">Input</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;antd&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Demo</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [form] = <span class="title class_">Form</span>.<span class="title function_">useForm</span>()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Form</span> <span class="attr">form</span>=<span class="string">&#123;form&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Form.Item</span> <span class="attr">shouldUpdate</span>=<span class="string">&#123;()</span> =&gt;</span> false&#125;&gt;</span></span><br><span class="line"><span class="language-xml">        &#123;() =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">          console.log(&#x27;是否更新了呢&#x27;)</span></span><br><span class="line"><span class="language-xml">          return <span class="tag">&lt;<span class="name">Input</span> <span class="attr">placeholder</span>=<span class="string">&quot;parent&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Form.Item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Form</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Demo</span></span><br></pre></td></tr></table></figure><h2 id="源码实现"><a href="#源码实现" class="headerlink" title="源码实现"></a>源码实现</h2><p>先说结论，子组件函数一直都更新了</p><p>首先，我们从<code>Form.Item</code> 开始看起</p><p>我们发现其实antd其实使用了<code>rc-field-form</code>这个组件（其实也是他们维护的）</p><p>大部分的<code>props</code>的都是被透传到了这个组件中，我们这里先跳过这个组件，接着往下看</p><p><img src= "/img/loading.svg" data-lazy-src="https://raw.githubusercontent.com/SuperBigSniper/blogImg/master/20250405210347.png" alt="20250405210347"></p><p>我们可以看到子组件其实是一个函数，这个函数会返回一个<code>ReactNode</code>，还会有一些数据校验然后后给到正确的提示（这个还是很值得学习的）</p><p>当然最关键的还是这一行</p><p><img src= "/img/loading.svg" data-lazy-src="assets/Antd-Form%E6%BA%90%E7%A0%81/image.png" alt="alt text"></p><p>这里有个<code>shouldUpdate</code>，我们发现其实只要是传入了值, 而且<code>isRenderProps</code>为true并且没有<code>hasName</code>(hasName就是formItem传入name没有)</p><p><code>isRenderProps</code>的逻辑如下</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mergedChildren = <span class="title function_">useChildren</span>(children);</span><br><span class="line"><span class="keyword">const</span> isRenderProps = <span class="keyword">typeof</span> mergedChildren === <span class="string">&#x27;function&#x27;</span>;</span><br></pre></td></tr></table></figure><p>// useChildren实现</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> toArray <span class="keyword">from</span> <span class="string">&#x27;rc-util/lib/Children/toArray&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="title class_">FormItemProps</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../FormItem&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">useChildren</span>(<span class="params"></span></span><br><span class="line"><span class="params">  children?: FormItemProps[<span class="string">&#x27;children&#x27;</span>],</span></span><br><span class="line"><span class="params"></span>): <span class="title class_">FormItemProps</span>[<span class="string">&#x27;children&#x27;</span>] &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> children === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> children;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> childList = <span class="title function_">toArray</span>(children);</span><br><span class="line">  <span class="keyword">return</span> childList.<span class="property">length</span> &lt;= <span class="number">1</span> ? childList[<span class="number">0</span>] : childList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是说只要传入的是一个函数，且shouldUpdate有不为空的值，这个函数其实就会被执行</p><p>如果是这样的话，shouldUpdate的作用到底是什么呢？</p><p>秘密就藏着<code>rc-field-form</code>中</p><h3 id="rc-field-form"><a href="#rc-field-form" class="headerlink" title="rc-field-form"></a>rc-field-form</h3><p>首先我们之间看<code>src/Field.tsx</code>这个组件，我们发现它其实是这个class组件</p><p><img src= "/img/loading.svg" data-lazy-src="assets/Antd-Form%E6%BA%90%E7%A0%81/image-1.png" alt="alt text"></p><p>官方还解释了一下为什么使用<code>class</code>组件</p><p>大致意思用<code>hook</code>写代码太多了</p><p>我们直接看<code>render</code>，看它到底做了啥</p><p><img src= "/img/loading.svg" data-lazy-src="assets/Antd-Form%E6%BA%90%E7%A0%81/image-2.png" alt="alt text"></p><p>代码非常简单哈，只有十多行，其实关键代码还是在<code>getOnlyChild</code>这个函数</p><p><img src= "/img/loading.svg" data-lazy-src="assets/Antd-Form%E6%BA%90%E7%A0%81/image-3.png" alt="alt text"></p><p>可以看到这个函数会递归运行，直到返回数据不为一个函数，也就是<code>rc-field-form</code>可以传入函数嵌套函数的结构</p><p>也就是说这个<code>render</code>并没有执行或者判断<code>shouldUpdate</code>这个东西</p><p>然后我们搜索一下会发现<code>componentDidMount</code>里有这个东西</p><p><img src= "/img/loading.svg" data-lazy-src="assets/Antd-Form%E6%BA%90%E7%A0%81/image-4.png" alt="alt text"></p><p>然后我们发现一个很奇怪的东西，就是<code>shouldUpdate</code>为true的时候会强制更新一次，哪岂不是说<code>shouldUpdate</code>为true的时候，子组件会强制运行两次？为什么要这样写呢？我们最后解答这个问题，我们继续寻找<code>shouldUpdate</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// One more render for component in case fields not ready</span></span><br><span class="line"><span class="keyword">if</span> (shouldUpdate === <span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">reRender</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后所有的<code>shouldUpdate</code>都存放在一个函数中<code>onStoreChange</code></p><p><img src= "/img/loading.svg" data-lazy-src="assets/Antd-Form%E6%BA%90%E7%A0%81/image-5.png" alt="alt text"></p><p>其实可以看到，整个<code>src/Field.tsx</code>组件没有调用<code>onStoreChange</code>的地方，从函数命名我们可以大概知道这个玩意儿其实是，<code>store</code>的变化，主动触发这个方法的</p><p>接下来就要加速了，简单说一下整个<code>rc-form</code>的机制</p><p>首先通过<code>registerField</code>将整个组件实例注册到<code>store</code>中<br><img src= "/img/loading.svg" data-lazy-src="assets/Antd-Form%E6%BA%90%E7%A0%81/image-6.png" alt="alt text"></p><p>然后这个方法在<code>useForm</code>里，这个文件导出一个默认实现<code>FormStore</code>, 为什么说是默认实现呢，因为可以看到<code>useForm</code>可以传入<code>form</code>实例对默认实现进行覆盖</p><p><img src= "/img/loading.svg" data-lazy-src="assets/Antd-Form%E6%BA%90%E7%A0%81/image-7.png" alt="alt text"></p><p>然后在默写场景下就会触发实例的<code>onStoreChange</code>方法，去实现精准更新，比如<code>setFields</code></p><p><img src= "/img/loading.svg" data-lazy-src="assets/Antd-Form%E6%BA%90%E7%A0%81/image-8.png" alt="alt text"></p><p><img src= "/img/loading.svg" data-lazy-src="assets/Antd-Form%E6%BA%90%E7%A0%81/image-9.png" alt="alt text"></p><p>ok ，我们回到<code>onStoreChange</code>里到底是怎么判断的</p><p><img src= "/img/loading.svg" data-lazy-src="assets/Antd-Form%E6%BA%90%E7%A0%81/image-11.png" alt="alt text"></p><p><img src= "/img/loading.svg" data-lazy-src="assets/Antd-Form%E6%BA%90%E7%A0%81/image-10.png" alt="alt text"></p><p>这里逻辑就很简单了，其实就是判断<code>shouldUpdate</code>是否为true或者返回true，如果是true，那么就会强制更新一次，否则就不会执行更新</p><p>而且这里也有一个强制更新两次的逻辑</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (shouldUpdate === <span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">reRender</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解密一下, 比如这种情况</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Form</span>, <span class="title class_">Input</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;antd&#x27;</span></span><br><span class="line"><span class="keyword">import</span> A <span class="keyword">from</span> <span class="string">&#x27;./A&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Demo</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [form] = <span class="title class_">Form</span>.<span class="title function_">useForm</span>()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Form</span> <span class="attr">form</span>=<span class="string">&#123;form&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Form.Item</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">name</span>=<span class="string">&quot;parent&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">initialValue</span>=<span class="string">&#123;1&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Input</span> <span class="attr">placeholder</span>=<span class="string">&quot;parent&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Form.Item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">A</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Form</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Demo</span></span><br></pre></td></tr></table></figure><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Form</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;antd&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">A</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Form.Item</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        // <span class="attr">shouldUpdate</span>=<span class="string">&#123;true&#125;</span>         // 写法 <span class="attr">1</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">shouldUpdate</span>=<span class="string">&#123;()</span> =&gt;</span> true&#125;  // 写法 2</span></span><br><span class="line"><span class="language-xml">      &gt;</span></span><br><span class="line"><span class="language-xml">        &#123;(&#123; getFieldsValue &#125;) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">          console.log(getFieldsValue())</span></span><br><span class="line"><span class="language-xml">          return JSON.stringify(getFieldsValue())</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Form.Item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个本质是因为react的运行机制问题哦</p><p>​​子组件​​执行 componentDidMount 会优先于 ​​父组件​​执行 componentDidMount。</p>]]></content:encoded>
      
      
      <category domain="http://zhoujunxiong.gitee.com/categories/%E6%A1%86%E6%9E%B6/">框架</category>
      
      
      <category domain="http://zhoujunxiong.gitee.com/tags/%E5%89%8D%E7%AB%AF/">前端</category>
      
      <category domain="http://zhoujunxiong.gitee.com/tags/%E6%A1%86%E6%9E%B6/">框架</category>
      
      
      <comments>http://zhoujunxiong.gitee.com/2025/04/05/%E5%89%8D%E7%AB%AF/%E6%A1%86%E6%9E%B6/Antd-Form%E6%BA%90%E7%A0%81/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>View Transition API</title>
      <link>http://zhoujunxiong.gitee.com/2025/01/09/%E5%89%8D%E7%AB%AF/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%AB%AF/ViewTransitionAPI/</link>
      <guid>http://zhoujunxiong.gitee.com/2025/01/09/%E5%89%8D%E7%AB%AF/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%AB%AF/ViewTransitionAPI/</guid>
      <pubDate>Thu, 09 Jan 2025 01:37:42 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;View-Transition-API&quot;&gt;&lt;a href=&quot;#View-Transition-API&quot; class=&quot;headerlink&quot; title=&quot;View Transition API&quot;&gt;&lt;/a&gt;View Transition API&lt;/h1&gt;&lt;h2 i</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="View-Transition-API"><a href="#View-Transition-API" class="headerlink" title="View Transition API"></a>View Transition API</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>View Transition API 是一个用于在浏览器中实现视图过渡效果的 API。它提供了一种简单而强大的方式来创建平滑的过渡效果，使页面在加载、卸载或导航时看起来更加流畅和自然。和FILP的思路相同</p><ul><li>在 startViewTransition 调用时截取一「帧」</li><li>执行传入 startViewTransition(callback) 的回调函数，并等待界面响应更新</li><li>更新后，再截取一「帧」</li><li>执行过渡，老帧 fade out，新帧 fade in（默认情况下）</li></ul><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>只需要在dom操作之前使用<code>document.startViewTransition</code>对操作dom的操作包裹起来，浏览器就会自动进行动画</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">list.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">ev</span>)&#123;</span><br><span class="line">  <span class="keyword">if</span> (ev.<span class="property">target</span>.<span class="property">className</span> === <span class="string">&#x27;item&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">startViewTransition</span>) &#123;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="title function_">startViewTransition</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        ev.<span class="property">target</span>.<span class="title function_">remove</span>()</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      ev.<span class="property">target</span>.<span class="title function_">remove</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="路径动画"><a href="#路径动画" class="headerlink" title="路径动画"></a>路径动画</h2><p>上面只是整体动画，如果有多个元素需要动画，可以对对应的元素指定<code>view-transition-name</code><br>这样指定<code>view-transition-name</code>的元素就会对路径动画进行计算，其他变化的元素则是默认进行一个渐变</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>点击删除<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">style</span>=<span class="string">&quot;--i: a1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">style</span>=<span class="string">&quot;--i: a2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">style</span>=<span class="string">&quot;--i: a3&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">style</span>=<span class="string">&quot;--i: a4&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">style</span>=<span class="string">&quot;--i: a5&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">style</span>=<span class="string">&quot;--i: a6&quot;</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">style</span>=<span class="string">&quot;--i: a7&quot;</span>&gt;</span>7<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">style</span>=<span class="string">&quot;--i: a8&quot;</span>&gt;</span>8<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">style</span>=<span class="string">&quot;--i: a9&quot;</span>&gt;</span>9<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">style</span>=<span class="string">&quot;--i: a10&quot;</span>&gt;</span>10<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- css --&gt;</span></span><br><span class="line">.item&#123;</span><br><span class="line">  view-transition-name: var(--i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="一个元素到另一个元素过渡"><a href="#一个元素到另一个元素过渡" class="headerlink" title="一个元素到另一个元素过渡"></a>一个元素到另一个元素过渡</h2><p>只要两个元素指定为相同的<code>view-transition-name</code>，就会进行过渡动画<br>但是一定要注意不能同时存在两个相同的<code>view-transition-name</code>，否则会报错，所以操作dom的时候需要给对应元素<code>view-transition-name</code>置空</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bnt-group&quot;</span> <span class="attr">id</span>=<span class="string">&quot;group&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dialog</span> <span class="attr">id</span>=<span class="string">&quot;dialog&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;dialog&quot;</span>&gt;</span></span><br><span class="line">    我是弹窗</span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>关闭<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dialog</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">group.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">ev</span>)&#123;</span><br><span class="line">  <span class="keyword">if</span> (ev.<span class="property">target</span>.<span class="property">tagName</span> === <span class="string">&#x27;BUTTON&#x27;</span>) &#123;</span><br><span class="line">    ev.<span class="property">target</span>.<span class="property">style</span>.<span class="property">viewTransitionName</span> = <span class="string">&#x27;dialog&#x27;</span> <span class="comment">// 动态添加 viewTransitionName</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">startViewTransition</span>) &#123;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="title function_">startViewTransition</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        dialog.<span class="title function_">showModal</span>()</span><br><span class="line">        ev.<span class="property">target</span>.<span class="property">style</span>.<span class="property">viewTransitionName</span> = <span class="string">&#x27;&#x27;</span> <span class="comment">// 结束后移除 viewTransitionName</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      dialog.<span class="title function_">showModal</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>还有一个问题是动画的时候两个元素之间是有过渡的，但是如果不需要，需要给<code>view-transition-old</code>置为隐藏</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">::<span class="built_in">view-transition-old</span>(dialog) &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义过渡动画"><a href="#自定义过渡动画" class="headerlink" title="自定义过渡动画"></a>自定义过渡动画</h2><p>本质上就是对新的帧动画进行播放，所以对<code>::view-transition-new</code>设置一个动画效果就可以了</p><p>定义一个动画</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> clip &#123;</span><br><span class="line">  <span class="selector-tag">from</span> &#123;</span><br><span class="line">    <span class="attribute">clip-path</span>: <span class="built_in">circle</span>(<span class="number">0%</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">to</span>&#123;</span><br><span class="line">    <span class="attribute">clip-path</span>: <span class="built_in">circle</span>(<span class="number">100%</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对<code>::view-transition-new</code>进行动画设置</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 动画开始时不受动画影响 */</span></span><br><span class="line">::<span class="built_in">view-transition-old</span>(*) &#123;</span><br><span class="line">  <span class="attribute">animation</span>: none;</span><br><span class="line">  <span class="attribute">mix-blend-mode</span>: normal;</span><br><span class="line">&#125;</span><br><span class="line">::<span class="built_in">view-transition-new</span>(root) &#123;</span><br><span class="line">  <span class="comment">/* mix-blend-mode: normal; */</span></span><br><span class="line">  <span class="attribute">animation</span>: clip .<span class="number">5s</span> ease-in;</span><br><span class="line">  <span class="comment">/* animation-duration: 2s; */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mix-blend-mode 的每个值都有其独特的混合效果，适用于不同的设计场景。例如：</p><ul><li>使用 multiply 或 darken 可以创建阴影或加深效果。</li><li>使用 screen 或 lighten 可以创建高光或发光效果。</li><li>使用 difference 或 exclusion 可以创建反色或对比强烈的效果。</li></ul><p>根据具体需求选择合适的 mix-blend-mode 值，可以实现丰富的视觉效果。</p><h1 id="js"><a href="#js" class="headerlink" title="js"></a>js</h1><h2 id="js中使用"><a href="#js中使用" class="headerlink" title="js中使用"></a>js中使用</h2><p>在 Promise ViewTransition.ready 实现后，使用 document.documentElement.animate 等方式来实现动画：</p><ul><li>updateCallbackDone</li><li>ready</li><li>finished</li><li>types</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> transition = <span class="variable language_">document</span>.<span class="title function_">startViewTransition</span>(<span class="function">() =&gt;</span> <span class="title function_">changeDOM</span>());</span><br><span class="line"></span><br><span class="line">transition.<span class="property">ready</span>.<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="title function_">animate</span>(...); <span class="comment">// 创建自己的动画效果</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="react中使用"><a href="#react中使用" class="headerlink" title="react中使用"></a>react中使用</h2><p><code>startViewTransition</code> 的回调需要是一个同步的dom操作，所以需要用 flushSync 包裹一下，不然没有效果</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">startViewTransition</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">flushSync</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">navigate</span>(<span class="string">`/demo6/detail?index=<span class="subst">$&#123;index&#125;</span>`</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://zhoujunxiong.gitee.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%AB%AF/">浏览器端</category>
      
      
      <category domain="http://zhoujunxiong.gitee.com/tags/%E5%89%8D%E7%AB%AF/">前端</category>
      
      <category domain="http://zhoujunxiong.gitee.com/tags/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%AB%AF/">浏览器端</category>
      
      
      <comments>http://zhoujunxiong.gitee.com/2025/01/09/%E5%89%8D%E7%AB%AF/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%AB%AF/ViewTransitionAPI/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>vscode插件开发</title>
      <link>http://zhoujunxiong.gitee.com/2024/07/17/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/vscode/vscode%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/</link>
      <guid>http://zhoujunxiong.gitee.com/2024/07/17/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/vscode/vscode%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/</guid>
      <pubDate>Wed, 17 Jul 2024 10:00:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;从一个简单的demo开始&quot;&gt;&lt;a href=&quot;#从一个简单的demo开始&quot; class=&quot;headerlink&quot; title=&quot;从一个简单的demo开始&quot;&gt;&lt;/a&gt;从一个简单的demo开始&lt;/h1&gt;&lt;p&gt;官网为我们提供了脚手架工具&lt;code&gt;yo&lt;/code&gt;&lt;b</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="从一个简单的demo开始"><a href="#从一个简单的demo开始" class="headerlink" title="从一个简单的demo开始"></a>从一个简单的demo开始</h1><p>官网为我们提供了脚手架工具<code>yo</code><br><code>npm install -g yo generator-code</code></p><p>那么你可以看到一个下面结构</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">├── .<span class="property">vscode</span></span><br><span class="line">│   ├── launch.<span class="property">json</span>     <span class="comment">// 插件加载和调试的配置</span></span><br><span class="line">│   └── tasks.<span class="property">json</span>      <span class="comment">// 配置TypeScript编译任务</span></span><br><span class="line">├── .<span class="property">gitignore</span>          <span class="comment">// 忽略构建输出和node_modules文件</span></span><br><span class="line">├── <span class="variable constant_">README</span>.<span class="property">md</span>           <span class="comment">// 一个友好的插件文档</span></span><br><span class="line">├── src</span><br><span class="line">│   └── extension.<span class="property">ts</span>    <span class="comment">// 插件源代码</span></span><br><span class="line">├── package.<span class="property">json</span>        <span class="comment">// 插件配置清单</span></span><br><span class="line">├── tsconfig.<span class="property">json</span>       <span class="comment">// TypeScript配置</span></span><br></pre></td></tr></table></figure><p>其中<code>extension.ts</code>是插件核心代码</p><p>插件入口文件会导出两个函数，<code>activate</code> 和 <code>deactivate</code>，你注册的激活事件被触发之时执行<code>activate</code>，<code>deactivate</code>则提供了插件关闭前执行清理工作的机会。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// The module &#x27;vscode&#x27; contains the VS Code extensibility API</span></span><br><span class="line"><span class="comment">// Import the module and reference it with the alias vscode in your code below</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> vscode <span class="keyword">from</span> <span class="string">&#x27;vscode&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// this method is called when your extension is activated</span></span><br><span class="line"><span class="comment">// your extension is activated the very first time the command is executed</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">activate</span>(<span class="params">context: vscode.ExtensionContext</span>) &#123;</span><br><span class="line"><span class="comment">// This line of code will only be executed once when your extension is activated</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Congratulations, your extension &quot;helloworld-sample&quot; is now active!&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// The command has been defined in the package.json file</span></span><br><span class="line">  <span class="comment">// 这个命令已经在package.json文件中定义</span></span><br><span class="line"><span class="comment">// Now provide the implementation of the command with registerCommand</span></span><br><span class="line">  <span class="comment">// 现在提供一个命令的实现</span></span><br><span class="line"><span class="comment">// The commandId parameter must match the command field in package.json</span></span><br><span class="line">  <span class="comment">// 这个命令必须要匹配package.json中的命令字段</span></span><br><span class="line"><span class="keyword">const</span> disposable = vscode.<span class="property">commands</span>.<span class="title function_">registerCommand</span>(<span class="string">&#x27;extension.helloWorld&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// The code you place here will be executed every time your command is executed</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Display a message box to the user</span></span><br><span class="line">vscode.<span class="property">window</span>.<span class="title function_">showInformationMessage</span>(<span class="string">&#x27;Hello World!&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">context.<span class="property">subscriptions</span>.<span class="title function_">push</span>(disposable);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>package.json</code>中是插件的配置清单</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;helloworld-sample&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;displayName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;helloworld-sample&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HelloWorld example for VS Code&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;publisher&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vscode-samples&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;repository&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://github.com/Microsoft/vscode-extension-samples/helloworld-sample&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 支持的vscode最低版本</span></span><br><span class="line">    <span class="attr">&quot;engines&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;vscode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.25.0&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;categories&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;Other&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 激活事件，什么时候激活</span></span><br><span class="line">    <span class="attr">&quot;activationEvents&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;onCommand:extension.helloWorld&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./out/extension.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 声明你提供的命令</span></span><br><span class="line">    <span class="attr">&quot;contributes&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;commands&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;extension.helloWorld&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Hello World&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;vscode:prepublish&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm run compile&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;compile&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tsc -p ./&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;watch&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tsc -watch -p ./&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;postinstall&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node ./node_modules/vscode/bin/install&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;@types/node&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^8.10.25&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;tslint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.11.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;typescript&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.6.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;vscode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.1.22&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h1 id="常用功能"><a href="#常用功能" class="headerlink" title="常用功能"></a>常用功能</h1><p>这些功能包括：</p><ul><li>注册命令、配置、快捷键绑定、菜单等。</li><li>保存工作区或全局数据。</li><li>显示通知信息。</li><li>使用快速选择获得用户输入。</li><li>打开系统的文件选择工具，以便用户选择文件或文件夹。</li><li>使用进度API提示耗时较长的操作。</li></ul><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><p>使用<code>vscode.commands</code>注册和执行命令<br>配置<code>contributes.commands</code>，确保命令面板中可以顺利执行你注册的命令</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> vscode <span class="keyword">from</span> <span class="string">&#x27;vscode&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行命令</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">commentLine</span>(<span class="params"></span>) &#123;</span><br><span class="line">    vscode.<span class="property">commands</span>.<span class="title function_">executeCommand</span>(<span class="string">&#x27;editor.action.addCommentLine&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册命令</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">activate</span>(<span class="params">context: vscode.ExtensionContext</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> command = <span class="string">&#x27;myExtension.sayHello&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">commandHandler</span> = (<span class="params">name?: <span class="built_in">string</span> = <span class="string">&#x27;world&#x27;</span></span>) =&gt; &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello <span class="subst">$&#123;name&#125;</span>!!!`</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    context.<span class="property">subscriptions</span>.<span class="title function_">push</span>(vscode.<span class="property">commands</span>.<span class="title function_">registerCommand</span>(command, commandHandler));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注册命令还需要去packagejson中进行注册</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;contributes&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;commands&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;myExtension.sayHello&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Say Hello&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>插件需要在contributes.configuration发布内容配置点</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;contributes&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;configuration&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;object&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;TypeScript configuration&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;typescript.useCodeSnippetsOnMethodSuggest&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;boolean&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;default&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Complete functions with their parameter signature.&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;typescript.tsdk&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;string&quot;</span><span class="punctuation">,</span> <span class="string">&quot;null&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;default&quot;</span><span class="punctuation">:</span> <span class="keyword">null</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Specifies the folder path containing the tsserver and lib*.d.ts files to use.&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="菜单"><a href="#菜单" class="headerlink" title="菜单"></a>菜单</h2><p>插件可以自定义上下文菜单项，菜单会根据用户右击VS Code UI的不同位置而各不相同。查看更多<code>contributes.menus</code>发布内容配置。</p><h2 id="数据储存"><a href="#数据储存" class="headerlink" title="数据储存"></a>数据储存</h2><p>VS Code中有三种数据储存方式：</p><p><code>ExtensionContext.workspaceState</code>：键值对组成的工作区数据。当同一个工作区再次打开时会重新取出数据。<br><code>ExtensionContext.globalState</code>：键值对组成的全局数据。当插件激活时会再次取出这些数据。<br><code>ExtensionContext.storagePath</code>：指向你的插件可以读写的本地文件夹的路径。如果你要储存比较大的数据，这是一个非常好的选择。<br><code>ExtensionContext.globalStoragePath</code>：指向你的插件可以读写的本地存储的路径。如果你要存储所有工作区内的大文件，这时一个非常好的选择。<br>插件的执行上下文在<code>activate</code>函数中，详见插件入口文件</p><h2 id="显示通知"><a href="#显示通知" class="headerlink" title="显示通知"></a>显示通知</h2><p>几乎所有的插件都需要在某些时候为用户提示信息。VS Code提供了3个API来展示不同重要程度的信息：</p><ul><li><code>window.showInformationMessage</code></li><li><code>window.showWarningMessage</code></li><li><code>window.showErrorMessage</code></li></ul><h2 id="快速选择"><a href="#快速选择" class="headerlink" title="快速选择"></a>快速选择</h2><p>使用<code>vscode.QuickPick</code>，你可以轻松地收集用户输入或者为用户显示选择列表</p><h2 id="文件选择"><a href="#文件选择" class="headerlink" title="文件选择"></a>文件选择</h2><p>插件可以使用<code>vscode.window.showOpenDialog</code>打开系统文件选择器，然后选择文件或是文件夹。</p><h2 id="输出日志"><a href="#输出日志" class="headerlink" title="输出日志"></a>输出日志</h2><p>你可以使用window.createOutputChannel创建一个新的输出日志</p><h1 id="扩展工作台"><a href="#扩展工作台" class="headerlink" title="扩展工作台"></a>扩展工作台</h1><p>工作台是指整个VS Code UI和其中包含的下列UI 组件：</p><ul><li>标题栏</li><li>活动栏</li><li>侧边栏</li><li>面板</li><li>编辑器群</li><li>状态栏</li></ul><h1 id="扩展语言（声明式和编程式）"><a href="#扩展语言（声明式和编程式）" class="headerlink" title="扩展语言（声明式和编程式）"></a>扩展语言（声明式和编程式）</h1>]]></content:encoded>
      
      
      <category domain="http://zhoujunxiong.gitee.com/categories/vscode%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/">vscode插件开发</category>
      
      
      <category domain="http://zhoujunxiong.gitee.com/tags/vscode/">vscode</category>
      
      <category domain="http://zhoujunxiong.gitee.com/tags/TypeScript/">TypeScript</category>
      
      
      <comments>http://zhoujunxiong.gitee.com/2024/07/17/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/vscode/vscode%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>electron文档阅读</title>
      <link>http://zhoujunxiong.gitee.com/2024/06/13/%E5%89%8D%E7%AB%AF/%E6%A1%86%E6%9E%B6/Eectron/electron%E6%96%87%E6%A1%A3%E9%98%85%E8%AF%BB/</link>
      <guid>http://zhoujunxiong.gitee.com/2024/06/13/%E5%89%8D%E7%AB%AF/%E6%A1%86%E6%9E%B6/Eectron/electron%E6%96%87%E6%A1%A3%E9%98%85%E8%AF%BB/</guid>
      <pubDate>Thu, 13 Jun 2024 03:02:25 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;a href=&quot;https://www.electronjs.org/zh/docs/latest/tutorial/tutorial-first-app&quot;&gt;官方文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;设置镜像&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;因为环境问题，需要修改环境变量 &lt;code&gt;n</description>
        
      
      
      
      <content:encoded><![CDATA[<p><a href="https://www.electronjs.org/zh/docs/latest/tutorial/tutorial-first-app">官方文档</a></p><p>设置镜像</p><ul><li>因为环境问题，需要修改环境变量 <code>npm install -D electron --ELECTRON_MIRROR=&quot;https://npmmirror.com/mirrors/electron/&quot;</code></li><li>或者在<code>.npmrc</code>中添加 <code>electron_mirror=https://npmmirror.com/mirrors/electron/</code></li></ul><h1 id="创建第一个程序"><a href="#创建第一个程序" class="headerlink" title="创建第一个程序"></a>创建第一个程序</h1><h2 id="创建窗口"><a href="#创建窗口" class="headerlink" title="创建窗口"></a>创建窗口</h2><p><code>package.json</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;electron .&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><p><code>index.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span></span></span><br><span class="line"><span class="tag">      <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">content</span>=<span class="string">&quot;default-src &#x27;self&#x27;; script-src &#x27;self&#x27;&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span></span></span><br><span class="line"><span class="tag">      <span class="attr">http-equiv</span>=<span class="string">&quot;X-Content-Security-Policy&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">content</span>=<span class="string">&quot;default-src &#x27;self&#x27;; script-src &#x27;self&#x27;&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello from Electron renderer!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello from Electron renderer!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>👋<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>main.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; app, <span class="title class_">BrowserWindow</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">createWindow</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> win = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;</span><br><span class="line">    <span class="attr">width</span>: <span class="number">800</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="number">600</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  win.<span class="title function_">loadFile</span>(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">whenReady</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">createWindow</span>()</span><br><span class="line"></span><br><span class="line">  app.<span class="title function_">on</span>(<span class="string">&#x27;activate&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">BrowserWindow</span>.<span class="title function_">getAllWindows</span>().<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="title function_">createWindow</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>通过检查 Node.js 的 <code>process.platform</code> 变量，您可以针对特定平台运行特定代码。 请注意，Electron 目前只支持三个平台：win32 (Windows), linux (Linux) 和 darwin (macOS) </p></blockquote><h2 id="preload"><a href="#preload" class="headerlink" title="preload"></a>preload</h2><p>基于安全考虑，默认渲染进程无法使用Node.js API，需要通过preload对外暴露nodejs的api</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">createWindow</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> win = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;</span><br><span class="line">    <span class="attr">width</span>: <span class="number">800</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="number">600</span>,</span><br><span class="line">    <span class="attr">webPreferences</span>: &#123;</span><br><span class="line">      <span class="comment">// 这一行加载preload</span></span><br><span class="line">      <span class="attr">preload</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;preload.js&#x27;</span>),</span><br><span class="line">      <span class="attr">devTools</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  win.<span class="property">webContents</span>.<span class="title function_">openDevTools</span>()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 通过检查 Node.js 的 process.platform 变量，您可以针对特定平台运行特定代码。 请注意，Electron 目前只支持三个平台：win32 (Windows), linux (Linux) 和 darwin (macOS) </span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(process.<span class="property">platform</span>);</span><br><span class="line">  win.<span class="title function_">loadFile</span>(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>preload.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; contextBridge, ipcRenderer &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 暴露一个versions在</span></span><br><span class="line">contextBridge.<span class="title function_">exposeInMainWorld</span>(<span class="string">&#x27;versions&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">node</span>: <span class="function">() =&gt;</span> process.<span class="property">versions</span>.<span class="property">node</span>,</span><br><span class="line">  <span class="attr">chrome</span>: <span class="function">() =&gt;</span> process.<span class="property">versions</span>.<span class="property">chrome</span>,</span><br><span class="line">  <span class="attr">electron</span>: <span class="function">() =&gt;</span> process.<span class="property">versions</span>.<span class="property">electron</span>,</span><br><span class="line">  <span class="comment">// 除函数之外，我们也可以暴露变量</span></span><br><span class="line">  <span class="attr">ping</span>: <span class="function">() =&gt;</span> ipcRenderer.<span class="title function_">invoke</span>(<span class="string">&#x27;ping&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><p>官方的不好使，直接使用<code>electron-builder</code></p>]]></content:encoded>
      
      
      <category domain="http://zhoujunxiong.gitee.com/categories/Eectron/">Eectron</category>
      
      
      <category domain="http://zhoujunxiong.gitee.com/tags/%E5%89%8D%E7%AB%AF/">前端</category>
      
      <category domain="http://zhoujunxiong.gitee.com/tags/Eectron/">Eectron</category>
      
      
      <comments>http://zhoujunxiong.gitee.com/2024/06/13/%E5%89%8D%E7%AB%AF/%E6%A1%86%E6%9E%B6/Eectron/electron%E6%96%87%E6%A1%A3%E9%98%85%E8%AF%BB/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Typescript之satisfies</title>
      <link>http://zhoujunxiong.gitee.com/2024/03/12/%E5%89%8D%E7%AB%AF/Typescript/Typescript%E4%B9%8Bsatisfies/</link>
      <guid>http://zhoujunxiong.gitee.com/2024/03/12/%E5%89%8D%E7%AB%AF/Typescript/Typescript%E4%B9%8Bsatisfies/</guid>
      <pubDate>Tue, 12 Mar 2024 10:53:49 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;为什么需要satisfies&quot;&gt;&lt;a href=&quot;#为什么需要satisfies&quot; class=&quot;headerlink&quot; title=&quot;为什么需要satisfies&quot;&gt;&lt;/a&gt;为什么需要satisfies&lt;/h1&gt;&lt;p&gt;下面是一个正常的ts用法&lt;/p&gt;
&lt;figu</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="为什么需要satisfies"><a href="#为什么需要satisfies" class="headerlink" title="为什么需要satisfies"></a>为什么需要satisfies</h1><p>下面是一个正常的ts用法</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">RGBColor</span> = &#123;</span><br><span class="line">  <span class="attr">red</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">green</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="attr">blue</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">HexColor</span> = <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Canvas</span> = &#123;</span><br><span class="line">      <span class="comment">// 前景色</span></span><br><span class="line">      <span class="attr">foregroundColor</span>: <span class="title class_">RGBColor</span> | <span class="title class_">HexColor</span>;</span><br><span class="line">      <span class="comment">// 背景色</span></span><br><span class="line">      <span class="attr">backgroundColor</span>: <span class="title class_">RGBColor</span> | <span class="title class_">HexColor</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> canvas1 = &#123;</span><br><span class="line">  <span class="attr">backgroundColor</span>: &#123; <span class="attr">red</span>: <span class="number">255</span>, <span class="attr">green</span>: <span class="number">0</span>, <span class="attr">blue</span>: <span class="number">0</span> &#125;,</span><br><span class="line">  <span class="comment">//                                      ^</span></span><br><span class="line">  <span class="comment">//                                      这里blue拼错了</span></span><br><span class="line">  <span class="attr">foregroundColor</span>: <span class="string">&quot;#000000&quot;</span>,</span><br><span class="line">&#125; satisfies <span class="title class_">Canvas</span></span><br></pre></td></tr></table></figure><p>这个时候问题出现了，ts会把<code>backgroundColor</code>作为联合类型（推断为string了），那么这个时候<br><code>canvas.backgroundColor.red</code>就会报错</p><h1 id="satisfies如何解决？"><a href="#satisfies如何解决？" class="headerlink" title="satisfies如何解决？"></a>satisfies如何解决？</h1><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> canvas1 = &#123;</span><br><span class="line">  <span class="attr">backgroundColor</span>: &#123; <span class="attr">red</span>: <span class="number">255</span>, <span class="attr">green</span>: <span class="number">0</span>, <span class="attr">blue</span>: <span class="number">0</span> &#125;,</span><br><span class="line">  <span class="comment">//                                      ^</span></span><br><span class="line">  <span class="comment">//                                      这里blue拼错了</span></span><br><span class="line">  <span class="attr">foregroundColor</span>: <span class="string">&quot;#000000&quot;</span>,</span><br><span class="line">&#125; satisfies <span class="title class_">Canvas</span></span><br></pre></td></tr></table></figure><p>这个时候<code>canvas.backgroundColor.red</code>就不会报错了</p><h1 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h1><p>就是这个<code>backgroundColor</code>的类型不能再改变了</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用satisfies就会报错，如果是as就不会报错</span></span><br><span class="line">canvas1.<span class="property">backgroundColor</span> = <span class="string">&#x27;#000000&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="和const结合"><a href="#和const结合" class="headerlink" title="和const结合"></a>和const结合</h1><p>当你想要<code>backgroundColor.red</code>是一个常量，而不是<code>number</code>的时候, 可以这样使用</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> canvas1 = &#123;</span><br><span class="line">  <span class="attr">backgroundColor</span>: &#123; <span class="attr">red</span>: <span class="number">255</span>, <span class="attr">green</span>: <span class="number">0</span>, <span class="attr">blue</span>: <span class="number">0</span> &#125;,</span><br><span class="line">  <span class="comment">//                                      ^</span></span><br><span class="line">  <span class="comment">//                                      这里blue拼错了</span></span><br><span class="line">  <span class="attr">foregroundColor</span>: <span class="string">&quot;#000000&quot;</span>,</span><br><span class="line">&#125; <span class="keyword">as</span> <span class="keyword">const</span> satisfies <span class="title class_">Canvas</span> </span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://zhoujunxiong.gitee.com/categories/Typescript/">Typescript</category>
      
      
      <category domain="http://zhoujunxiong.gitee.com/tags/%E5%89%8D%E7%AB%AF/">前端</category>
      
      <category domain="http://zhoujunxiong.gitee.com/tags/Typescript/">Typescript</category>
      
      
      <comments>http://zhoujunxiong.gitee.com/2024/03/12/%E5%89%8D%E7%AB%AF/Typescript/Typescript%E4%B9%8Bsatisfies/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>framer-motion</title>
      <link>http://zhoujunxiong.gitee.com/2024/03/02/%E5%89%8D%E7%AB%AF/%E6%A1%86%E6%9E%B6/framer-mition/</link>
      <guid>http://zhoujunxiong.gitee.com/2024/03/02/%E5%89%8D%E7%AB%AF/%E6%A1%86%E6%9E%B6/framer-mition/</guid>
      <pubDate>Sat, 02 Mar 2024 14:00:30 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;motion&quot;&gt;&lt;a href=&quot;#motion&quot; class=&quot;headerlink&quot; title=&quot;motion&quot;&gt;&lt;/a&gt;motion&lt;/h2&gt;&lt;p&gt;&lt;code&gt;initial&lt;/code&gt;,&lt;code&gt;style&lt;/code&gt;,&lt;code&gt;classNam</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="motion"><a href="#motion" class="headerlink" title="motion"></a>motion</h2><p><code>initial</code>,<code>style</code>,<code>className</code>都可以设置初始状态</p><blockquote><p>initial为false可以关闭进入动画</p></blockquote><p><code>animate</code>控制具体动作<br><code>transition</code>控制动画时间</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;motion.<span class="property">div</span></span><br><span class="line">  key=&#123;num&#125;</span><br><span class="line">  <span class="comment">// style=&#123;&#123;</span></span><br><span class="line">  <span class="comment">//   width: 100,</span></span><br><span class="line">  <span class="comment">//   height: 100,</span></span><br><span class="line">  <span class="comment">//   backgroundColor: &#x27;blueviolet&#x27;,</span></span><br><span class="line">  <span class="comment">//   borderRadius: &#x27;20px&#x27;,</span></span><br><span class="line">  <span class="comment">// &#125;&#125;</span></span><br><span class="line">  <span class="comment">// initial=&#123;&#123;</span></span><br><span class="line">  <span class="comment">//   width: 100,</span></span><br><span class="line">  <span class="comment">//   height: 100,</span></span><br><span class="line">  <span class="comment">//   backgroundColor: &#x27;blueviolet&#x27;,</span></span><br><span class="line">  <span class="comment">//   borderRadius: &#x27;20px&#x27;,</span></span><br><span class="line">  <span class="comment">// &#125;&#125;</span></span><br><span class="line">  className=<span class="string">&quot;w-24 h-24 bg-blue-500 rounded-full&quot;</span></span><br><span class="line">  animate=&#123;&#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="number">50</span>, <span class="comment">// 向右移动50px</span></span><br><span class="line">    <span class="attr">y</span>: <span class="number">20</span>, <span class="comment">// 向下移动20px</span></span><br><span class="line">    <span class="attr">scale</span>: <span class="number">0.5</span>, <span class="comment">// 缩放至0.5倍</span></span><br><span class="line">    <span class="attr">rotate</span>: <span class="number">45</span>, <span class="comment">// 旋转45度</span></span><br><span class="line">    <span class="attr">opacity</span>: <span class="number">0.5</span>, <span class="comment">// 不透明度设置为0.5</span></span><br><span class="line">  &#125;&#125;</span><br><span class="line">  transition=&#123;&#123; <span class="attr">duration</span>: <span class="number">0.5</span> &#125;&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><h3 id="motion可以设置动画的值"><a href="#motion可以设置动画的值" class="headerlink" title="motion可以设置动画的值"></a>motion可以设置动画的值</h3><p>下面类型的数据，motion都可以进行动画处理</p><ul><li>数字</li><li>包含数字的字符串: “0vh”, “10px”</li><li>颜色：十六进制、RGB、HSLA</li><li>包含多个数字和/或颜色的复杂字符串（即 “10px 0 #000” ）<code>backgroundImage: &quot;linear-gradient(0deg, #e0c3fc 100%, #8ec5fc 0%)&quot;</code> 这种复杂的也是可以的</li><li>css变量（一般是想要把变量传递给子元素的时候）</li></ul><blockquote><p>转化值按特定顺序应用：平移、缩放、旋转、倾斜 (可以使用transformTemplate修改这个顺序)</p></blockquote><blockquote><p>transformTemplate({x, rotate})=&gt;<code>rotate($&#123;rotate&#125;) translateX($&#123;x&#125;)</code></p></blockquote><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;motion.<span class="property">div</span></span><br><span class="line">  initial=&#123;&#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="number">0</span>, <span class="comment">// 向右移动50px</span></span><br><span class="line">    <span class="string">&#x27;--bg-angle&#x27;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">backgroundImage</span>: <span class="string">&quot;linear-gradient(0deg, #e0c3fc 100%, #8ec5fc 0%),</span></span><br><span class="line"><span class="string">  &#125;&#125;</span></span><br><span class="line"><span class="string">  animate=&#123;&#123;</span></span><br><span class="line"><span class="string">    x: 50, // 向右移动50px</span></span><br><span class="line"><span class="string">    &#x27;--bg-angle&#x27;: 360,</span></span><br><span class="line"><span class="string">    backgroundImage: &quot;</span>linear-<span class="title function_">gradient</span>(360deg, #e0c3fc <span class="number">100</span>%, #8ec5fc <span class="number">0</span>%)</span><br><span class="line">  &#125;&#125;</span><br><span class="line">  transition=&#123;&#123; <span class="attr">duration</span>: <span class="number">0.5</span> &#125;&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><h3 id="动画值增强支持"><a href="#动画值增强支持" class="headerlink" title="动画值增强支持"></a>动画值增强支持</h3><p>并且组件的 x 、 y 、 width 、 height 、 top left right 和 bottom 值具有增强的支持，可以在不同类型中进行转化</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;motion.<span class="property">div</span></span><br><span class="line">  initial=&#123;&#123; <span class="attr">x</span>: <span class="string">&quot;100%&quot;</span> &#125;&#125;</span><br><span class="line">  animate=&#123;&#123; <span class="attr">x</span>: <span class="string">&quot;calc(100vw - 50%)&quot;</span> &#125;&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><h3 id="css变量"><a href="#css变量" class="headerlink" title="css变量"></a>css变量</h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;motion.<span class="property">ul</span></span><br><span class="line">  initial=&#123;&#123; <span class="string">&#x27;--rotate&#x27;</span>: <span class="string">&#x27;0deg&#x27;</span> &#125; <span class="keyword">as</span> <span class="built_in">any</span>&#125;</span><br><span class="line">  animate=&#123;&#123; <span class="string">&#x27;--rotate&#x27;</span>: <span class="string">&#x27;360deg&#x27;</span> &#125; <span class="keyword">as</span> <span class="built_in">any</span>&#125;</span><br><span class="line">  transition=&#123;&#123; <span class="attr">duration</span>: <span class="number">2</span>, <span class="attr">repeat</span>: <span class="title class_">Infinity</span> &#125;&#125;</span><br><span class="line">&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">transform:</span> &#x27;<span class="attr">rotate</span>(<span class="attr">var</span>(<span class="attr">--rotate</span>))&#x27; &#125;&#125; /&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">transform:</span> &#x27;<span class="attr">rotate</span>(<span class="attr">var</span>(<span class="attr">--rotate</span>))&#x27; &#125;&#125; /&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">transform:</span> &#x27;<span class="attr">rotate</span>(<span class="attr">var</span>(<span class="attr">--rotate</span>))&#x27; &#125;&#125; /&gt;</span></span></span><br><span class="line">&lt;/motion.<span class="property">ul</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="custom自定义每一个子元素动画"><a href="#custom自定义每一个子元素动画" class="headerlink" title="custom自定义每一个子元素动画"></a>custom自定义每一个子元素动画</h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> variants = &#123;</span><br><span class="line">  <span class="attr">visible</span>: <span class="function">(<span class="params">custom</span>) =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">opacity</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">transition</span>: &#123; <span class="attr">delay</span>: custom * <span class="number">0.2</span> &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;motion.<span class="property">div</span> custom=&#123;<span class="number">0</span>&#125; animate=<span class="string">&quot;visible&quot;</span> variants=&#123;variants&#125; /&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">motion.div</span> <span class="attr">custom</span>=<span class="string">&#123;1&#125;</span> <span class="attr">animate</span>=<span class="string">&quot;visible&quot;</span> <span class="attr">variants</span>=<span class="string">&#123;variants&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">motion.div</span> <span class="attr">custom</span>=<span class="string">&#123;2&#125;</span> <span class="attr">animate</span>=<span class="string">&quot;visible&quot;</span> <span class="attr">variants</span>=<span class="string">&#123;variants&#125;</span> /&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="退出动画"><a href="#退出动画" class="headerlink" title="退出动画"></a>退出动画</h2><p>退出需要使用<code>AnimatePresence</code>组件进行包裹，并且可以使用<code>exit</code>定义退出的状态</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">AnimatePresence</span>&gt;</span><br><span class="line">  &#123;num % <span class="number">2</span> === <span class="number">0</span> &amp;&amp; (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">motion.div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">key</span>=<span class="string">&#123;num&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      // 设置退出的状态</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">exit</span>=<span class="string">&#123;&#123;</span> <span class="attr">opacity:</span> <span class="attr">0</span> &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">className</span>=<span class="string">&quot;w-24 h-24 bg-blue-500 rounded-[20px]&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">animate</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        // 为数组可以设置关键帧</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">x:</span> [<span class="attr">0</span>, <span class="attr">50</span>, <span class="attr">0</span>], // 向右移动<span class="attr">50px</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        // <span class="attr">null</span>表示从当前状态</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">y:</span> [<span class="attr">null</span>, <span class="attr">20</span>], // 向下移动<span class="attr">20px</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">scale:</span> <span class="attr">0.5</span>, // 缩放至<span class="attr">0.5</span>倍</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">rotate:</span> <span class="attr">45</span>, // 旋转<span class="attr">45</span>度</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">opacity:</span> <span class="attr">0.5</span>, // 不透明度设置为<span class="attr">0.5</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">transition</span>=<span class="string">&#123;&#123;</span> <span class="attr">duration:</span> <span class="attr">0.5</span> &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    /&gt;</span></span></span><br><span class="line">  )&#125;</span><br><span class="line">&lt;/<span class="title class_">AnimatePresence</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="times设置动画曲线"><a href="#times设置动画曲线" class="headerlink" title="times设置动画曲线"></a>times设置动画曲线</h2><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;motion.<span class="property">circle</span></span><br><span class="line">  cx=&#123;<span class="number">500</span>&#125;</span><br><span class="line">  animate=&#123;&#123; <span class="attr">cx</span>: [<span class="literal">null</span>, <span class="number">100</span>, <span class="number">200</span>] &#125;&#125;</span><br><span class="line">  transition=&#123;&#123; <span class="attr">duration</span>: <span class="number">3</span>, <span class="attr">times</span>: [<span class="number">0</span>, <span class="number">0.2</span>, <span class="number">1</span>] &#125;&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><h2 id="动作手势（hover-tap）"><a href="#动作手势（hover-tap）" class="headerlink" title="动作手势（hover,tap）"></a>动作手势（hover,tap）</h2><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;motion.<span class="property">button</span></span><br><span class="line">  initial=&#123;&#123; <span class="attr">opacity</span>: <span class="number">0.6</span> &#125;&#125;</span><br><span class="line">  whileHover=&#123;&#123;</span><br><span class="line">    <span class="attr">scale</span>: <span class="number">1.2</span>,</span><br><span class="line">    <span class="attr">transition</span>: &#123; <span class="attr">duration</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  &#125;&#125;</span><br><span class="line">  whileTap=&#123;&#123; <span class="attr">scale</span>: <span class="number">0.9</span> &#125;&#125;</span><br><span class="line">  whileInView=&#123;&#123; <span class="attr">opacity</span>: <span class="number">1</span> &#125;&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><h2 id="Variants-动画组"><a href="#Variants-动画组" class="headerlink" title="Variants 动画组"></a>Variants 动画组</h2><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> variants = &#123;</span><br><span class="line"><span class="attr">show</span>:&#123;</span><br><span class="line"><span class="attr">opacity</span>:<span class="number">1</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">hidden</span>:&#123;</span><br><span class="line"><span class="attr">opacity</span>:<span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;motion.<span class="property">div</span></span><br><span class="line">  initial=<span class="string">&quot;hidden&quot;</span></span><br><span class="line">  animate=<span class="string">&quot;show&quot;</span></span><br><span class="line">  variants=&#123;variants&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><h3 id="Propagation-传播"><a href="#Propagation-传播" class="headerlink" title="Propagation 传播"></a>Propagation 传播</h3><p>子组件也会应用到动画组中<br>If a motion component has children, changes in variant will flow down through the component hierarchy until a child component defines its own animate property.<br>如果 motion 组件有子组件，则变体中的更改将沿着组件层次结构向下流动，直到子组件定义其自己的 animate 属性</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> list = &#123;</span><br><span class="line">  <span class="attr">visible</span>: &#123; <span class="attr">opacity</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  <span class="attr">hidden</span>: &#123; <span class="attr">opacity</span>: <span class="number">0</span> &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> item = &#123;</span><br><span class="line">  <span class="attr">visible</span>: &#123; <span class="attr">opacity</span>: <span class="number">1</span>, <span class="attr">x</span>: <span class="number">0</span> &#125;,</span><br><span class="line">  <span class="attr">hidden</span>: &#123; <span class="attr">opacity</span>: <span class="number">0</span>, <span class="attr">x</span>: -<span class="number">100</span> &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">motion.ul</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">initial</span>=<span class="string">&quot;hidden&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">animate</span>=<span class="string">&quot;visible&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">variants</span>=<span class="string">&#123;list&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  &gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">motion.li</span> <span class="attr">variants</span>=<span class="string">&#123;item&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">motion.li</span> <span class="attr">variants</span>=<span class="string">&#123;item&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">motion.li</span> <span class="attr">variants</span>=<span class="string">&#123;item&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">motion.ul</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="Orchestration-编排"><a href="#Orchestration-编排" class="headerlink" title="Orchestration 编排"></a>Orchestration 编排</h3><p>默认情况下，所有这些动画将同时启动，但是通过使用变体，我们可以访问额外的 <code>transition</code> 属性，例如 <code>when 、 delayChildren 和 staggerChildren</code></p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> list = &#123;</span><br><span class="line">  <span class="attr">visible</span>: &#123;</span><br><span class="line">    <span class="attr">opacity</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">transition</span>: &#123;</span><br><span class="line">      <span class="comment">// 在子元素之前显示</span></span><br><span class="line">      <span class="attr">when</span>: <span class="string">&quot;beforeChildren&quot;</span>,</span><br><span class="line">      <span class="comment">// 每个子元素之间有 0.3 秒的延迟</span></span><br><span class="line">      <span class="attr">staggerChildren</span>: <span class="number">0.3</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">hidden</span>: &#123;</span><br><span class="line">    <span class="attr">opacity</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">transition</span>: &#123;</span><br><span class="line">      <span class="comment">// 在子元素之后</span></span><br><span class="line">      <span class="attr">when</span>: <span class="string">&quot;afterChildren&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> item = &#123;</span><br><span class="line">  <span class="attr">visible</span>: &#123; <span class="attr">opacity</span>: <span class="number">1</span>, <span class="attr">x</span>: <span class="number">0</span> &#125;,</span><br><span class="line">  <span class="attr">hidden</span>: &#123; <span class="attr">opacity</span>: <span class="number">0</span>, <span class="attr">x</span>: -<span class="number">100</span> &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;motion.<span class="property">ul</span></span><br><span class="line">  initial=<span class="string">&quot;hidden&quot;</span></span><br><span class="line">  animate=<span class="string">&quot;visible&quot;</span></span><br><span class="line">  exit=<span class="string">&quot;hidden&quot;</span></span><br><span class="line">  variants=&#123;list&#125;</span><br><span class="line">  className=<span class="string">&quot;bg-violet-950 w-28 p-1&quot;</span></span><br><span class="line">&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">motion.li</span> <span class="attr">variants</span>=<span class="string">&#123;item&#125;</span> <span class="attr">className</span>=<span class="string">&quot;bg-violet-500 w-24 h-7 mb-1&quot;</span> /&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">motion.li</span> <span class="attr">variants</span>=<span class="string">&#123;item&#125;</span> <span class="attr">className</span>=<span class="string">&quot;bg-violet-500 w-24 h-7 mb-1&quot;</span> /&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">motion.li</span> <span class="attr">variants</span>=<span class="string">&#123;item&#125;</span> <span class="attr">className</span>=<span class="string">&quot;bg-violet-500 w-24 h-7 mb-1&quot;</span> /&gt;</span></span></span><br><span class="line">&lt;/motion.<span class="property">ul</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="Dynamic-variants-动态变体"><a href="#Dynamic-variants-动态变体" class="headerlink" title="Dynamic variants 动态变体"></a>Dynamic variants 动态变体</h3><p>还可以自定义函数处理动画</p><p>每个变体都可以定义为一个在访问变体时解析的函数。这些变体函数提供了一个参数，可以在组件的 custom 属性中设置。</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> variants = &#123;</span><br><span class="line">  <span class="attr">visible</span>: <span class="function"><span class="params">i</span> =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">opacity</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">transition</span>: &#123;</span><br><span class="line">      <span class="attr">delay</span>: i * <span class="number">0.3</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="attr">hidden</span>: &#123; <span class="attr">opacity</span>: <span class="number">0</span> &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> items.<span class="title function_">map</span>(<span class="function">(<span class="params">item, i</span>) =&gt;</span> (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">motion.li</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">custom</span>=<span class="string">&#123;i&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">animate</span>=<span class="string">&quot;visible&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">variants</span>=<span class="string">&#123;variants&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  /&gt;</span></span></span><br><span class="line">))</span><br></pre></td></tr></table></figure><h3 id="Multiple-variants-多种变体"><a href="#Multiple-variants-多种变体" class="headerlink" title="Multiple variants 多种变体"></a>Multiple variants 多种变体</h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;motion.<span class="property">ul</span> variants=&#123;[<span class="string">&quot;open&quot;</span>, <span class="string">&quot;primary&quot;</span>]&#125; /&gt;</span><br></pre></td></tr></table></figure><h2 id="Manual-controls-手动控制"><a href="#Manual-controls-手动控制" class="headerlink" title="Manual controls  手动控制"></a>Manual controls  手动控制</h2><p>使用 time 、 speed 、 play() 、 pause() 和其他播放控件控制动画。</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">MyComponent</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [scope, animate] = <span class="title function_">useAnimate</span>()</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">animation</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">await</span> <span class="title function_">animate</span>(scope.<span class="property">current</span>, &#123; <span class="attr">x</span>: <span class="number">20</span> &#125;)</span><br><span class="line">      <span class="title function_">animate</span>(<span class="string">&#x27;li&#x27;</span>, &#123; <span class="attr">opacity</span>: <span class="number">1</span> &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">animation</span>()</span><br><span class="line">  &#125;, [scope, animate])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">ref</span>=<span class="string">&#123;scope&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;Array.from(&#123; length: 10 &#125;).map((_, index) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">        return <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>&#123;index&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#125;)&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Animate-single-values-对单个值进行动画处理"><a href="#Animate-single-values-对单个值进行动画处理" class="headerlink" title="Animate single values  #对单个值进行动画处理"></a>Animate single values  #对单个值进行动画处理</h2><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [scope, animate]= <span class="title function_">useAnimate</span>()</span><br><span class="line"><span class="keyword">const</span> x = <span class="title function_">useMotionValue</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> controls = <span class="title function_">animate</span>(x, <span class="number">100</span>, &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;spring&quot;</span>,</span><br><span class="line">    <span class="attr">stiffness</span>: <span class="number">2000</span>,</span><br><span class="line">    <span class="attr">onComplete</span>: <span class="function">() =&gt;</span> &#123;&#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> controls.<span class="property">stop</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Animate-content-动画内容"><a href="#Animate-content-动画内容" class="headerlink" title="Animate content 动画内容"></a>Animate content 动画内容</h2><p>使用<code>useTransform</code>配合<code>useMotionValue</code>就可以直接在组件中使用动画效果。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> count = <span class="title function_">useMotionValue</span>(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">const</span> rounded = <span class="title function_">useTransform</span>(count, <span class="function"><span class="params">latest</span> =&gt;</span> <span class="title class_">Math</span>.<span class="title function_">round</span>(latest))</span><br><span class="line"></span><br><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> controls = <span class="title function_">animate</span>(count, <span class="number">100</span>, &#123; <span class="attr">duration</span>: <span class="number">10</span> &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> controls.<span class="property">stop</span></span><br><span class="line">&#125;, [])</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">motion.div</span>&gt;</span>&#123;rounded&#125;<span class="tag">&lt;/<span class="name">motion.div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="Layout"><a href="#Layout" class="headerlink" title="Layout"></a>Layout</h2><p>如果你想对布局进行动画，可以使用<code>layout</code>属性</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;motion.<span class="property">div</span> layout /&gt;</span><br><span class="line"></span><br><span class="line">.<span class="property">switch</span> &#123;</span><br><span class="line">  <span class="attr">width</span>: 160px;</span><br><span class="line">  <span class="attr">height</span>: 100px;</span><br><span class="line">  background-<span class="attr">color</span>: <span class="title function_">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.4</span>);</span><br><span class="line">  <span class="attr">display</span>: flex;</span><br><span class="line">  justify-<span class="attr">content</span>: flex-start;</span><br><span class="line">  border-<span class="attr">radius</span>: 50px;</span><br><span class="line">  <span class="attr">padding</span>: 10px;</span><br><span class="line">  <span class="attr">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.<span class="property">switch</span>[data-isOn=<span class="string">&quot;true&quot;</span>] &#123;</span><br><span class="line">  justify-<span class="attr">content</span>: flex-end;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [isOn, setIsOn] = <span class="title function_">useState</span>(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">toggleSwitch</span> = (<span class="params"></span>) =&gt; <span class="title function_">setIsOn</span>(!isOn);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;switch&quot;</span> <span class="attr">data-isOn</span>=<span class="string">&#123;isOn&#125;</span> <span class="attr">onClick</span>=<span class="string">&#123;toggleSwitch&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">motion.div</span> <span class="attr">className</span>=<span class="string">&quot;handle&quot;</span> <span class="attr">layout</span> <span class="attr">transition</span>=<span class="string">&#123;spring&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> spring = &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&quot;spring&quot;</span>,</span><br><span class="line">  <span class="comment">// bounce and duration will be overridden if stiffness, damping or mass are set</span></span><br><span class="line">  <span class="comment">// bounce和duration会覆盖stiffness, damping or mass</span></span><br><span class="line">  <span class="comment">// 0 没有弹跳，而且 1 非常有弹性</span></span><br><span class="line">  <span class="attr">bounce</span>: <span class="number">0.5</span>,</span><br><span class="line">  <span class="comment">// 刚度 弹簧的刚度。较高的值将产生更突然的运动 默认100</span></span><br><span class="line">  <span class="attr">stiffness</span>: <span class="number">700</span>,</span><br><span class="line">  <span class="comment">// 阻尼：数量 如果设置为 0，弹簧将无限期地振荡，每弹一次的衰减</span></span><br><span class="line">  <span class="attr">damping</span>: <span class="number">30</span>,</span><br><span class="line">  <span class="comment">// 质量 运动物体的质量。较高的值将导致加速度快，但是难以移动</span></span><br><span class="line">  <span class="attr">mass</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="comment">// 速度 弹簧的初速度。默认情况下，这是组件的当前速度。</span></span><br><span class="line">  <span class="attr">velocity</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="comment">// 静止速度 如果绝对速度（以每秒单位为单位）低于此值并且增量小于 restDelta ，则结束动画。默认设置为 0.01</span></span><br><span class="line">  <span class="attr">restSpeed</span>: <span class="number">0.01</span>,</span><br><span class="line">  <span class="comment">// 如果距离低于此值且速度低于 restSpeed ，则结束动画。当动画结束时，弹簧被“捕捉”到。默认设置为 0.01 。</span></span><br><span class="line">  <span class="attr">restDelta</span>: <span class="number">0.01</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Shared-layout-animations-共享布局动画"><a href="#Shared-layout-animations-共享布局动画" class="headerlink" title="Shared layout animations 共享布局动画"></a>Shared layout animations 共享布局动画</h3><p>当两个组件进行切换的时候，如果有相同的<code>layoutId</code>就会自动进行平滑动画</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;./styles.css&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; initialTabs <span class="keyword">as</span> tabs &#125; <span class="keyword">from</span> <span class="string">&quot;./ingredients&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; motion, <span class="title class_">AnimatePresence</span> &#125; <span class="keyword">from</span> <span class="string">&quot;framer-motion&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [selectedTab, setSelectedTab] = <span class="title function_">useState</span>(tabs[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;window&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;tabs.map((item) =&gt; (</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">li</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">key</span>=<span class="string">&#123;item.label&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">className</span>=<span class="string">&#123;item</span> === <span class="string">selectedTab</span> ? &quot;<span class="attr">selected</span>&quot; <span class="attr">:</span> &quot;&quot;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setSelectedTab(item)&#125;</span></span><br><span class="line"><span class="language-xml">            &gt;</span></span><br><span class="line"><span class="language-xml">              &#123;`$&#123;item.icon&#125; $&#123;item.label&#125;`&#125;</span></span><br><span class="line"><span class="language-xml">              &#123;item === selectedTab ? (</span></span><br><span class="line"><span class="language-xml">                &#123;/* 当切换按钮时，对应的下划线才会展示 */&#125;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">motion.div</span> <span class="attr">className</span>=<span class="string">&quot;underline&quot;</span> <span class="attr">layoutId</span>=<span class="string">&quot;underline&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">              ) : null&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          ))&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">main</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;/* mode: &quot;sync&quot; | &quot;wait&quot; | &quot;popLayout&quot;</span></span><br><span class="line"><span class="language-xml">                模式：“同步” | “等待”| “弹出布局” */&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">AnimatePresence</span> <span class="attr">mode</span>=<span class="string">&quot;wait&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">motion.div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">key</span>=<span class="string">&#123;selectedTab</span> ? <span class="attr">selectedTab.label</span> <span class="attr">:</span> &quot;<span class="attr">empty</span>&quot;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">initial</span>=<span class="string">&#123;&#123;</span> <span class="attr">y:</span> <span class="attr">10</span>, <span class="attr">opacity:</span> <span class="attr">0</span> &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">animate</span>=<span class="string">&#123;&#123;</span> <span class="attr">y:</span> <span class="attr">0</span>, <span class="attr">opacity:</span> <span class="attr">1</span> &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">exit</span>=<span class="string">&#123;&#123;</span> <span class="attr">y:</span> <span class="attr">-10</span>, <span class="attr">opacity:</span> <span class="attr">0</span> &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">transition</span>=<span class="string">&#123;&#123;</span> <span class="attr">duration:</span> <span class="attr">0.2</span> &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;selectedTab ? selectedTab.icon : &quot;😋&quot;&#125;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">motion.div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">AnimatePresence</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Gestures-手势"><a href="#Gestures-手势" class="headerlink" title="Gestures 手势"></a>Gestures 手势</h2><p>motion 组件提供多种手势动画道具： <code>whileHover</code> 、 <code>whileTap</code> 、 <code>whileFocus</code> 、 <code>whileDrag</code> 和 <code>whileInView</code></p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;motion.<span class="property">button</span></span><br><span class="line">  whileHover=&#123;&#123;</span><br><span class="line">    <span class="attr">scale</span>: <span class="number">1.2</span>,</span><br><span class="line">    <span class="attr">transition</span>: &#123; <span class="attr">duration</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  &#125;&#125;</span><br><span class="line">  whileTap=&#123;&#123; <span class="attr">scale</span>: <span class="number">0.9</span> &#125;&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><h3 id="停止事件传播"><a href="#停止事件传播" class="headerlink" title="停止事件传播"></a>停止事件传播</h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;motion.<span class="property">div</span> whileTap=&#123;&#123; <span class="attr">scale</span>: <span class="number">2</span> &#125;&#125;&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onPointerDownCapture</span>=<span class="string">&#123;e</span> =&gt;</span> e.stopPropagation()&#125; /&gt;</span></span><br><span class="line">&lt;/motion.<span class="property">div</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="Scroll-animations-滚动动画"><a href="#Scroll-animations-滚动动画" class="headerlink" title="Scroll animations 滚动动画"></a>Scroll animations 滚动动画</h2><p>主要是通过<code>useScroll</code></p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; motion, useScroll &#125; <span class="keyword">from</span> <span class="string">&quot;framer-motion&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Component</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; scrollYProgress &#125; = <span class="title function_">useScroll</span>();</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">motion.div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">scaleX:</span> <span class="attr">scrollYProgress</span> &#125;&#125; /&gt;</span></span>  </span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="whileInView-滚动到视图内的动画"><a href="#whileInView-滚动到视图内的动画" class="headerlink" title="whileInView 滚动到视图内的动画"></a>whileInView 滚动到视图内的动画</h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;motion.<span class="property">div</span></span><br><span class="line">  initial=&#123;&#123; <span class="attr">opacity</span>: <span class="number">0</span> &#125;&#125;</span><br><span class="line">  whileInView=&#123;&#123; <span class="attr">opacity</span>: <span class="number">1</span> &#125;&#125;</span><br><span class="line">  &#123;<span class="comment">/* 只进行一次动画 */</span>&#125;</span><br><span class="line">  viewport=&#123;&#123; <span class="attr">once</span>: <span class="literal">true</span> &#125;&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><p>但是如果是在子窗口中, 需要设置<code>viewport</code></p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Component</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> scrollRef = <span class="title function_">useRef</span>(<span class="literal">null</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&#123;scrollRef&#125;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">overflow:</span> &quot;<span class="attr">scroll</span>&quot; &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">motion.div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">initial</span>=<span class="string">&#123;&#123;</span> <span class="attr">opacity:</span> <span class="attr">0</span> &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">whileInView</span>=<span class="string">&#123;&#123;</span> <span class="attr">opacity:</span> <span class="attr">1</span> &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">viewport</span>=<span class="string">&#123;&#123;</span> <span class="attr">root:</span> <span class="attr">scrollRef</span> &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>增加平滑过渡</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; scrollYProgress &#125; = <span class="title function_">useScroll</span>();</span><br><span class="line">  <span class="keyword">const</span> scaleX = <span class="title function_">useSpring</span>(scrollYProgress, &#123;</span><br><span class="line">    <span class="attr">stiffness</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="attr">damping</span>: <span class="number">30</span>,</span><br><span class="line">    <span class="attr">restDelta</span>: <span class="number">0.001</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">motion.div</span> <span class="attr">className</span>=<span class="string">&quot;progress-bar&quot;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">scaleX</span> &#125;&#125; /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">code</span>&gt;</span>useScroll<span class="tag">&lt;/<span class="name">code</span>&gt;</span> with spring smoothing</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">LoremIpsum</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Transition-过渡"><a href="#Transition-过渡" class="headerlink" title="Transition 过渡"></a>Transition 过渡</h2><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;motion.<span class="property">div</span></span><br><span class="line">  animate=&#123;&#123; <span class="attr">x</span>: <span class="number">100</span> &#125;&#125;</span><br><span class="line">  transition=&#123;&#123; <span class="attr">delay</span>: <span class="number">1</span> &#125;&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><h3 id="transitionEnd-动画完成后应用的属性"><a href="#transitionEnd-动画完成后应用的属性" class="headerlink" title="transitionEnd(动画完成后应用的属性)"></a>transitionEnd(动画完成后应用的属性)</h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;motion.<span class="property">div</span></span><br><span class="line">  animate=&#123;&#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">backgroundColor</span>: <span class="string">&quot;#000&quot;</span>,</span><br><span class="line">    <span class="attr">boxShadow</span>: <span class="string">&quot;10px 10px 0 rgba(0, 0, 0, 0.2)&quot;</span>,</span><br><span class="line">    <span class="attr">position</span>: <span class="string">&quot;fixed&quot;</span>,</span><br><span class="line">    <span class="attr">transitionEnd</span>: &#123;</span><br><span class="line">      <span class="attr">display</span>: <span class="string">&quot;none&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><h3 id="可配置的属性"><a href="#可配置的属性" class="headerlink" title="可配置的属性"></a>可配置的属性</h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;motion.<span class="property">div</span></span><br><span class="line">  animate=&#123;&#123; <span class="attr">x</span>: <span class="number">100</span> &#125;&#125;</span><br><span class="line">  transition=&#123;&#123; </span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;spring&quot;</span>, </span><br><span class="line">    <span class="attr">stiffness</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="comment">// 每个子元素相同</span></span><br><span class="line">    <span class="attr">delayChildren</span>: <span class="number">0.5</span>,</span><br><span class="line">    <span class="comment">// 每个子元素延迟递增</span></span><br><span class="line">    <span class="attr">staggerChildren</span>: <span class="number">0.1</span>,</span><br><span class="line">    <span class="comment">// 从最后一个开始还是从第一个开始</span></span><br><span class="line">    <span class="attr">staggerDirection</span>: -<span class="number">1</span>,</span><br><span class="line">    <span class="comment">// 在子元素之前显示</span></span><br><span class="line">    <span class="attr">when</span>: <span class="string">&quot;beforeChildren&quot;</span>,</span><br><span class="line">    <span class="comment">//     // 在子元素之后</span></span><br><span class="line">    <span class="comment">// when: &quot;afterChildren&quot;,</span></span><br><span class="line">    <span class="comment">// 动画重复的次数</span></span><br><span class="line">    <span class="attr">repeat</span>: <span class="title class_">Infinity</span>,</span><br><span class="line">    <span class="comment">// 动画重复的模式，循环，反向，镜像</span></span><br><span class="line">    <span class="attr">repeatType</span>: <span class="string">&quot;loop&quot;</span> | <span class="string">&quot;reverse&quot;</span> | <span class="string">&quot;mirror&quot;</span></span><br><span class="line">    <span class="comment">// 重复次数</span></span><br><span class="line">    <span class="attr">repeatDelay</span>: <span class="built_in">number</span></span><br><span class="line">  &#125;&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><h3 id="Tween-补间动画，spring-弹簧，inertia-惯性，-keyframes-关键帧动画"><a href="#Tween-补间动画，spring-弹簧，inertia-惯性，-keyframes-关键帧动画" class="headerlink" title="Tween 补间动画，spring 弹簧，inertia 惯性， keyframes 关键帧动画"></a>Tween 补间动画，spring 弹簧，inertia 惯性， keyframes 关键帧动画</h3><p>具体属性查看<code>https://www.framer.com/motion/transition/</code></p><p>它还可以接受定义使用 Tween 、 Spring 或 Inertia 动画类型的 props。</p><p>源代码里有六种，不过有三种都是重复的</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">generators</span>: &#123; [<span class="attr">key</span>: <span class="built_in">string</span>]: <span class="title class_">GeneratorFactory</span> &#125; = &#123;</span><br><span class="line">    <span class="attr">decay</span>: inertia,</span><br><span class="line">    inertia,</span><br><span class="line">    <span class="attr">tween</span>: keyframesGeneratorFactory,</span><br><span class="line">    <span class="attr">keyframes</span>: keyframesGeneratorFactory,</span><br><span class="line">    spring,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="keyframes-关键帧动画"><a href="#keyframes-关键帧动画" class="headerlink" title="keyframes 关键帧动画"></a>keyframes 关键帧动画</h4><p>顾名思义，通过指定关键帧进行动画</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; motion &#125; <span class="keyword">from</span> <span class="string">&#x27;framer-motion&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">motion.div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">animate</span>=<span class="string">&#123;&#123;</span> <span class="attr">x:</span> [<span class="attr">0</span>, <span class="attr">100</span>, <span class="attr">200</span>] &#125;&#125; // <span class="attr">keyframes</span> 动画</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">transition</span>=<span class="string">&#123;&#123;</span> <span class="attr">duration:</span> <span class="attr">2</span>, <span class="attr">repeat:</span> <span class="attr">Infinity</span> &#125;&#125; // 动画时长 <span class="attr">2</span> 秒，无限循环</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">width:</span> <span class="attr">100</span>, <span class="attr">height:</span> <span class="attr">100</span>, <span class="attr">backgroundColor:</span> &#x27;<span class="attr">blue</span>&#x27; &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    /&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><h4 id="Spring-弹簧动画"><a href="#Spring-弹簧动画" class="headerlink" title="Spring 弹簧动画"></a>Spring 弹簧动画</h4><p>弹簧一样，弹来弹去的</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;motion.<span class="property">div</span></span><br><span class="line">  animate=&#123;&#123; <span class="attr">rotate</span>: <span class="number">180</span> &#125;&#125;</span><br><span class="line">  transition=&#123;&#123; <span class="attr">type</span>: <span class="string">&#x27;spring&#x27;</span> &#125;&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><ul><li>duration 动画持续时间, 以秒为单位定义, 最多可以是 10 秒</li><li>bounce 弹性，0-1,0没有弹性，1很有弹性，是Stiffness，mass和Damping的组合值，设置了duration，默认0.25</li><li>damping 阻尼，如果设置为 0，弹簧将无限振荡。默认设置为 10</li><li>mass 质量，较高的数值将导致难以运动。默认设置为 1</li><li>stiffness 刚度，设置为 0，动画将没有弹力。默认设置为 100</li><li>velocity 初始速度</li><li>restSpeed 精度速度，低于此值且增量小于 restDelta ，则结束动画。默认设置为 0.01</li><li>restDelta 精度距离，低于此值且增量小于 restSpeed ，则结束动画。默认设置为 0.01</li></ul><h4 id="Inertia-惯性动画"><a href="#Inertia-惯性动画" class="headerlink" title="Inertia 惯性动画"></a>Inertia 惯性动画</h4><p>惯性动画不会直接修改value，而是根据速度修改value，没有速度就不会改变value，所以一般要给一个初始速度</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;motion.<span class="property">div</span></span><br><span class="line">  animate=&#123;&#123; <span class="attr">rotate</span>: <span class="number">180</span> &#125;&#125;</span><br><span class="line">  transition=&#123;&#123; <span class="attr">type</span>: <span class="string">&quot;inertia&quot;</span>, <span class="attr">velocity</span>: <span class="number">50</span> &#125;&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><ul><li>velocity 速度，惯性动画最重要的属性</li><li>modifyTarget 可以自定义每一帧的返回值（返回值是value不是速度）<code>modifyTarget: target =&gt; target</code></li><li>bounceStiffness，bounceDamping 刚性和阻尼，只有限制了边界这两个参数才有用</li><li>power 会和速度相乘成为最终速度</li><li>timeConstant 动画持续时间</li><li>restDelta 低于这个值会结束动画</li><li>min,max  最小，最大速度</li></ul><h4 id="Tween-缓动动画"><a href="#Tween-缓动动画" class="headerlink" title="Tween 缓动动画"></a>Tween 缓动动画</h4><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;motion.<span class="property">path</span></span><br><span class="line">  animate=&#123;&#123; <span class="attr">pathLength</span>: <span class="number">1</span> &#125;&#125;</span><br><span class="line">  transition=&#123;&#123; <span class="attr">duration</span>: <span class="number">2</span>, <span class="attr">type</span>: <span class="string">&quot;tween&quot;</span> &#125;&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><ul><li>duration 补间动画的持续时间。默认情况下 0.3</li><li>ease 缓动函数，1.现有缓动函数的名称 2.一个由四个数字组成的数组，用于定义三次贝塞尔曲线 3.一个缓动函数，它接受并返回一个值 0-1<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;linear&quot;</span></span><br><span class="line"><span class="string">&quot;easeIn&quot;</span>, <span class="string">&quot;easeOut&quot;</span>, <span class="string">&quot;easeInOut&quot;</span></span><br><span class="line"><span class="string">&quot;circIn&quot;</span>, <span class="string">&quot;circOut&quot;</span>, <span class="string">&quot;circInOut&quot;</span></span><br><span class="line"><span class="string">&quot;backIn&quot;</span>, <span class="string">&quot;backOut&quot;</span>, <span class="string">&quot;backInOut&quot;</span></span><br><span class="line"><span class="string">&quot;anticipate&quot;</span></span><br><span class="line"><span class="attr">ease</span>: [<span class="number">0.17</span>, <span class="number">0.67</span>, <span class="number">0.83</span>, <span class="number">0.67</span>]</span><br></pre></td></tr></table></figure></li><li>from 需要处理状态的值</li><li>times 可用于确定每个关键帧在动画中的到达位置。中的 times 每个值都是介于 和 1 之间的 0 值，表示 duration<figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;motion.<span class="property">div</span></span><br><span class="line">  animate=&#123;&#123; <span class="attr">scale</span>: [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0.5</span>, <span class="number">1</span>] &#125;&#125;</span><br><span class="line">  transition=&#123;&#123; <span class="attr">times</span>: [<span class="number">0</span>, <span class="number">0.1</span>, <span class="number">0.9</span>, <span class="number">1</span>] &#125;&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="drag"><a href="#drag" class="headerlink" title="drag"></a>drag</h2><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;motion.<span class="property">div</span></span><br><span class="line">  &#123;<span class="comment">/* 可设置只能在x,y方向运动 */</span>&#125;</span><br><span class="line">  drag</span><br><span class="line">  whileDrag=&#123;&#123; <span class="attr">scale</span>: <span class="number">1.2</span> &#125;&#125;</span><br><span class="line">  &#123;<span class="comment">/* 限制移动范围 */</span>&#125;</span><br><span class="line">  dragConstraints=&#123;&#123; <span class="attr">left</span>: <span class="number">0</span>, <span class="attr">right</span>: <span class="number">0</span>, <span class="attr">top</span>: <span class="number">0</span>, <span class="attr">bottom</span>: <span class="number">0</span> &#125;&#125;</span><br><span class="line">  &#123;<span class="comment">/* 拖拽后会返回原点 */</span>&#125;</span><br><span class="line">  dragSnapToOrigin</span><br><span class="line">  &#123;<span class="comment">/* 允许外部约束的运动程度。0 = 无运动，1 = 完全运动 */</span>&#125;</span><br><span class="line">  dragElastic</span><br><span class="line">  &#123;<span class="comment">/* 拖拽，惯性，冲力 */</span>&#125;</span><br><span class="line">  dragMomentum=&#123;<span class="literal">false</span>&#125;</span><br><span class="line">  &#123;<span class="comment">/* onDragStart(event, info): void */</span>&#125;</span><br><span class="line">  &#123;<span class="comment">/* onDragEnd(event, info): void */</span>&#125;</span><br><span class="line">  dragTransition=&#123;&#123; <span class="attr">bounceStiffness</span>: <span class="number">600</span>, <span class="attr">bounceDamping</span>: <span class="number">10</span> &#125;&#125;</span><br><span class="line">  &#123;<span class="comment">/* boolean 允许传播到子组件，默认为false */</span>&#125;</span><br><span class="line">  dragPropagation</span><br><span class="line">  &#123;<span class="comment">/* 详细见下面 */</span>&#125;</span><br><span class="line">  dragControls</span><br><span class="line">  &#123;<span class="comment">/* 确定拖动方向 */</span>&#125;</span><br><span class="line">  onDirectionLock=&#123;<span class="function"><span class="params">axis</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(axis)&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><h3 id="dragConstraints可以设置一个motion元素来限制范围"><a href="#dragConstraints可以设置一个motion元素来限制范围" class="headerlink" title="dragConstraints可以设置一个motion元素来限制范围"></a>dragConstraints可以设置一个motion元素来限制范围</h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">Example</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> constraintsRef = <span class="title function_">useRef</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">motion.div</span> <span class="attr">className</span>=<span class="string">&quot;drag-area&quot;</span> <span class="attr">ref</span>=<span class="string">&#123;constraintsRef&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">motion.div</span> <span class="attr">drag</span> <span class="attr">dragConstraints</span>=<span class="string">&#123;constraintsRef&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="onPan-（自定义滚动）"><a href="#onPan-（自定义滚动）" class="headerlink" title="onPan （自定义滚动）"></a>onPan （自定义滚动）</h2><p>主要是下面这几个属性<code>point</code>, <code>delta</code>, <code>offset</code>, <code>velocity</code><br><code>point</code>是相对于设备边界的值, 对应<code>pageX</code>或者<code>x</code><br><code>offset</code> 是相对于当前前事件开始到现在的偏移<br><code>delta</code> 自上次事件以来移动的距离<br><code>velocity</code>是描述当前指针速度的，单位为px/ms</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;motion.<span class="property">div</span></span><br><span class="line">  onPan=&#123;<span class="function">(<span class="params">e, &#123; point, delta, offset, velocity &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;🚀 ~ info&#x27;</span>, point.<span class="property">x</span>, delta.<span class="property">x</span>, offset.<span class="property">x</span>, velocity.<span class="property">x</span>)</span><br><span class="line">    spring.<span class="title function_">set</span>(point.<span class="property">x</span>)</span><br><span class="line">  &#125;&#125;</span><br><span class="line">&gt;</span><br><span class="line">&lt;/motion.<span class="property">div</span>&gt;</span><br></pre></td></tr></table></figure><p><code>dragControls</code></p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dragControls = <span class="title function_">useDragControls</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">startDrag</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="comment">// snapToCursor让元素立即移动到光标位置</span></span><br><span class="line">  dragControls.<span class="title function_">start</span>(event, &#123; <span class="attr">snapToCursor</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">onPointerDown</span>=<span class="string">&#123;startDrag&#125;</span> &gt;</span></span></span><br><span class="line"><span class="language-xml">      111</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">motion.div</span> <span class="attr">drag</span>=<span class="string">&quot;x&quot;</span> <span class="attr">dragControls</span>=<span class="string">&#123;dragControls&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="重点注意的是onPan-onDrag-都是每帧都会触发"><a href="#重点注意的是onPan-onDrag-都是每帧都会触发" class="headerlink" title="重点注意的是onPan(onDrag)都是每帧都会触发"></a>重点注意的是onPan(onDrag)都是每帧都会触发</h3><p>所以，如果想要自己实现拖拽，你需要在<code>onPanStart</code>的时候保存当前偏移量，然后与<code>offset</code>相加</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> x = <span class="title function_">useMotionValue</span>(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">const</span> xRef = <span class="title function_">useRef</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">motion.div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">onPan</span>=<span class="string">&#123;(e,</span> &#123; <span class="attr">offset</span> &#125;) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">        x.set(xRef.current + offset.x)</span></span><br><span class="line"><span class="language-xml">      &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      onPanStart=&#123;() =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">        xRef.current = x.get()</span></span><br><span class="line"><span class="language-xml">      &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      style=&#123;&#123; x &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      className=&quot;w-20 h-20 bg-yellow-500&quot;</span></span><br><span class="line"><span class="language-xml">    /&gt;</span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="onPanSessionStart"><a href="#onPanSessionStart" class="headerlink" title="onPanSessionStart"></a>onPanSessionStart</h3><p>因为在原始事件中，没有onPan这类事件，所以作者虚构了一个<code>session</code>状态, 源码是使用<code>PanSession类</code></p><p>当 <code>pointerdown</code> 事件触发就会生成 <code>PanSession</code></p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">onSessionStart</span> = (<span class="params">event: PointerEvent</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; dragSnapToOrigin &#125; = <span class="variable language_">this</span>.<span class="title function_">getProps</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Stop or pause any animations on both axis values immediately. This allows the user to throw and catch</span></span><br><span class="line">    <span class="comment">// the component.</span></span><br><span class="line">    dragSnapToOrigin ? <span class="variable language_">this</span>.<span class="title function_">pauseAnimation</span>() : <span class="variable language_">this</span>.<span class="title function_">stopAnimation</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (snapToCursor) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">snapToCursor</span>(<span class="title function_">extractEventInfo</span>(event, <span class="string">&quot;page&quot;</span>).<span class="property">point</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">panSession</span> = <span class="keyword">new</span> <span class="title class_">PanSession</span>(</span><br><span class="line">    <span class="string">&#x27;pointerdown&#x27;</span>,</span><br><span class="line">    &#123;</span><br><span class="line">        onSessionStart,</span><br><span class="line">        onStart,</span><br><span class="line">        onMove,</span><br><span class="line">        onSessionEnd,</span><br><span class="line">        resumeAnimation,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">transformPagePoint</span>: <span class="variable language_">this</span>.<span class="property">visualElement</span>.<span class="title function_">getTransformPagePoint</span>(),</span><br><span class="line">        dragSnapToOrigin,</span><br><span class="line">        <span class="attr">contextWindow</span>: <span class="title function_">getContextWindow</span>(<span class="variable language_">this</span>.<span class="property">visualElement</span>),</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// PanSession的构造函数</span></span><br><span class="line"><span class="keyword">const</span> &#123; onSessionStart &#125; = handlers</span><br><span class="line">onSessionStart &amp;&amp; <span class="title function_">onSessionStart</span>(event, <span class="title function_">getPanInfo</span>(initialInfo, <span class="variable language_">this</span>.<span class="property">history</span>))</span><br></pre></td></tr></table></figure><h2 id="useScroll"><a href="#useScroll" class="headerlink" title="useScroll"></a>useScroll</h2><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Item</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> ref = <span class="title function_">useRef</span>(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">const</span> &#123; scrollYProgress &#125; = <span class="title function_">useScroll</span>(&#123;</span><br><span class="line">    <span class="attr">target</span>: ref,</span><br><span class="line">    <span class="comment">// end end等同于end</span></span><br><span class="line">    <span class="comment">// 分别定义起点和终点，end end表示目标元素的尾部和容器的尾部相交为起点</span></span><br><span class="line">    <span class="attr">offset</span>: [<span class="string">&quot;end end&quot;</span>, <span class="string">&quot;start start&quot;</span>]</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">figure</span> <span class="attr">className</span>=<span class="string">&quot;progress&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">svg</span> <span class="attr">id</span>=<span class="string">&quot;progress&quot;</span> <span class="attr">width</span>=<span class="string">&quot;75&quot;</span> <span class="attr">height</span>=<span class="string">&quot;75&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 100 100&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">&quot;50&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;50&quot;</span> <span class="attr">r</span>=<span class="string">&quot;30&quot;</span> <span class="attr">pathLength</span>=<span class="string">&quot;1&quot;</span> <span class="attr">className</span>=<span class="string">&quot;bg&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">motion.circle</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">cx</span>=<span class="string">&quot;50&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">cy</span>=<span class="string">&quot;50&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">r</span>=<span class="string">&quot;30&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">pathLength</span>=<span class="string">&quot;1&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">className</span>=<span class="string">&quot;indicator&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">pathLength:</span> <span class="attr">scrollYProgress</span> &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            /&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">figure</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="svg"><a href="#svg" class="headerlink" title="svg"></a>svg</h2><h3 id="pathLength动画"><a href="#pathLength动画" class="headerlink" title="pathLength动画"></a>pathLength动画</h3><p>svg动画中有一个技巧，通过设置<code>stroke-dasharray</code>和<code>stroke-dashoffset</code>来展现一种描边效果</p><p>在<code>motion</code>中，我们可以通过<code>pathLength</code>来快速实现这种效果</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> draw = &#123;</span><br><span class="line">  <span class="attr">hidden</span>: &#123; <span class="attr">pathLength</span>: <span class="number">0</span>, <span class="attr">opacity</span>: <span class="number">1</span>, <span class="attr">strokeDasharray</span>: <span class="number">10</span>, &#125;,</span><br><span class="line">  <span class="attr">visible</span>: <span class="function">(<span class="params">i</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> delay = <span class="number">1</span> + i * <span class="number">0.5</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">pathLength</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">opacity</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">transition</span>: &#123;</span><br><span class="line">        <span class="attr">pathLength</span>: &#123; delay, <span class="attr">type</span>: <span class="string">&quot;spring&quot;</span>, <span class="attr">duration</span>: <span class="number">150</span>, <span class="attr">bounce</span>: <span class="number">0</span> &#125;,</span><br><span class="line">        <span class="attr">opacity</span>: &#123; delay, <span class="attr">duration</span>: <span class="number">0.01</span> &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">motion.svg</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">width</span>=<span class="string">&quot;600&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">height</span>=<span class="string">&quot;600&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">viewBox</span>=<span class="string">&quot;0 0 600 600&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">initial</span>=<span class="string">&quot;hidden&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">animate</span>=<span class="string">&quot;visible&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">motion.circle</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">cx</span>=<span class="string">&quot;100&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">cy</span>=<span class="string">&quot;100&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">r</span>=<span class="string">&quot;80&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">stroke</span>=<span class="string">&quot;#ff0055&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">variants</span>=<span class="string">&#123;draw&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">custom</span>=<span class="string">&#123;1&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">motion.svg</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="具体原理是这样的"><a href="#具体原理是这样的" class="headerlink" title="具体原理是这样的"></a>具体原理是这样的</h4><p><code>pathLength</code>是指定整个svg图形的长度，比如一条直线</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;motion.<span class="property">line</span></span><br><span class="line">  x1=<span class="string">&quot;0&quot;</span></span><br><span class="line">  y1=<span class="string">&quot;0&quot;</span></span><br><span class="line">  x2=<span class="string">&quot;100&quot;</span></span><br><span class="line">  y2=<span class="string">&quot;0&quot;</span></span><br><span class="line">  stroke=<span class="string">&quot;#00cc88&quot;</span></span><br><span class="line">  variants=&#123;draw&#125;</span><br><span class="line">  custom=&#123;<span class="number">2</span>&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><p>这个图像的长度是<code>100</code>, 但是当你指定为<code>pathLength = 1</code>的时候</p><p><code>stroke-dasharray</code>属性里面的值会和实际的值做一个计算<code>1/100 = 设置的值/实际的值</code></p><p>然后<code>stroke-dasharray</code>有两个设置方法</p><ul><li>设置奇数值，比如<code>stroke-dasharray: 10</code></li><li>设置偶数值，比如<code>stroke-dasharray: 10 5</code>， 这个时候表示 实线为10，虚线为5 这样循环</li></ul><p>然后配合<code>pathLength</code>就可以实现描边动画了</p><p><code>motion</code>会去逐渐修改<code>stroke-dasharray: 0 1</code>为<code>stroke-dasharray: 1 1</code></p><p>这样设置好处就是你不需要关心图形实际的长度了</p><blockquote><p>常见的另一种实现是<code>stroke-dasharray: 实际的长度</code>，<code>stroke-offset</code>: 实际的长度，然后修改<code>stroke-offset</code>来实现动画</p></blockquote>]]></content:encoded>
      
      
      <category domain="http://zhoujunxiong.gitee.com/categories/%E6%A1%86%E6%9E%B6/">框架</category>
      
      
      <category domain="http://zhoujunxiong.gitee.com/tags/%E5%89%8D%E7%AB%AF/">前端</category>
      
      <category domain="http://zhoujunxiong.gitee.com/tags/%E6%A1%86%E6%9E%B6/">框架</category>
      
      <category domain="http://zhoujunxiong.gitee.com/tags/react/">react</category>
      
      
      <comments>http://zhoujunxiong.gitee.com/2024/03/02/%E5%89%8D%E7%AB%AF/%E6%A1%86%E6%9E%B6/framer-mition/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>浮点数原理</title>
      <link>http://zhoujunxiong.gitee.com/2024/03/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%BA%95%E5%B1%82%E5%AD%A6%E4%B9%A0/%E6%B5%AE%E7%82%B9%E6%95%B0%E5%8E%9F%E7%90%86/</link>
      <guid>http://zhoujunxiong.gitee.com/2024/03/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%BA%95%E5%B1%82%E5%AD%A6%E4%B9%A0/%E6%B5%AE%E7%82%B9%E6%95%B0%E5%8E%9F%E7%90%86/</guid>
      <pubDate>Fri, 01 Mar 2024 11:31:51 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;浮点数到底是怎么表示的&quot;&gt;&lt;a href=&quot;#浮点数到底是怎么表示的&quot; class=&quot;headerlink&quot; title=&quot;浮点数到底是怎么表示的&quot;&gt;&lt;/a&gt;浮点数到底是怎么表示的&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://baseconvert.com/i</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="浮点数到底是怎么表示的"><a href="#浮点数到底是怎么表示的" class="headerlink" title="浮点数到底是怎么表示的"></a>浮点数到底是怎么表示的</h1><p><a href="https://baseconvert.com/ieee-754-floating-point">二进制转换网址</a></p><p>下面都采用双精度浮点数，也就是64位举例</p><p>首先，浮点数分为三部分：符号位、指数部分、有效数字部分</p><p><img src= "/img/loading.svg" data-lazy-src="https://raw.githubusercontent.com/SuperBigSniper/blogImg/master/20240301105731.png" alt="20240301105731"></p><p>可以看到，符号位是1位，指数部分是11位(有正负区分，所以实际是10位)，有效数字部分是52位，总共64位</p><p>也就是说最大数表示就是<code>(2**52 - 1)*2**(2**10 - 1)</code></p><p>但是实际上，在任何语言中都是无法表示这个浮点数的，会显示<code>Infinity</code></p><p>那到底怎么回事呢</p><ol><li>小数点前面的值固定为 1，也就是说尾数部分会多出一位，是53位（这会导致无法表示零）<code>都是1.xxx的形式</code></li><li>因为零无法表示，所以规定<code>非规范化浮点数</code>表示0（当指数位全是 0，尾数部分不全为 0，尾数部分没有省略的前导 1，同时指数部分的偏移值比规范形式的偏移值小 1，即单精度是 -126，双精度是 -2046）</li><li>因为指数有正、有负，为了避免使用符号位，同时方便比较、排序，指数部分采用了 The Biased exponent（有偏指数）。IEEE754 规定，2ᵉ⁻¹-1 的值是 0，其中 e 表示指数部分的位数，小于这个值表示负数，大于这个值表示正数。因此，对于单精度浮点数而言， 2⁸⁻¹-1 = 127 是 0；双精度浮点数，2¹¹⁻¹-1 = 1023 是 0  <code>(这里就是说存的数字还需要减去1023才是表示的真实指数数据)</code></li></ol><p>所以，最大的安全数就是，指数一定是52，这个52因为偏移的原因<code>1023 + 52 = 1075</code>, 所以存为1075<br>而尾数部分，最大数就是全为二进制的一<code>111111...(52个1)</code>, 再加上固定的1也就是<code>1.111111...(53个1)</code>,然后再乘以2的52次方，也就是<code>2**53 - 1</code>也就是<code>9007199254740991</code><br>实际存储为<code>0 10000110011 1111111111111111111111111111111111111111111111111111</code></p><p>最大数同理尾数部分为<code>1.111111...(53个1)</code>，指数为<code>2**11 - 1 - 1 - 1023 = 1023</code>,为了便于理解我们用最大的数表示<br>也就是<code>9007199254740991 * 2**(1023 - 52)</code>也就是<code>9007199254740991 * 2**971</code><br>(为什么减去两个一呢，因为 标准规定 指数位全是 1，尾数位不全是 0 表示NaN)<br>(当指数位全是 1，尾数位全是 0 时，这样的浮点数表示无穷。根据符号位，有正无穷和负无穷（+infinity 和 -infinity）)<br>实际存储为<code>0 11111111110 1111111111111111111111111111111111111111111111111111</code></p><p>特殊值如下<br><img src= "/img/loading.svg" data-lazy-src="https://raw.githubusercontent.com/SuperBigSniper/blogImg/master/20240301134601.png" alt="20240301134601"></p><p><img src= "/img/loading.svg" data-lazy-src="https://raw.githubusercontent.com/SuperBigSniper/blogImg/master/20240301134449.png" alt="20240301134449"></p><p><img src= "/img/loading.svg" data-lazy-src="https://raw.githubusercontent.com/SuperBigSniper/blogImg/master/20240301134700.png" alt="20240301134700"></p><h1 id="扩展问题"><a href="#扩展问题" class="headerlink" title="扩展问题"></a>扩展问题</h1><p>为什么0.1+0.2 != 0.3呢？<br>小数转换如下(0.101)₂ = 1×2⁻¹ + 0×2⁻² +1×2⁻³ = (0.625)₁₀，<br>答案：二进制无法精确转化一些小数，因为有的二进制小数部分是无限循环的，而计算机只能存储有限位数，所以会有误差</p><p>0.3是 <code>11111111010011001100110011001100110011001100110011001100110011</code><br>0.1+0.2是 <code>11111111010011001100110011001100110011001100110011001100110100</code></p><p>为什么最大的安全数是<code>9007199254740991</code>呢？<br>答案：因为尾数只有52位，在加上首位固定位1，所以是53位，也就是2的53次方，也就是<code>2**53</code>，超出的这个值之后，都是数据左移了，会有精度丢失。而且因为首位固定位1，零是特殊值表示(非规范化浮点数，IEEE754 就可以表示 0 了，但会存在 +0 和 -0：即所有位全是 0 时是 +0；符号位是 1，其他位是 0 时是 -0)</p><p>0.1,0.2也不能精确表示，为什么结果正确呢<br>答案：因为语言默认进行了四舍五入<code>(0.2).toFixed(52)</code>结果为<code>0.2000000000000000111022302462515654042363166809082031</code>, 所以浮点数的加减法都不准确</p><h1 id="什么精度的数不会输入输出发生改变"><a href="#什么精度的数不会输入输出发生改变" class="headerlink" title="什么精度的数不会输入输出发生改变"></a>什么精度的数不会输入输出发生改变</h1><p>ieee754 有如下说法</p><blockquote><p>53 位有效数精度提供 15 到 17 个有效小数位精度 (2 −53 ≈ 1.11 × 10 −16 )。如果将最多 15 位有效数字的十进制字符串转换为 IEEE 754 双精度格式，给出一个普通数字，然后再转换回具有相同位数的十进制字符串，则最终结果应与原始字符串匹配。如果将 IEEE 754 双精度数字转换为至少有 17 位有效数字的十进制字符串，然后再转换回双精度表示形式，则最终结果必须与原始数字匹配。 [1]</p></blockquote><p>就是说</p><ol><li>字符串转化为双精度浮点数时，十进制字符串最多有15位，超过15位就不能保证转化后的结果再转回来时一样的</li><li>双精度浮点数转化为字符串时，至少有17位有效数字，否则转化后的字符串可能会丢失精度</li></ol><p>为什么会有这样的规定呢？<br>首先尾数能表示的数字，最多有 2^53 - 1,也就是 9007199254740991, 也就是16位数字，说明有一部分16位数字不能表示，<br>这种情况下，15位字符串是完全可以转化的，但是反过来，双精度数因为进行了四舍五入，就必须保证要多一位也就是17位转化的字符串才能保持一致</p><h1 id="舍入规则"><a href="#舍入规则" class="headerlink" title="舍入规则"></a>舍入规则</h1><ol><li>舍入到最接近,在一样接近的情况下偶数优先（Ties To Even）（这是默认的舍入方式）：会将结果舍入为最接近且可以表示的值,但是当存在两个数一样接近的时候，则取其中的偶数（在二进制中式以0结尾的）</li><li>向+∞方向舍入：会将结果朝正无限大的方向舍入。</li><li>向-∞方向舍入： 会将结果朝负无限大的方向舍入。</li><li>向0方向舍入： 会将结果朝0的方向舍入。</li></ol><p>如果一个 IEEE 754 的双精度浮点数被转成至少含17位有效数字的十进制数字字符串，当这个字符串转回双精度浮点数时，必须要跟原来的数相同；换句话说，如果一个双精度的浮点数转为十进制的数字时，只要它转回来的双精度浮点数不变，精度取最短的那个就行。</p><p>拿0.1来举例子，0.1和0.10000000000000001转成双精度浮点数的存储是一样的，所以取最短的0.1就行了。</p><p>我们来做个实验，以0.1为例，它在内存中的二进制表示转换为十进制的数字字符串为：0.1000000000000000055511151231257827021181583404541015625</p><p>当我们获取它的 17 位(经过舍入的)有效数为0.10000000000000001，那为什么控制台不显示0.10000000000000001而显示0.1？事实上，有许多不同的十进制数共享相同的最接近的近似二进制小数，在这个例子里，0.1、0.10000000000000001、0.1000000000000000055511151231257827021181583404541015625分别在内存中的 64bit 都是完全相同的，在大多数系统上现在能够选择这些表示中最短的来展示，也就是0.1。因此可以推断出：截断判断的依据是截断后的数在console里打印成字符串，这个字符串再转回浮点数后，是否还是同一个数。</p><p>说人话就是：在console里打印出来的，就是可以表示这个浮点数的最短的字符串！</p><p>这就解释了为啥console里有些浮点数的计算得出 17 位有效位，有些只有 16 位，有些直接显示自己本身。</p><blockquote><p>双精度有效数字是15-17位，单精度是6-9位</p></blockquote>]]></content:encoded>
      
      
      <category domain="http://zhoujunxiong.gitee.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%BA%95%E5%B1%82%E5%AD%A6%E4%B9%A0/">计算机底层学习</category>
      
      
      <category domain="http://zhoujunxiong.gitee.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%BA%95%E5%B1%82%E5%AD%A6%E4%B9%A0/">计算机底层学习</category>
      
      
      <comments>http://zhoujunxiong.gitee.com/2024/03/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%BA%95%E5%B1%82%E5%AD%A6%E4%B9%A0/%E6%B5%AE%E7%82%B9%E6%95%B0%E5%8E%9F%E7%90%86/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Typescript之配置文件</title>
      <link>http://zhoujunxiong.gitee.com/2024/02/20/%E5%89%8D%E7%AB%AF/Typescript/Typescript%E4%B9%8B%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</link>
      <guid>http://zhoujunxiong.gitee.com/2024/02/20/%E5%89%8D%E7%AB%AF/Typescript/Typescript%E4%B9%8B%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</guid>
      <pubDate>Tue, 20 Feb 2024 10:53:49 GMT</pubDate>
      
        
        
      <description>&lt;figure class=&quot;highlight ts&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l</description>
        
      
      
      
      <content:encoded><![CDATA[<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 基本选项 */</span></span><br><span class="line">    <span class="string">&quot;target&quot;</span>: <span class="string">&quot;es5&quot;</span>,                       <span class="comment">// 指定 ECMAScript 目标版本: &#x27;ES3&#x27; (default), &#x27;ES5&#x27;, &#x27;ES6&#x27;/&#x27;ES2015&#x27;, &#x27;ES2016&#x27;, &#x27;ES2017&#x27;, or &#x27;ESNEXT&#x27;</span></span><br><span class="line">    <span class="string">&quot;module&quot;</span>: <span class="string">&quot;commonjs&quot;</span>,                  <span class="comment">// 指定使用模块: &#x27;commonjs&#x27;, &#x27;amd&#x27;, &#x27;system&#x27;, &#x27;umd&#x27; or &#x27;es2015&#x27;</span></span><br><span class="line">    <span class="string">&quot;lib&quot;</span>: [],                             <span class="comment">// 指定要包含在编译中的库文件</span></span><br><span class="line">    <span class="string">&quot;allowJs&quot;</span>: <span class="literal">true</span>,                       <span class="comment">// 允许编译 javascript 文件</span></span><br><span class="line">    <span class="string">&quot;checkJs&quot;</span>: <span class="literal">true</span>,                       <span class="comment">// 报告 javascript 文件中的错误</span></span><br><span class="line">    <span class="string">&quot;jsx&quot;</span>: <span class="string">&quot;preserve&quot;</span>,                     <span class="comment">// 指定 jsx 代码的生成: &#x27;preserve&#x27;, &#x27;react-native&#x27;, or &#x27;react&#x27;</span></span><br><span class="line">    <span class="string">&quot;declaration&quot;</span>: <span class="literal">true</span>,                   <span class="comment">// 生成相应的 &#x27;.d.ts&#x27; 文件</span></span><br><span class="line">    <span class="string">&quot;sourceMap&quot;</span>: <span class="literal">true</span>,                     <span class="comment">// 生成相应的 &#x27;.map&#x27; 文件</span></span><br><span class="line">    <span class="string">&quot;outFile&quot;</span>: <span class="string">&quot;./&quot;</span>,                       <span class="comment">// 将输出文件合并为一个文件</span></span><br><span class="line">    <span class="string">&quot;outDir&quot;</span>: <span class="string">&quot;./&quot;</span>,                        <span class="comment">// 指定输出目录</span></span><br><span class="line">    <span class="string">&quot;rootDir&quot;</span>: <span class="string">&quot;./&quot;</span>,                       <span class="comment">// 用来控制输出目录结构 --outDir.</span></span><br><span class="line">    <span class="string">&quot;removeComments&quot;</span>: <span class="literal">true</span>,                <span class="comment">// 删除编译后的所有的注释</span></span><br><span class="line">    <span class="string">&quot;noEmit&quot;</span>: <span class="literal">true</span>,                        <span class="comment">// 不生成输出文件</span></span><br><span class="line">    <span class="string">&quot;importHelpers&quot;</span>: <span class="literal">true</span>,                 <span class="comment">// 从 tslib 导入辅助工具函数</span></span><br><span class="line">    <span class="string">&quot;isolatedModules&quot;</span>: <span class="literal">true</span>,               <span class="comment">// 将每个文件做为单独的模块 （与 &#x27;ts.transpileModule&#x27; 类似）.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 严格的类型检查选项 */</span></span><br><span class="line">    <span class="string">&quot;strict&quot;</span>: <span class="literal">true</span>,                        <span class="comment">// 启用所有严格类型检查选项</span></span><br><span class="line">    <span class="string">&quot;noImplicitAny&quot;</span>: <span class="literal">true</span>,                 <span class="comment">// 在表达式和声明上有隐含的 any类型时报错</span></span><br><span class="line">    <span class="string">&quot;strictNullChecks&quot;</span>: <span class="literal">true</span>,              <span class="comment">// 启用严格的 null 检查</span></span><br><span class="line">    <span class="string">&quot;noImplicitThis&quot;</span>: <span class="literal">true</span>,                <span class="comment">// 当 this 表达式值为 any 类型的时候，生成一个错误</span></span><br><span class="line">    <span class="string">&quot;alwaysStrict&quot;</span>: <span class="literal">true</span>,                  <span class="comment">// 以严格模式检查每个模块，并在每个文件里加入 &#x27;use strict&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 额外的检查 */</span></span><br><span class="line">    <span class="string">&quot;noUnusedLocals&quot;</span>: <span class="literal">true</span>,                <span class="comment">// 有未使用的变量时，抛出错误</span></span><br><span class="line">    <span class="string">&quot;noUnusedParameters&quot;</span>: <span class="literal">true</span>,            <span class="comment">// 有未使用的参数时，抛出错误</span></span><br><span class="line">    <span class="string">&quot;noImplicitReturns&quot;</span>: <span class="literal">true</span>,             <span class="comment">// 并不是所有函数里的代码都有返回值时，抛出错误</span></span><br><span class="line">    <span class="string">&quot;noFallthroughCasesInSwitch&quot;</span>: <span class="literal">true</span>,    <span class="comment">// 报告 switch 语句的 fallthrough 错误。（即，不允许 switch 的 case 语句贯穿）</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 模块解析选项 */</span></span><br><span class="line">    <span class="string">&quot;moduleResolution&quot;</span>: <span class="string">&quot;node&quot;</span>,            <span class="comment">// 选择模块解析策略： &#x27;node&#x27; (Node.js) or &#x27;classic&#x27; (TypeScript pre-1.6)</span></span><br><span class="line">    <span class="string">&quot;baseUrl&quot;</span>: <span class="string">&quot;./&quot;</span>,                       <span class="comment">// 用于解析非相对模块名称的基目录</span></span><br><span class="line">    <span class="string">&quot;paths&quot;</span>: &#123;&#125;,                           <span class="comment">// 模块名到基于 baseUrl 的路径映射的列表</span></span><br><span class="line">    <span class="string">&quot;rootDirs&quot;</span>: [],                        <span class="comment">// 根文件夹列表，其组合内容表示项目运行时的结构内容</span></span><br><span class="line">    <span class="string">&quot;typeRoots&quot;</span>: [],                       <span class="comment">// 包含类型声明的文件列表</span></span><br><span class="line">    <span class="string">&quot;types&quot;</span>: [],                           <span class="comment">// 需要包含的类型声明文件名列表</span></span><br><span class="line">    <span class="string">&quot;allowSyntheticDefaultImports&quot;</span>: <span class="literal">true</span>,  <span class="comment">// 允许从没有设置默认导出的模块中默认导入。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Source Map Options */</span></span><br><span class="line">    <span class="string">&quot;sourceRoot&quot;</span>: <span class="string">&quot;./&quot;</span>,                    <span class="comment">// 指定调试器应该找到 TypeScript 文件而不是源文件的位置</span></span><br><span class="line">    <span class="string">&quot;mapRoot&quot;</span>: <span class="string">&quot;./&quot;</span>,                       <span class="comment">// 指定调试器应该找到映射文件而不是生成文件的位置</span></span><br><span class="line">    <span class="string">&quot;inlineSourceMap&quot;</span>: <span class="literal">true</span>,               <span class="comment">// 生成单个 soucemaps 文件，而不是将 sourcemaps 生成不同的文件</span></span><br><span class="line">    <span class="string">&quot;inlineSources&quot;</span>: <span class="literal">true</span>,                 <span class="comment">// 将代码与 sourcemaps 生成到一个文件中，要求同时设置了 --inlineSourceMap 或 --sourceMap 属性</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 其他选项 */</span></span><br><span class="line">    <span class="string">&quot;experimentalDecorators&quot;</span>: <span class="literal">true</span>,        <span class="comment">// 启用装饰器</span></span><br><span class="line">    <span class="string">&quot;emitDecoratorMetadata&quot;</span>: <span class="literal">true</span>          <span class="comment">// 为装饰器提供元数据的支持</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://zhoujunxiong.gitee.com/categories/Typescript/">Typescript</category>
      
      
      <category domain="http://zhoujunxiong.gitee.com/tags/%E5%89%8D%E7%AB%AF/">前端</category>
      
      <category domain="http://zhoujunxiong.gitee.com/tags/Typescript/">Typescript</category>
      
      
      <comments>http://zhoujunxiong.gitee.com/2024/02/20/%E5%89%8D%E7%AB%AF/Typescript/Typescript%E4%B9%8B%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>cac.js</title>
      <link>http://zhoujunxiong.gitee.com/2023/11/01/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/cacjs/</link>
      <guid>http://zhoujunxiong.gitee.com/2023/11/01/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/cacjs/</guid>
      <pubDate>Wed, 01 Nov 2023 04:16:46 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;cac-js&quot;&gt;&lt;a href=&quot;#cac-js&quot; class=&quot;headerlink&quot; title=&quot;cac.js&quot;&gt;&lt;/a&gt;cac.js&lt;/h2&gt;&lt;h3 id=&quot;开始&quot;&gt;&lt;a href=&quot;#开始&quot; class=&quot;headerlink&quot; title=&quot;开始&quot;&gt;&lt;</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="cac-js"><a href="#cac-js" class="headerlink" title="cac.js"></a>cac.js</h2><h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><p>下面是一个使用 cac 创建一个简单的命令行</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cac <span class="keyword">from</span> <span class="string">&#x27;cac&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> cli = <span class="title function_">cac</span>(<span class="string">&#x27;cac&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  cli.<span class="title function_">option</span>(<span class="string">&#x27;--port [abc]&#x27;</span>, <span class="string">`[number] port to listen to`</span>)</span><br><span class="line">  cli.<span class="title function_">command</span>(<span class="string">&#x27;[...root]&#x27;</span>).<span class="title function_">action</span>(<span class="function">(<span class="params">root, options</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;🚀 ~ file: index.ts:12 ~ cli.command ~ arg:&#x27;</span>, root, options)</span><br><span class="line">  &#125;)</span><br><span class="line">  cli.<span class="title function_">help</span>()</span><br><span class="line">  cli.<span class="title function_">version</span>(<span class="string">&#x27;1.0.0&#x27;</span>)</span><br><span class="line">  cli.<span class="title function_">parse</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">main</span>()</span><br></pre></td></tr></table></figure><h3 id="option"><a href="#option" class="headerlink" title="option"></a>option</h3><h4 id="必填，非必填（option-中的-lt-gt-表示必填，-表示非必填）"><a href="#必填，非必填（option-中的-lt-gt-表示必填，-表示非必填）" class="headerlink" title="必填，非必填（option 中的 &lt;&gt; 表示必填，[] 表示非必填）"></a>必填，非必填（option 中的 <code>&lt;&gt;</code> 表示必填，<code>[]</code> 表示非必填）</h4><p>其中如果为尖括号<code>&lt;&gt;</code>，那么就是必填，如果为方括号<code>[]</code>，那么就是可选</p><p>源代码如下</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (rawName.<span class="title function_">includes</span>(<span class="string">&#x27;&lt;&#x27;</span>)) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">required</span> = <span class="literal">true</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (rawName.<span class="title function_">includes</span>(<span class="string">&#x27;[&#x27;</span>)) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">required</span> = <span class="literal">false</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// No arg needed, it&#x27;s boolean flag</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">isBoolean</span> = <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cli.<span class="title function_">option</span>(<span class="string">&#x27;--port &lt;abc&gt;&#x27;</span>, <span class="string">`[number] port to listen to`</span>, &#123;</span><br><span class="line">  <span class="attr">default</span>: <span class="number">8080</span>,</span><br><span class="line">  <span class="attr">type</span>: [],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// --port 123    port就为[123]</span></span><br></pre></td></tr></table></figure><p>源码定义如下</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">OptionConfig</span> &#123;</span><br><span class="line">  <span class="keyword">default</span>?: <span class="built_in">any</span></span><br><span class="line">  <span class="keyword">type</span>?: <span class="built_in">any</span>[]</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">option</span>(<span class="params">rawName: <span class="built_in">string</span>, description: <span class="built_in">string</span>, config?: OptionConfig</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">globalCommand</span>.<span class="title function_">option</span>(rawName, description, config)</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以我们可以这样使用</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cli.<span class="title function_">option</span>(<span class="string">&#x27;--port [abc]&#x27;</span>, <span class="string">`[number] port to listen to`</span>, &#123;</span><br><span class="line">  <span class="attr">default</span>: <span class="number">8080</span>,</span><br><span class="line">  <span class="attr">type</span>: [<span class="title class_">String</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// --port 123    port就为 [”123“]</span></span><br><span class="line"></span><br><span class="line">cli.<span class="title function_">option</span>(<span class="string">&#x27;--port [abc]&#x27;</span>, <span class="string">`[number] port to listen to`</span>, &#123;</span><br><span class="line">  <span class="attr">default</span>: <span class="number">8080</span>,</span><br><span class="line">  <span class="attr">type</span>: [],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// --port 123    port就为[123]</span></span><br></pre></td></tr></table></figure><h4 id="type"><a href="#type" class="headerlink" title="type"></a>type</h4><p><code>type</code>在源码中这样使用, 首先需要是一个数组, 只会取第一个值作为转化函数</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(cliOption.<span class="property">config</span>.<span class="property">type</span>)) &#123;</span><br><span class="line">  <span class="keyword">if</span> (transforms[cliOption.<span class="property">name</span>] === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    transforms[cliOption.<span class="property">name</span>] = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>)</span><br><span class="line">    transforms[cliOption.<span class="property">name</span>][<span class="string">&#x27;shouldTransform&#x27;</span>] = <span class="literal">true</span></span><br><span class="line">    transforms[cliOption.<span class="property">name</span>][<span class="string">&#x27;transformFunction&#x27;</span>] = cliOption.<span class="property">config</span>.<span class="property">type</span>[<span class="number">0</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后会调用一个<code>setType</code>方法, 对对应的数据进行转化, 所以 type 的每一个选项其实是数组</p><blockquote><p>空数组就表示没有转换方法，但是对应的值还是会被转为一个数组</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">setByType</span> = (<span class="params">obj: &#123; [k: <span class="built_in">string</span>]: <span class="built_in">any</span> &#125;, transforms: &#123; [k: <span class="built_in">string</span>]: <span class="built_in">any</span> &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">keys</span>(transforms)) &#123;</span><br><span class="line">    <span class="keyword">const</span> transform = transforms[key]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (transform.<span class="property">shouldTransform</span>) &#123;</span><br><span class="line">      obj[key] = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">concat</span>.<span class="title function_">call</span>([], obj[key])</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> transform.<span class="property">transformFunction</span> === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">        obj[key] = obj[key].<span class="title function_">map</span>(transform.<span class="property">transformFunction</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="no-开头，negated-配置"><a href="#no-开头，negated-配置" class="headerlink" title="no-开头，negated 配置"></a><code>no-</code>开头，negated 配置</h4><p>如果是<code>no-</code>开头，默认值为 false</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">names</span> = <span class="title function_">removeBrackets</span>(rawName)</span><br><span class="line">  .<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">  .<span class="title function_">map</span>(<span class="function">(<span class="params">v: <span class="built_in">string</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> name = v.<span class="title function_">trim</span>().<span class="title function_">replace</span>(<span class="regexp">/^-&#123;1,2&#125;/</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> (name.<span class="title function_">startsWith</span>(<span class="string">&#x27;no-&#x27;</span>)) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">negated</span> = <span class="literal">true</span></span><br><span class="line">      name = name.<span class="title function_">replace</span>(<span class="regexp">/^no-/</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">camelcaseOptionName</span>(name)</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> (a.<span class="property">length</span> &gt; b.<span class="property">length</span> ? <span class="number">1</span> : -<span class="number">1</span>)) <span class="comment">// Sort names</span></span><br></pre></td></tr></table></figure><h3 id="command"><a href="#command" class="headerlink" title="command"></a>command</h3><p>定义 command</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cli.<span class="title function_">command</span>(<span class="string">&#x27;[root]&#x27;</span>) <span class="comment">// 非必填</span></span><br><span class="line">cli.<span class="title function_">command</span>(<span class="string">&#x27;root&#x27;</span>) <span class="comment">// 必填</span></span><br></pre></td></tr></table></figure><p>构造函数如下</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">  <span class="keyword">public</span> rawName: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">  <span class="keyword">public</span> description: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">  <span class="keyword">public</span> config: CommandConfig = &#123;&#125;,</span></span><br><span class="line"><span class="params">  <span class="keyword">public</span> cli: CAC</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">options</span> = []</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">aliasNames</span> = []</span><br><span class="line">  <span class="comment">// 把命令的括号移除掉</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="title function_">removeBrackets</span>(rawName) <span class="comment">// 获取命令名称</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">args</span> = <span class="title function_">findAllBrackets</span>(rawName)</span><br><span class="line">  <span class="comment">// &#123;</span></span><br><span class="line">  <span class="comment">//   required:false</span></span><br><span class="line">  <span class="comment">//   value:&quot;root&quot;</span></span><br><span class="line">  <span class="comment">//   variadic:true</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">examples</span> = []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果为<code>...</code>开头，那么命令后面可以接多个参数组成一个数组, 这个时候<code>variadic</code>就会为 true</p><p>和<code>option</code>一样, <code>&lt;&gt;</code>为必填参数，<code>[]</code>为可选参数</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cli</span><br><span class="line">  .<span class="title function_">command</span>(<span class="string">&#x27;bar &lt;a&gt; [...rest]&#x27;</span>, <span class="string">&#x27;The bar command&#x27;</span>)</span><br><span class="line">  .<span class="title function_">action</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a, b)</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="comment">// 解析的参数就是 a [ &quot;xx&quot;, &quot;xxx&quot; ]</span></span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">parse</span> = match =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> variadic = <span class="literal">false</span></span><br><span class="line">  <span class="keyword">let</span> value = match[<span class="number">1</span>]</span><br><span class="line">  <span class="keyword">if</span> (value.<span class="title function_">startsWith</span>(<span class="string">&#x27;...&#x27;</span>)) &#123;</span><br><span class="line">    value = value.<span class="title function_">slice</span>(<span class="number">3</span>)</span><br><span class="line">    variadic = <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">required</span>: match[<span class="number">0</span>].<span class="title function_">startsWith</span>(<span class="string">&#x27;&lt;&#x27;</span>),</span><br><span class="line">    value,</span><br><span class="line">    variadic,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还可以定义对象类型的参数,自动转化为小驼峰等等其他用法</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">cli</span><br><span class="line">  .<span class="title function_">command</span>(<span class="string">&#x27;build&#x27;</span>, <span class="string">&#x27;desc&#x27;</span>)</span><br><span class="line">  .<span class="title function_">option</span>(<span class="string">&#x27;--env &lt;env&gt;&#x27;</span>, <span class="string">&#x27;Set envs&#x27;</span>)</span><br><span class="line">  <span class="comment">// 添加简写命令</span></span><br><span class="line">  .<span class="title function_">option</span>(<span class="string">&#x27;-r, --recursive&#x27;</span>, <span class="string">&#x27;Remove recursively&#x27;</span>)</span><br><span class="line">  <span class="comment">// &#123; r: xxx, recursive: xxx &#125;</span></span><br><span class="line">  .<span class="title function_">option</span>(<span class="string">&#x27;--foo-bar &lt;value&gt;&#x27;</span>, <span class="string">&#x27;Set foo bar&#x27;</span>)</span><br><span class="line">  <span class="comment">// fooBar: xxx</span></span><br><span class="line">  .<span class="title function_">example</span>(<span class="string">&#x27;--env.API_SECRET xxx&#x27;</span>)</span><br><span class="line">  <span class="comment">// env: &#123; API_SECRET: xxxx &#125;</span></span><br><span class="line">  .<span class="title function_">action</span>(<span class="function">(<span class="params">options</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(options)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h4 id="command-1"><a href="#command-1" class="headerlink" title="command"></a>command</h4><p>基本用法如下</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cli</span><br><span class="line">  .<span class="title function_">command</span>(<span class="string">&#x27;build&#x27;</span>, <span class="string">&#x27;Build project&#x27;</span>)</span><br><span class="line">  .<span class="title function_">example</span>(<span class="string">&#x27;cli build foo.js&#x27;</span>)</span><br><span class="line">  .<span class="title function_">example</span>(<span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;name&#125;</span> build foo.js`</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>同理可以定义一个必填参数，或者非必填</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cli</span><br><span class="line">  .<span class="title function_">command</span>(<span class="string">&#x27;rm &lt;dir&gt;&#x27;</span>, <span class="string">&#x27;Remove a dir&#x27;</span>)</span><br><span class="line">  .<span class="title function_">command</span>(<span class="string">&#x27;mkdir [dir]&#x27;</span>, <span class="string">&#x27;add a dir&#x27;</span>)</span><br><span class="line">  .<span class="title function_">command</span>(<span class="string">&#x27;mkdir [...dir]&#x27;</span>, <span class="string">&#x27;add a dir&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="parse-help-version"><a href="#parse-help-version" class="headerlink" title="parse, help, version"></a>parse, help, version</h4><p><code>parse</code>解析并执行对应的命令</p><p><code>help</code>,<code>version</code>是内置的添加帮助和版本的方法</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cli.<span class="title function_">help</span>()</span><br><span class="line">cli.<span class="title function_">version</span>()</span><br><span class="line">cli.<span class="title function_">parse</span>()</span><br></pre></td></tr></table></figure><h4 id="双横线”–”"><a href="#双横线”–”" class="headerlink" title="双横线”–”"></a>双横线”–”</h4><p>双横线的作用是这后面任何输入，都会作为一个原始输入</p><p><code>-- abc asd 123 666</code><br>最后解析的结果就是<code>&#123;&quot;--&quot;: [ &quot;abc&quot;, &quot;asd&quot;, &quot;123&quot;, &quot;666&quot; ]&#125;</code></p><h4 id="监听未知命令和默认命令"><a href="#监听未知命令和默认命令" class="headerlink" title="监听未知命令和默认命令"></a>监听未知命令和默认命令</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监听指定命令</span></span><br><span class="line"><span class="comment">// Listen to the `foo` command</span></span><br><span class="line">cli.<span class="title function_">on</span>(<span class="string">&#x27;command:foo&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// Do something</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听默认命令</span></span><br><span class="line"><span class="comment">// Listen to the default command</span></span><br><span class="line">cli.<span class="title function_">on</span>(<span class="string">&#x27;command:!&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// Do something</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听未知命令</span></span><br><span class="line"><span class="comment">// Listen to unknown commands</span></span><br><span class="line">cli.<span class="title function_">on</span>(<span class="string">&#x27;command:*&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Invalid command: %s&#x27;</span>, cli.<span class="property">args</span>.<span class="title function_">join</span>(<span class="string">&#x27; &#x27;</span>))</span><br><span class="line">  process.<span class="title function_">exit</span>(<span class="number">1</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://zhoujunxiong.gitee.com/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/">工具使用</category>
      
      
      <category domain="http://zhoujunxiong.gitee.com/tags/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/">工具使用</category>
      
      
      <comments>http://zhoujunxiong.gitee.com/2023/11/01/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/cacjs/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>加减乘除转化</title>
      <link>http://zhoujunxiong.gitee.com/2023/10/15/%E5%89%8D%E7%AB%AF/%E8%AE%BE%E8%AE%A1/%E5%8A%A0%E5%87%8F%E4%B9%98%E9%99%A4%E8%BD%AC%E5%8C%96/</link>
      <guid>http://zhoujunxiong.gitee.com/2023/10/15/%E5%89%8D%E7%AB%AF/%E8%AE%BE%E8%AE%A1/%E5%8A%A0%E5%87%8F%E4%B9%98%E9%99%A4%E8%BD%AC%E5%8C%96/</guid>
      <pubDate>Sun, 15 Oct 2023 10:29:20 GMT</pubDate>
      
        
        
      <description>&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l</description>
        
      
      
      
      <content:encoded><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;ExcludeTaxUnitPrice*TaxRate[0].value+ExcludeTaxUnitPrice&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getExpression</span> = (<span class="params">operation, identify</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="string">&#x27;*&#x27;</span>: <span class="string">`.mul(<span class="subst">$&#123;identify&#125;</span>)`</span>,</span><br><span class="line">    <span class="string">&#x27;-&#x27;</span>: <span class="string">`.minus(<span class="subst">$&#123;identify&#125;</span>)`</span>,</span><br><span class="line">    <span class="string">&#x27;+&#x27;</span>: <span class="string">`.add(<span class="subst">$&#123;identify&#125;</span>)`</span>,</span><br><span class="line">    <span class="string">&#x27;/&#x27;</span>: <span class="string">`.div(<span class="subst">$&#123;identify&#125;</span>)`</span>,</span><br><span class="line">  &#125;[operation]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getTransformExpression</span> = (<span class="params">expression</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> expression.<span class="title function_">split</span>(<span class="regexp">/([+\-*/])/g</span>).<span class="title function_">reduce</span>(</span><br><span class="line">    <span class="function">(<span class="params">pre, cur</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (pre.<span class="property">operation</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          <span class="attr">expression</span>: pre.<span class="property">expression</span> + <span class="title function_">getExpression</span>(pre.<span class="property">operation</span>, cur),</span><br><span class="line">          <span class="attr">operation</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> ([<span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;/&#x27;</span>].<span class="title function_">includes</span>(cur)) &#123;</span><br><span class="line">          <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">expression</span>: pre.<span class="property">expression</span>,</span><br><span class="line">            <span class="attr">operation</span>: cur,</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">expression</span>: pre.<span class="property">expression</span> + <span class="string">`Big(<span class="subst">$&#123;cur&#125;</span>)`</span>,</span><br><span class="line">            <span class="attr">operation</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">expression</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      <span class="attr">operation</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  )?.<span class="property">expression</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">  <span class="title function_">getTransformExpression</span>(str)</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://zhoujunxiong.gitee.com/categories/%E8%AE%BE%E8%AE%A1/">设计</category>
      
      
      <category domain="http://zhoujunxiong.gitee.com/tags/%E5%89%8D%E7%AB%AF/">前端</category>
      
      <category domain="http://zhoujunxiong.gitee.com/tags/%E8%AE%BE%E8%AE%A1/">设计</category>
      
      
      <comments>http://zhoujunxiong.gitee.com/2023/10/15/%E5%89%8D%E7%AB%AF/%E8%AE%BE%E8%AE%A1/%E5%8A%A0%E5%87%8F%E4%B9%98%E9%99%A4%E8%BD%AC%E5%8C%96/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>基础复习</title>
      <link>http://zhoujunxiong.gitee.com/2023/10/14/%E5%89%8D%E7%AB%AF/JS%E5%8E%9F%E7%90%86/%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0/</link>
      <guid>http://zhoujunxiong.gitee.com/2023/10/14/%E5%89%8D%E7%AB%AF/JS%E5%8E%9F%E7%90%86/%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0/</guid>
      <pubDate>Sat, 14 Oct 2023 13:54:26 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;类型转化&quot;&gt;&lt;a href=&quot;#类型转化&quot; class=&quot;headerlink&quot; title=&quot;类型转化&quot;&gt;&lt;/a&gt;类型转化&lt;/h1&gt;&lt;h2 id=&quot;所有类型-gt-数字&quot;&gt;&lt;a href=&quot;#所有类型-gt-数字&quot; class=&quot;headerlink&quot; titl</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="类型转化"><a href="#类型转化" class="headerlink" title="类型转化"></a>类型转化</h1><h2 id="所有类型-gt-数字"><a href="#所有类型-gt-数字" class="headerlink" title="所有类型==&gt;数字"></a>所有类型==&gt;数字</h2><p>通过<code>Number</code>函数进行转化</p><ul><li>true -&gt; 1</li><li>false -&gt; 0</li><li>null -&gt; 0</li><li>undefined -&gt; NaN</li><li>字符串 -&gt; 去除两端空格后转为数字(中间有空格也无法转化)，遇到包含非数字类型也为NaN</li><li>对象 -&gt; 先调用valueOf()方法，如果还是对象而非基本类型，再调用toString()方法，如果还是对象报错</li><li>Symbol 无法转换</li></ul><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="算术运算符-–"><a href="#算术运算符-–" class="headerlink" title="算术运算符 + - * / % ++ –"></a>算术运算符 + - * / % ++ –</h3><ul><li>原始类型转化为数字再进行比较</li><li>对象类型，转为原始类型，再运算</li></ul><p>特殊情况一：x+y 有一个是字符串，另一个转化为字符串，然后进行拼接<br>特殊情况二：只要有一个是NaN, 结果就为NaN</p><h3 id="比较运算符-gt-lt"><a href="#比较运算符-gt-lt" class="headerlink" title="比较运算符 == &gt;= &lt;= !="></a>比较运算符 == &gt;= &lt;= !=</h3><ul><li>如果类型相同，比较值, 具体规则如下<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Object：仅当两个操作数引用相同的对象时，才返回 true。</span><br><span class="line">String：仅当两个操作数具有相同的字符并且顺序相同，才返回 true。</span><br><span class="line">Number：仅当两个操作数具有相同的值时，才返回 true。+0 和 -0 被视为相同的值。如果任一操作数为 NaN，则返回 false；因此 NaN 永远不等于 NaN。</span><br><span class="line">Boolean：仅当操作数都是 true 或 false 时，才返回 true。</span><br><span class="line">BigInt：仅当两个操作数具有相同的值时，才返回 true。</span><br><span class="line">Symbol：仅当两个操作数引用相同的 symbol 时，才返回 true</span><br></pre></td></tr></table></figure></li><li>如果两边都是原始类型，转化为数字进行比较</li><li>一边是原始，一边是对象，先转化为原始类型，再进行比较</li><li>undefined和null和所有类型都不相等，除非是自己或者相互比较</li><li>有NaN一定为false</li></ul><h2 id="你掌握了吗"><a href="#你掌握了吗" class="headerlink" title="你掌握了吗"></a>你掌握了吗</h2><p><code>([][[]] + [])[+!![]] + ([]+&#123;&#125;)[+!![] + +!![]]</code></p><p>等于<br><code>([][&#39;&#39;] + [])[+true] + (&#39;&#39;+&#39;[object Object]&#39;)[+true + +true];</code></p><p><code>(&#39;undefined&#39; + &#39;&#39;)[1] + &#39;[object Object]&#39;[2]</code></p><p><code>&#39;nb&#39;</code></p>]]></content:encoded>
      
      
      <category domain="http://zhoujunxiong.gitee.com/categories/JS%E5%8E%9F%E7%90%86/">JS原理</category>
      
      
      <category domain="http://zhoujunxiong.gitee.com/tags/%E5%89%8D%E7%AB%AF/">前端</category>
      
      <category domain="http://zhoujunxiong.gitee.com/tags/JS%E5%8E%9F%E7%90%86/">JS原理</category>
      
      
      <comments>http://zhoujunxiong.gitee.com/2023/10/14/%E5%89%8D%E7%AB%AF/JS%E5%8E%9F%E7%90%86/%E5%9F%BA%E7%A1%80%E5%A4%8D%E4%B9%A0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Typescript之新装饰器</title>
      <link>http://zhoujunxiong.gitee.com/2023/05/11/%E5%89%8D%E7%AB%AF/Typescript/Typescript%E4%B9%8B%E6%96%B0%E8%A3%85%E9%A5%B0%E5%99%A8/</link>
      <guid>http://zhoujunxiong.gitee.com/2023/05/11/%E5%89%8D%E7%AB%AF/Typescript/Typescript%E4%B9%8B%E6%96%B0%E8%A3%85%E9%A5%B0%E5%99%A8/</guid>
      <pubDate>Thu, 11 May 2023 13:12:32 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;Typescript5.0带来了全新的装饰器&lt;/p&gt;
&lt;h2 id=&quot;语法&quot;&gt;&lt;a href=&quot;#语法&quot; class=&quot;headerlink&quot; title=&quot;语法&quot;&gt;&lt;/a&gt;语法&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;value：所要装饰的值，某些情况下可能是undefined（装饰属</description>
        
      
      
      
      <content:encoded><![CDATA[<p>Typescript5.0带来了全新的装饰器</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><ul><li>value：所要装饰的值，某些情况下可能是undefined（装饰属性时）。</li><li>context：上下文信息对象。</li></ul><p>之前的第二个及以后得参数合并为一个<code>context</code>了</p><p>context对象有很多属性，其中kind属性表示属于哪一种装饰，其他属性的含义如下。</p><ul><li>kind：字符串，表示装饰类型，可能的取值有class、method、getter、setter、field、accessor。</li><li>name：被装饰的值的名称: The name of the value, or in the case of private elements the description of it (e.g. the readable name).</li><li>access：对象，包含访问这个值的方法，即存值器和取值器。</li><li>static: 布尔值，该值是否为静态元素。</li><li>private：布尔值，该值是否为私有元素。</li><li>addInitializer：函数，允许用户增加初始化逻辑。</li></ul><h3 id="装饰器的执行步骤如下。"><a href="#装饰器的执行步骤如下。" class="headerlink" title="装饰器的执行步骤如下。"></a>装饰器的执行步骤如下。</h3><ol><li>计算各个装饰器的值，按照从左到右，从上到下的顺序。</li><li>调用方法装饰器。</li><li>调用类装饰器。</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Decorator</span> = <span class="function">(<span class="params">value: Input, context: &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">  kind: <span class="built_in">string</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">  name: <span class="built_in">string</span> | <span class="built_in">symbol</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">  access: &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">    get?(): <span class="built_in">unknown</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">    set?(value: <span class="built_in">unknown</span>): <span class="built_in">void</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">  &#125;;</span></span></span><br><span class="line"><span class="params"><span class="function">  <span class="keyword">private</span>?: <span class="built_in">boolean</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">  <span class="keyword">static</span>?: <span class="built_in">boolean</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">  addInitializer?(initializer: () =&gt; <span class="built_in">void</span>): <span class="built_in">void</span>;</span></span></span><br><span class="line"><span class="params"><span class="function">&#125;</span>) =&gt;</span> <span class="title class_">Output</span> | <span class="built_in">void</span>;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@frozen</span> <span class="keyword">class</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">  <span class="meta">@configurable</span>(<span class="literal">false</span>)</span><br><span class="line">  <span class="meta">@enumerable</span>(<span class="literal">true</span>)</span><br><span class="line">  <span class="title function_">method</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@throttle</span>(<span class="number">500</span>)</span><br><span class="line">  <span class="title function_">expensiveMethod</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="新装饰器"><a href="#新装饰器" class="headerlink" title="新装饰器"></a>新装饰器</h4><p>从官方发布的更新日志来看，在 TypeScript 5.0 中支持的新的装饰器写法并不与老的装饰器写法兼容。主要体现在下面两个方面：</p><p>支持装饰的实体不同：</p><ul><li>stage1 只支持装饰类、类属性、类方法</li><li>stage3 额外支持装饰类的 getter、setter、accessor</li></ul><p>装饰器可以取到的参数不同：</p><ul><li>stage1 主要是可以取到 descriptor 参数，它可以传递给 Object.defineProperty</li><li>stage3 可以取到一个自定义的 context，其中包括值本身的一些附加信息，以及具有元编程能力的小型 API (access、addInitializer)。</li></ul><p>返回值不同</p><ul><li>stage1 返回的是传递给 Object.defineProperty 的 descriptor</li><li>stage3 返回的是被装饰的实体本身</li></ul><p><code>context.access.get</code>可以调用对应元素的get方法来获取元素，例如</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">logged</span>(<span class="params">value: <span class="built_in">any</span>, context: DecoratorContext</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (context.<span class="property">name</span> === <span class="string">&#x27;name&#x27;</span> &amp;&amp; context.<span class="property">kind</span> === <span class="string">&#x27;field&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">111</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(context.<span class="property">access</span>.<span class="title function_">get</span>(&#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;12312&#x27;</span></span><br><span class="line">    &#125;));</span><br><span class="line">    <span class="comment">// 这样就可以获取元素name的值`12312`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">logged</span>(<span class="params">value: <span class="built_in">any</span>, context: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;value&#x27;</span>, <span class="keyword">typeof</span> value)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;context&#x27;</span>, context)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@logged</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="meta">@logged</span></span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span> = <span class="string">&#x27;hello name&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// accessor会自动生成get，set方法，并设置age为私有属性</span></span><br><span class="line">  <span class="meta">@logged</span></span><br><span class="line">  accessor <span class="attr">age</span>: <span class="built_in">number</span> = <span class="number">12</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@logged</span></span><br><span class="line">  <span class="title function_">hello</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`Hi <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>!`</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@logged</span></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">x</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@logged</span></span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">x</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">x</span> = val</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> robin = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Robin&#x27;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// accessor</span></span><br><span class="line">[<span class="variable constant_">LOG</span>]: <span class="string">&quot;value&quot;</span>,  <span class="string">&quot;object&quot;</span> </span><br><span class="line">[<span class="variable constant_">LOG</span>]: <span class="string">&quot;context&quot;</span>,  &#123;</span><br><span class="line">  <span class="string">&quot;kind&quot;</span>: <span class="string">&quot;accessor&quot;</span>,</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;age&quot;</span>,</span><br><span class="line">  <span class="string">&quot;static&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">&quot;private&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">&quot;access&quot;</span>: &#123;&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 方法</span></span><br><span class="line">[<span class="variable constant_">LOG</span>]: <span class="string">&quot;value&quot;</span>,  <span class="string">&quot;function&quot;</span> </span><br><span class="line">[<span class="variable constant_">LOG</span>]: <span class="string">&quot;context&quot;</span>,  &#123;</span><br><span class="line">  <span class="string">&quot;kind&quot;</span>: <span class="string">&quot;method&quot;</span>,</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;hello&quot;</span>,</span><br><span class="line">  <span class="string">&quot;static&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">&quot;private&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">&quot;access&quot;</span>: &#123;&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// getter</span></span><br><span class="line">[<span class="variable constant_">LOG</span>]: <span class="string">&quot;value&quot;</span>,  <span class="string">&quot;function&quot;</span> </span><br><span class="line">[<span class="variable constant_">LOG</span>]: <span class="string">&quot;context&quot;</span>,  &#123;</span><br><span class="line">  <span class="string">&quot;kind&quot;</span>: <span class="string">&quot;getter&quot;</span>,</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;x&quot;</span>,</span><br><span class="line">  <span class="string">&quot;static&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">&quot;private&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">&quot;access&quot;</span>: &#123;&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// setter</span></span><br><span class="line">[<span class="variable constant_">LOG</span>]: <span class="string">&quot;value&quot;</span>,  <span class="string">&quot;function&quot;</span> </span><br><span class="line">[<span class="variable constant_">LOG</span>]: <span class="string">&quot;context&quot;</span>,  &#123;</span><br><span class="line">  <span class="string">&quot;kind&quot;</span>: <span class="string">&quot;setter&quot;</span>,</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;x&quot;</span>,</span><br><span class="line">  <span class="string">&quot;static&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">&quot;private&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">&quot;access&quot;</span>: &#123;&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 字段field</span></span><br><span class="line">[<span class="variable constant_">LOG</span>]: <span class="string">&quot;value&quot;</span>,  <span class="string">&quot;undefined&quot;</span> </span><br><span class="line">[<span class="variable constant_">LOG</span>]: <span class="string">&quot;context&quot;</span>,  &#123;</span><br><span class="line">  <span class="string">&quot;kind&quot;</span>: <span class="string">&quot;field&quot;</span>,</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;name&quot;</span>,</span><br><span class="line">  <span class="string">&quot;static&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">&quot;private&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">&quot;access&quot;</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 类class</span></span><br><span class="line">[<span class="variable constant_">LOG</span>]: <span class="string">&quot;value&quot;</span>,  <span class="string">&quot;function&quot;</span> </span><br><span class="line">[<span class="variable constant_">LOG</span>]: <span class="string">&quot;context&quot;</span>,  &#123;</span><br><span class="line">  <span class="string">&quot;kind&quot;</span>: <span class="string">&quot;class&quot;</span>,</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Person&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://zhoujunxiong.gitee.com/categories/Typescript/">Typescript</category>
      
      
      <category domain="http://zhoujunxiong.gitee.com/tags/%E5%89%8D%E7%AB%AF/">前端</category>
      
      <category domain="http://zhoujunxiong.gitee.com/tags/Typescript/">Typescript</category>
      
      
      <comments>http://zhoujunxiong.gitee.com/2023/05/11/%E5%89%8D%E7%AB%AF/Typescript/Typescript%E4%B9%8B%E6%96%B0%E8%A3%85%E9%A5%B0%E5%99%A8/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Typescript之可变元组</title>
      <link>http://zhoujunxiong.gitee.com/2023/01/01/%E5%89%8D%E7%AB%AF/Typescript/Typescript%E4%B9%8B%E5%8F%AF%E5%8F%98%E5%85%83%E7%BB%84/</link>
      <guid>http://zhoujunxiong.gitee.com/2023/01/01/%E5%89%8D%E7%AB%AF/Typescript/Typescript%E4%B9%8B%E5%8F%AF%E5%8F%98%E5%85%83%E7%BB%84/</guid>
      <pubDate>Sun, 01 Jan 2023 13:53:49 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;Variadic-Tuple-Types-可变参数元组类型&quot;&gt;&lt;a href=&quot;#Variadic-Tuple-Types-可变参数元组类型&quot; class=&quot;headerlink&quot; title=&quot;Variadic Tuple Types(可变参数元组类型)&quot;&gt;&lt;/</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="Variadic-Tuple-Types-可变参数元组类型"><a href="#Variadic-Tuple-Types-可变参数元组类型" class="headerlink" title="Variadic Tuple Types(可变参数元组类型)"></a>Variadic Tuple Types(可变参数元组类型)</h1><p>考虑JavaScript中一个名为0的函数，它接受两个数组或元组类型，并将它们连接在一起以创建一个新数组。</p><p>还要考虑 tail ，它接受数组或元组，并返回除第一个元素之外的所有元素。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">concat</span>(<span class="params">arr1, arr2</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> [...arr1, ...arr2];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">tail</span>(<span class="params">arg</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [_, ...result] = arg;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上两种情况如何满足ts类型</p><h3 id="通过可变元组，可以解构数组实现"><a href="#通过可变元组，可以解构数组实现" class="headerlink" title="通过可变元组，可以解构数组实现"></a>通过可变元组，可以解构数组实现</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> tail&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[]&gt;(<span class="attr">arr</span>: <span class="keyword">readonly</span> [<span class="built_in">any</span>, ...T]) &#123;</span><br><span class="line">  <span class="keyword">const</span> [_ignored, ...rest] = arr;</span><br><span class="line">  <span class="keyword">return</span> rest;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> myTuple = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>] <span class="keyword">as</span> <span class="keyword">const</span>;</span><br><span class="line"><span class="keyword">const</span> myArray = [<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> r1 = <span class="title function_">tail</span>(myTuple);</span><br><span class="line">      </span><br><span class="line"><span class="keyword">const</span> <span class="attr">r1</span>: [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> r2 = <span class="title function_">tail</span>([...myTuple, ...myArray] <span class="keyword">as</span> <span class="keyword">const</span>);</span><br></pre></td></tr></table></figure><h3 id="第二个变化是-rest-元素可以出现在元组中的任何位置-而不仅仅是在末尾！"><a href="#第二个变化是-rest-元素可以出现在元组中的任何位置-而不仅仅是在末尾！" class="headerlink" title="第二个变化是 rest 元素可以出现在元组中的任何位置 - 而不仅仅是在末尾！"></a>第二个变化是 rest 元素可以出现在元组中的任何位置 - 而不仅仅是在末尾！</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Strings</span> = [<span class="built_in">string</span>, <span class="built_in">string</span>];</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Numbers</span> = [<span class="built_in">number</span>, <span class="built_in">number</span>];</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">StrStrNumNumBool</span> = [...<span class="title class_">Strings</span>, ...<span class="title class_">Numbers</span>, <span class="built_in">boolean</span>];</span><br></pre></td></tr></table></figure><h3 id="结合上面两种特性"><a href="#结合上面两种特性" class="headerlink" title="结合上面两种特性"></a>结合上面两种特性</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Arr</span> = <span class="keyword">readonly</span> <span class="built_in">any</span>[];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> concat&lt;T <span class="keyword">extends</span> <span class="title class_">Arr</span>, U <span class="keyword">extends</span> <span class="title class_">Arr</span>&gt;(<span class="attr">arr1</span>: T, <span class="attr">arr2</span>: U): [...T, ...U] &#123;</span><br><span class="line">  <span class="keyword">return</span> [...arr1, ...arr2];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Labeled-Tuple-Elements-标记元组元素"><a href="#Labeled-Tuple-Elements-标记元组元素" class="headerlink" title="Labeled Tuple Elements 标记元组元素"></a>Labeled Tuple Elements 标记元组元素</h1><p>这就是为什么在 TypeScript 4.0 中，元组类型现在可以提供标签。</p><blockquote><p>标签不需要我们在解构时以不同的方式命名变量。它们纯粹是为了文档和工具而存在的</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Range</span> = [<span class="attr">start</span>: <span class="built_in">number</span>, <span class="attr">end</span>: <span class="built_in">number</span>];</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://zhoujunxiong.gitee.com/categories/Typescript/">Typescript</category>
      
      
      <category domain="http://zhoujunxiong.gitee.com/tags/%E5%89%8D%E7%AB%AF/">前端</category>
      
      <category domain="http://zhoujunxiong.gitee.com/tags/Typescript/">Typescript</category>
      
      
      <comments>http://zhoujunxiong.gitee.com/2023/01/01/%E5%89%8D%E7%AB%AF/Typescript/Typescript%E4%B9%8B%E5%8F%AF%E5%8F%98%E5%85%83%E7%BB%84/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>go之time</title>
      <link>http://zhoujunxiong.gitee.com/2022/12/30/GO/go%E4%B9%8Btime/</link>
      <guid>http://zhoujunxiong.gitee.com/2022/12/30/GO/go%E4%B9%8Btime/</guid>
      <pubDate>Thu, 29 Dec 2022 16:41:26 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;时间和日期&quot;&gt;&lt;a href=&quot;#时间和日期&quot; class=&quot;headerlink&quot; title=&quot;时间和日期&quot;&gt;&lt;/a&gt;时间和日期&lt;/h1&gt;&lt;p&gt;time 包为我们提供了一个数据类型 time.Time（作为值使用）以及显示和测量时间和日期的功能函数。&lt;/p&gt;
</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="时间和日期"><a href="#时间和日期" class="headerlink" title="时间和日期"></a>时间和日期</h1><p>time 包为我们提供了一个数据类型 time.Time（作为值使用）以及显示和测量时间和日期的功能函数。</p><p>当前时间可以使用 <code>time.Now()</code> 获取，或者使用 <code>t.Day()</code>、<code>t.Minute()</code> 等等来获取时间的一部分；你甚至可以自定义时间格式化字符串，例如： <code>fmt.Printf(&quot;%02d.%02d.%4d\n&quot;, t.Day(), t.Month(), t.Year())</code> 将会输出 <code>21.07.2011</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> week time.Duration</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">t := time.Now()</span><br><span class="line">fmt.Println(t) <span class="comment">// e.g. Wed Dec 21 09:52:14 +0100 RST 2011</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%02d.%02d.%4d\n&quot;</span>, t.Day(), t.Month(), t.Year())</span><br><span class="line"><span class="comment">// 21.12.2011</span></span><br><span class="line">t = time.Now().UTC()</span><br><span class="line">fmt.Println(t) <span class="comment">// Wed Dec 21 08:52:14 +0000 UTC 2011</span></span><br><span class="line">fmt.Println(time.Now()) <span class="comment">// Wed Dec 21 09:52:14 +0100 RST 2011</span></span><br><span class="line"><span class="comment">// calculating times:</span></span><br><span class="line">week = <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">7</span> * <span class="number">1e9</span> <span class="comment">// must be in nanosec</span></span><br><span class="line">week_from_now := t.Add(time.Duration(week))</span><br><span class="line">fmt.Println(week_from_now) <span class="comment">// Wed Dec 28 08:52:14 +0000 UTC 2011</span></span><br><span class="line"><span class="comment">// formatting times:</span></span><br><span class="line">fmt.Println(t.Format(time.RFC822)) <span class="comment">// 21 Dec 11 0852 UTC</span></span><br><span class="line">fmt.Println(t.Format(time.ANSIC)) <span class="comment">// Wed Dec 21 08:56:34 2011</span></span><br><span class="line"><span class="comment">// The time must be 2006-01-02 15:04:05</span></span><br><span class="line">fmt.Println(t.Format(<span class="string">&quot;02 Jan 2006 15:04&quot;</span>)) <span class="comment">// 21 Dec 2011 08:52</span></span><br><span class="line">s := t.Format(<span class="string">&quot;20060102&quot;</span>)</span><br><span class="line">fmt.Println(t, <span class="string">&quot;=&gt;&quot;</span>, s)</span><br><span class="line"><span class="comment">// Wed Dec 21 08:52:14 +0000 UTC 2011 =&gt; 20111221</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://zhoujunxiong.gitee.com/categories/Go/">Go</category>
      
      
      <category domain="http://zhoujunxiong.gitee.com/tags/Go/">Go</category>
      
      
      <comments>http://zhoujunxiong.gitee.com/2022/12/30/GO/go%E4%B9%8Btime/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>githubAction</title>
      <link>http://zhoujunxiong.gitee.com/2022/09/04/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/githubAction/</link>
      <guid>http://zhoujunxiong.gitee.com/2022/09/04/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/githubAction/</guid>
      <pubDate>Sun, 04 Sep 2022 04:16:46 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;进入action设置界面&quot;&gt;&lt;a href=&quot;#进入action设置界面&quot; class=&quot;headerlink&quot; title=&quot;进入action设置界面&quot;&gt;&lt;/a&gt;进入action设置界面&lt;/h1&gt;&lt;p&gt;在这里可以配置自己的github action工作流&lt;br&gt;</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="进入action设置界面"><a href="#进入action设置界面" class="headerlink" title="进入action设置界面"></a>进入action设置界面</h1><p>在这里可以配置自己的github action工作流<br><img src= "/img/loading.svg" data-lazy-src="https://raw.githubusercontent.com/SuperBigSniper/blogImg/master/20220904100111.png" alt="20220904100111"></p><p>进来之后，会有一个默认模板<br><img src= "/img/loading.svg" data-lazy-src="https://raw.githubusercontent.com/SuperBigSniper/blogImg/master/20220904100139.png" alt="20220904100139"></p><p>之后可以看到在<code>.github/workflows</code>目录下有一个配置文件<br><img src= "/img/loading.svg" data-lazy-src="https://raw.githubusercontent.com/SuperBigSniper/blogImg/master/20220904100315.png" alt="20220904100315"></p><p><a href="https://docs.github.com/cn/actions">官方文档</a></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This is a basic workflow to help you get started with Actions</span></span><br><span class="line"><span class="comment"># 当前工作流的名称</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">CI</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Controls when the workflow will run</span></span><br><span class="line"><span class="comment"># 控制workflow什么时候运行</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="comment"># Triggers the workflow on push or pull request events but only for the &quot;main&quot; branch</span></span><br><span class="line">  <span class="comment"># 当你对main分支进行pull或者push时，就会触发</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span> [ <span class="string">&quot;main&quot;</span> ]</span><br><span class="line">  <span class="attr">pull_request:</span></span><br><span class="line">    <span class="attr">branches:</span> [ <span class="string">&quot;main&quot;</span> ]</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Allows you to run this workflow manually from the Actions tab</span></span><br><span class="line">  <span class="comment"># 允许你再actions页面手动运行</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># A workflow run is made up of one or more jobs that can run sequentially or in parallel</span></span><br><span class="line"><span class="comment"># 工作流需要执行的任务（可以并行或者串行）</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="comment"># This workflow contains a single job called &quot;build&quot;</span></span><br><span class="line">  <span class="comment"># 建立单个任务，名叫build</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="comment"># The type of runner that the job will run on</span></span><br><span class="line">    <span class="comment"># 运行在什么系统</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Steps represent a sequence of tasks that will be executed as part of the job</span></span><br><span class="line">    <span class="comment"># 需要执行的步骤</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="comment"># Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it</span></span><br><span class="line">      <span class="comment"># 切换到自己的仓库（属于固定用法）</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">echo</span> <span class="string">开始执行流程</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 下面就是运行的命令啦</span></span><br><span class="line">      <span class="comment"># Runs a single command using the runners shell</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">a</span> <span class="string">one-line</span> <span class="string">script</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">echo</span> <span class="string">Hello,</span> <span class="string">world!</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># Runs a set of commands using the runners shell</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">a</span> <span class="string">multi-line</span> <span class="string">script</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          echo Add other actions to build,</span></span><br><span class="line"><span class="string">          echo test, and deploy your project.</span></span><br></pre></td></tr></table></figure><p>在这个界面可以看到所有执行的action<br><img src= "/img/loading.svg" data-lazy-src="https://raw.githubusercontent.com/SuperBigSniper/blogImg/master/20220904101440.png" alt="20220904101440"></p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br></pre></td></tr></table></figure><p>uses 关键字指定此步骤将运行 actions/checkout 操作的 v3。 这是一个将存储库签出到运行器上的操作，允许您对代码（如生成和测试工具）运行脚本或其他操作。 每当工作流程将针对存储库的代码运行时，都应使用签出操作。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/setup-node@v3</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">node-version:</span> <span class="string">&#x27;14&#x27;</span></span><br></pre></td></tr></table></figure><p>此步骤使用 actions/setup-node@v3 操作来安装指定版本的 Node.js（此示例使用 v14）。 这会将 node 和 npm 命令放在 PATH中。</p>]]></content:encoded>
      
      
      <category domain="http://zhoujunxiong.gitee.com/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/">工具使用</category>
      
      
      <category domain="http://zhoujunxiong.gitee.com/tags/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/">工具使用</category>
      
      
      <comments>http://zhoujunxiong.gitee.com/2022/09/04/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/githubAction/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>vue3文档</title>
      <link>http://zhoujunxiong.gitee.com/2022/08/27/%E5%89%8D%E7%AB%AF/%E6%A1%86%E6%9E%B6/VUE/vue3%E6%96%87%E6%A1%A3/</link>
      <guid>http://zhoujunxiong.gitee.com/2022/08/27/%E5%89%8D%E7%AB%AF/%E6%A1%86%E6%9E%B6/VUE/vue3%E6%96%87%E6%A1%A3/</guid>
      <pubDate>Sat, 27 Aug 2022 00:27:55 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;虽然之前有在用&lt;code&gt;vue3&lt;/code&gt;但是一直没有细细读一遍官方文档~~~，今天记录一下&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;</description>
        
      
      
      
      <content:encoded><![CDATA[<p>虽然之前有在用<code>vue3</code>但是一直没有细细读一遍官方文档~~~，今天记录一下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">createApp</span>(&#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;count++&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    Count is: &#123;&#123; count &#125;&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>哈哈哈，这个真的很贴心了，对新手友好<br><img src= "/img/loading.svg" data-lazy-src="https://raw.githubusercontent.com/SuperBigSniper/blogImg/master/20220826111952.png" alt="20220826111952"></p><p>学到了一个<code>import map</code>功能<code>https://caniuse.com/import-maps</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;importmap&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&quot;imports&quot;</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="string">&quot;vue&quot;</span>: <span class="string">&quot;https://unpkg.com/vue@3/dist/vue.esm-browser.js&quot;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">message</span>: <span class="string">&#x27;Hello Vue!&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="创建vueapp的方式改变了"><a href="#创建vueapp的方式改变了" class="headerlink" title="创建vueapp的方式改变了"></a>创建<code>vue</code>app的方式改变了</h1><p>通过<code>createApp</code>去进行创建，而不是通过<code>new Vue</code>, 防止用户去修改<code>Vue</code>全局实例而互相影响，并且注册全局组件也是相互隔离</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app1 = <span class="title function_">createApp</span>(&#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;)</span><br><span class="line">app1.<span class="title function_">mount</span>(<span class="string">&#x27;#container-1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app2 = <span class="title function_">createApp</span>(&#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;)</span><br><span class="line">app2.<span class="title function_">mount</span>(<span class="string">&#x27;#container-2&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="组合式api"><a href="#组合式api" class="headerlink" title="组合式api"></a>组合式api</h1><p>react的同学很熟悉了，不过vue的组合式api基于响应式系统，解决了一些痛点</p><ul><li>Hooks 有严格的调用顺序，并不可以写在条件分支中</li><li>（需要手动传递依赖）React 组件中定义的变量会被一个钩子函数闭包捕获，若开发者传递了错误的依赖数组，它会变得“过期”</li><li>useMemo等优化方法也需要传入依赖数组</li><li>useCallback同上</li><li>有些变量在多次渲染会改变(可以使用useRef优化)</li></ul><p>使用的方法一</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// `setup` 是一个专门用于组合式 API 的特殊钩子函数</span></span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> state = <span class="title function_">reactive</span>(&#123; <span class="attr">count</span>: <span class="number">0</span> &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 暴露 state 到模板</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      state</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用的方法二(setup语法题)，声明的方法会被自动导出</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> state = <span class="title function_">reactive</span>(&#123; <span class="attr">count</span>: <span class="number">0</span> &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  state.<span class="property">count</span>++</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increment&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; state.count &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="模板中的表达式会被沙盒化，可配置可访问的全局对象"><a href="#模板中的表达式会被沙盒化，可配置可访问的全局对象" class="headerlink" title="模板中的表达式会被沙盒化，可配置可访问的全局对象"></a>模板中的表达式会被沙盒化，可配置可访问的全局对象</h1><p>模板中的表达式将被沙盒化，仅能够访问到有限的全局对象列表。该列表中会暴露常用的内置全局对象，比如 Math 和 Date。</p><p>没有显式包含在列表中的全局对象将不能在模板内表达式中访问，例如用户附加在 window 上的属性。然而，你也可以自行在 app.config.globalProperties</p><h1 id="reactive-ref-toRefs"><a href="#reactive-ref-toRefs" class="headerlink" title="reactive, ref, toRefs"></a>reactive, ref, toRefs</h1><p>下面两种情况都会失去响应，需要使用<code>toRefs</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> state = <span class="title function_">reactive</span>(&#123; <span class="attr">count</span>: <span class="number">0</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// n 是一个局部变量，同 state.count</span></span><br><span class="line"><span class="comment">// 失去响应性连接</span></span><br><span class="line"><span class="keyword">let</span> n = state.<span class="property">count</span></span><br><span class="line"><span class="comment">// 不影响原始的 state</span></span><br><span class="line">n++</span><br><span class="line"></span><br><span class="line"><span class="comment">// count 也和 state.count 失去了响应性连接</span></span><br><span class="line"><span class="keyword">let</span> &#123; count &#125; = state</span><br><span class="line"><span class="comment">// 不会影响原始的 state</span></span><br><span class="line">count++</span><br></pre></td></tr></table></figure><h1 id="v-if-比-v-for-的优先级更高"><a href="#v-if-比-v-for-的优先级更高" class="headerlink" title="v-if 比 v-for 的优先级更高"></a>v-if 比 v-for 的优先级更高</h1><p>v-if 的条件将无法访问到 v-for 作用域内定义的变量别名</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"> 这会抛出一个错误，因为属性 todo 此时</span></span><br><span class="line"><span class="comment"> 没有在该实例上定义</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;todo in todos&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;!todo.isComplete&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123; todo.name &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="数组直接按照索引修改元素也可以响应了"><a href="#数组直接按照索引修改元素也可以响应了" class="headerlink" title="数组直接按照索引修改元素也可以响应了"></a>数组直接按照索引修改元素也可以响应了</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">todos.<span class="property">value</span>[<span class="number">0</span>].<span class="property">title</span> = newTodoText.<span class="property">value</span></span><br></pre></td></tr></table></figure><h1 id="watchEffect与watch"><a href="#watchEffect与watch" class="headerlink" title="watchEffect与watch"></a>watchEffect与watch</h1><p>watchEffect可以立即执行，watch需要等待数据源改变之后执行</p><p>watch（需要手动声明依赖） 只追踪明确侦听的数据源。它不会追踪任何在回调中访问到的东西。另外，仅在数据源确实改变时才会触发回调</p><p>watchEffect（自动收集依赖），则会在副作用发生期间追踪依赖。它会在同步执行过程中，自动追踪所有能访问到的响应式属性</p><blockquote><p>注意<br>默认情况下，用户创建的侦听器回调，都会在 Vue 组件更新之前被调用。这意味着你在侦听器回调中访问的 DOM 将是被 Vue 更新之前的状态。</p></blockquote><p>如果想在侦听器回调中能访问被 Vue 更新之后的DOM，你需要指明 flush: ‘post’ 选项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">watch</span>(source, callback, &#123;</span><br><span class="line">  <span class="attr">flush</span>: <span class="string">&#x27;post&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">watchEffect</span>(callback, &#123;</span><br><span class="line">  <span class="attr">flush</span>: <span class="string">&#x27;post&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; watchPostEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">watchPostEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">/* 在 Vue 更新后执行 */</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>注意2</p></blockquote><p>侦听器必须用同步语句创建：如果用异步回调创建一个侦听器，那么它不会绑定到当前组件上，你必须手动停止它，以防内存泄漏</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; watchEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 它会自动停止</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">watchEffect</span>(<span class="function">() =&gt;</span> &#123;&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// ...这个则不会！</span></span></span><br><span class="line"><span class="language-javascript"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">watchEffect</span>(<span class="function">() =&gt;</span> &#123;&#125;)</span></span><br><span class="line"><span class="language-javascript">&#125;, <span class="number">100</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> unWatch = <span class="title function_">watchEffect</span>(<span class="function">() =&gt;</span> &#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...当该侦听器不再需要时</span></span><br><span class="line"><span class="title function_">unWatch</span>()</span><br></pre></td></tr></table></figure><h1 id="去除了sync修饰符，使用v-model代替"><a href="#去除了sync修饰符，使用v-model代替" class="headerlink" title="去除了sync修饰符，使用v-model代替"></a>去除了sync修饰符，使用v-model代替</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;searchText&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">CustomInput</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:modelValue</span>=<span class="string">&quot;searchText&quot;</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">update:modelValue</span>=<span class="string">&quot;newValue =&gt; searchText = newValue&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure><p>子组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- CustomInput.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">defineProps</span>([<span class="string">&#x27;modelValue&#x27;</span>])</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">defineEmits</span>([<span class="string">&#x27;update:modelValue&#x27;</span>])</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:value</span>=<span class="string">&quot;modelValue&quot;</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">input</span>=<span class="string">&quot;$emit(&#x27;update:modelValue&#x27;, $event.target.value)&quot;</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改默认的<code>modelValue</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">MyComponent</span> <span class="attr">v-model:title</span>=<span class="string">&quot;bookTitle&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- MyComponent.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">defineProps</span>([<span class="string">&#x27;title&#x27;</span>])</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">defineEmits</span>([<span class="string">&#x27;update:title&#x27;</span>])</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">    <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:value</span>=<span class="string">&quot;title&quot;</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">input</span>=<span class="string">&quot;$emit(&#x27;update:title&#x27;, $event.target.value)&quot;</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="与ts结合"><a href="#与ts结合" class="headerlink" title="与ts结合"></a>与ts结合</h1><h2 id="定义props"><a href="#定义props" class="headerlink" title="定义props"></a>定义<code>props</code></h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> props = defineProps&lt;&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">foo</span>: string</span></span><br><span class="line"><span class="language-javascript">  bar?: number</span></span><br><span class="line"><span class="language-javascript">&#125;&gt;()</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意 类型不能从其它文件导入</p></blockquote><h2 id="定义事件"><a href="#定义事件" class="headerlink" title="定义事件"></a>定义事件</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 运行时</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> emit = <span class="title function_">defineEmits</span>([<span class="string">&#x27;change&#x27;</span>, <span class="string">&#x27;update&#x27;</span>])</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 基于类型</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> emit = defineEmits&lt;&#123;</span></span><br><span class="line"><span class="language-javascript">  (<span class="attr">e</span>: <span class="string">&#x27;change&#x27;</span>, <span class="attr">id</span>: number): <span class="keyword">void</span></span></span><br><span class="line"><span class="language-javascript">  (<span class="attr">e</span>: <span class="string">&#x27;update&#x27;</span>, <span class="attr">value</span>: string): <span class="keyword">void</span></span></span><br><span class="line"><span class="language-javascript">&#125;&gt;()</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="定义ref"><a href="#定义ref" class="headerlink" title="定义ref"></a>定义ref</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="title class_">Ref</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">year</span>: <span class="title class_">Ref</span>&lt;<span class="built_in">string</span> | <span class="built_in">number</span>&gt; = <span class="title function_">ref</span>(<span class="string">&#x27;2020&#x27;</span>)</span><br><span class="line"></span><br><span class="line">year.<span class="property">value</span> = <span class="number">2020</span> <span class="comment">// 成功！</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 得到的类型：Ref&lt;string | number&gt;</span></span><br><span class="line"><span class="keyword">const</span> year = ref&lt;<span class="built_in">string</span> | <span class="built_in">number</span>&gt;(<span class="string">&#x27;2020&#x27;</span>)</span><br><span class="line"></span><br><span class="line">year.<span class="property">value</span> = <span class="number">2020</span> <span class="comment">// 成功！</span></span><br></pre></td></tr></table></figure><h2 id="provide-inject"><a href="#provide-inject" class="headerlink" title="provide / inject"></a>provide / inject</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; provide, inject &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="title class_">InjectionKey</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> key = <span class="title class_">Symbol</span>() <span class="keyword">as</span> <span class="title class_">InjectionKey</span>&lt;<span class="built_in">string</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="title function_">provide</span>(key, <span class="string">&#x27;foo&#x27;</span>) <span class="comment">// 若提供的是非字符串值会导致错误</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> foo = <span class="title function_">inject</span>(key) <span class="comment">// foo 的类型：string | undefined</span></span><br></pre></td></tr></table></figure><h2 id="向外暴露方法"><a href="#向外暴露方法" class="headerlink" title="向外暴露方法"></a>向外暴露方法</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> isContentShown = <span class="title function_">ref</span>(<span class="literal">false</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">open</span> = (<span class="params"></span>) =&gt; (isContentShown.<span class="property">value</span> = <span class="literal">true</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">defineExpose</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  open</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- App.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">MyModal</span> <span class="keyword">from</span> <span class="string">&#x27;./MyModal.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> modal = ref&lt;<span class="title class_">InstanceType</span>&lt;<span class="keyword">typeof</span> <span class="title class_">MyModal</span>&gt; | <span class="literal">null</span>&gt;(<span class="literal">null</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">openModal</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  modal.<span class="property">value</span>?.<span class="title function_">open</span>()</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://zhoujunxiong.gitee.com/categories/VUE/">VUE</category>
      
      
      <category domain="http://zhoujunxiong.gitee.com/tags/%E5%89%8D%E7%AB%AF/">前端</category>
      
      <category domain="http://zhoujunxiong.gitee.com/tags/VUE/">VUE</category>
      
      
      <comments>http://zhoujunxiong.gitee.com/2022/08/27/%E5%89%8D%E7%AB%AF/%E6%A1%86%E6%9E%B6/VUE/vue3%E6%96%87%E6%A1%A3/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Typescript之React中ForwardRef类型</title>
      <link>http://zhoujunxiong.gitee.com/2022/08/11/%E5%89%8D%E7%AB%AF/Typescript/Typescript%E4%B9%8BReact%E4%B8%ADForwardRef%E7%B1%BB%E5%9E%8B/</link>
      <guid>http://zhoujunxiong.gitee.com/2022/08/11/%E5%89%8D%E7%AB%AF/Typescript/Typescript%E4%B9%8BReact%E4%B8%ADForwardRef%E7%B1%BB%E5%9E%8B/</guid>
      <pubDate>Thu, 11 Aug 2022 12:28:34 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;什么是React-forwardRef&quot;&gt;&lt;a href=&quot;#什么是React-forwardRef&quot; class=&quot;headerlink&quot; title=&quot;什么是React.forwardRef&quot;&gt;&lt;/a&gt;什么是React.forwardRef&lt;/h2&gt;&lt;p&gt;&lt;c</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="什么是React-forwardRef"><a href="#什么是React-forwardRef" class="headerlink" title="什么是React.forwardRef"></a>什么是React.forwardRef</h2><p><code>React.forwardRef</code>是为了让函数组件将内部方法对外进行导出或者导出内部的ref，一般会配合<code>useImperativeHandle</code></p><p>当你使用typescript时，会有一个小问题，就是使用<code>React.forwardRef</code>对组件进行包裹后，你如果想使用泛型对组件内部传参非常困难</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p><a href="https://fettblog.eu/typescript-react-generic-forward-refs/">参考文章</a></p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// The original component extended with a `ref`</span></span><br><span class="line"><span class="keyword">function</span> <span class="title class_">ClickableListInner</span>&lt;T&gt;(</span><br><span class="line">  <span class="attr">props</span>: <span class="title class_">ClickableListProps</span>&lt;T&gt;,</span><br><span class="line">  <span class="attr">ref</span>: <span class="title class_">React</span>.<span class="property">ForwardedRef</span>&lt;<span class="title class_">HTMLUListElement</span>&gt;</span><br><span class="line">) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;props.items.map((item, i) =&gt; (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;i&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;(el)</span> =&gt;</span> props.onSelect(item)&#125;&gt;Select<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;item&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      ))&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// As an argument in `React.forwardRef`</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ClickableList</span> = <span class="title class_">React</span>.<span class="title function_">forwardRef</span>(<span class="title class_">ClickableListInner</span>)</span><br></pre></td></tr></table></figure><p>方案一: 强行类型断言，最简单的方案</p><p>思路很简单，导出类型时，对组件进行强行类型断言</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">ClickableList</span> = <span class="title class_">React</span>.<span class="title function_">forwardRef</span>(<span class="title class_">ClickableListInner</span>) <span class="keyword">as</span> &lt;T&gt;<span class="function">(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  props: ClickableListProps&lt;T&gt; &amp; &#123; ref?: React.ForwardedRef&lt;HTMLUListElement&gt; &#125;</span></span></span><br><span class="line"><span class="params"><span class="function"></span>) =&gt;</span> <span class="title class_">ReturnType</span>&lt;<span class="keyword">typeof</span> <span class="title class_">ClickableListInner</span>&gt;;</span><br></pre></td></tr></table></figure><p>方案二: 创建一个自定义的ref，然后包裹组件</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">ClickableListProps</span>&lt;T&gt; = &#123;</span><br><span class="line">  <span class="attr">items</span>: T[];</span><br><span class="line">  <span class="attr">onSelect</span>: <span class="function">(<span class="params">item: T</span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">  mRef?: <span class="title class_">React</span>.<span class="property">Ref</span>&lt;<span class="title class_">HTMLUListElement</span>&gt; | <span class="literal">null</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title class_">ClickableList</span>&lt;T&gt;(</span><br><span class="line">  <span class="attr">props</span>: <span class="title class_">ClickableListProps</span>&lt;T&gt;</span><br><span class="line">) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">ref</span>=<span class="string">&#123;props.mRef&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;props.items.map((item, i) =&gt; (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;i&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;(el)</span> =&gt;</span> props.onSelect(item)&#125;&gt;Select<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;item&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      ))&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方案三: 声明全局的<code>forwardRef</code>进行声明合并</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Redecalare forwardRef</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&quot;react&quot;</span> &#123;</span><br><span class="line">  <span class="keyword">function</span> forwardRef&lt;T, P = &#123;&#125;&gt;(</span><br><span class="line">    <span class="attr">render</span>: <span class="function">(<span class="params">props: P, ref: React.Ref&lt;T&gt;</span>) =&gt;</span> <span class="title class_">React</span>.<span class="property">ReactElement</span> | <span class="literal">null</span></span><br><span class="line">  ): <span class="function">(<span class="params">props: P &amp; React.RefAttributes&lt;T&gt;</span>) =&gt;</span> <span class="title class_">React</span>.<span class="property">ReactElement</span> | <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Just write your components like you&#x27;re used to!</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ClickableListProps</span>&lt;T&gt; = &#123;</span><br><span class="line">  <span class="attr">items</span>: T[];</span><br><span class="line">  <span class="attr">onSelect</span>: <span class="function">(<span class="params">item: T</span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title class_">ClickableListInner</span>&lt;T&gt;(</span><br><span class="line">  <span class="attr">props</span>: <span class="title class_">ClickableListProps</span>&lt;T&gt;,</span><br><span class="line">  <span class="attr">ref</span>: <span class="title class_">React</span>.<span class="property">ForwardedRef</span>&lt;<span class="title class_">HTMLUListElement</span>&gt;</span><br><span class="line">) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;props.items.map((item, i) =&gt; (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;i&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;(el)</span> =&gt;</span> props.onSelect(item)&#125;&gt;Select<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;item&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      ))&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">ClickableList</span> = <span class="title class_">React</span>.<span class="title function_">forwardRef</span>(<span class="title class_">ClickableListInner</span>);</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://zhoujunxiong.gitee.com/categories/Typescript/">Typescript</category>
      
      
      <category domain="http://zhoujunxiong.gitee.com/tags/%E5%89%8D%E7%AB%AF/">前端</category>
      
      <category domain="http://zhoujunxiong.gitee.com/tags/Typescript/">Typescript</category>
      
      <category domain="http://zhoujunxiong.gitee.com/tags/React/">React</category>
      
      
      <comments>http://zhoujunxiong.gitee.com/2022/08/11/%E5%89%8D%E7%AB%AF/Typescript/Typescript%E4%B9%8BReact%E4%B8%ADForwardRef%E7%B1%BB%E5%9E%8B/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>池化与puppeteer优化</title>
      <link>http://zhoujunxiong.gitee.com/2022/05/04/nodejs/%E6%B1%A0%E5%8C%96%E4%B8%8Epuppeteer%E4%BC%98%E5%8C%96/</link>
      <guid>http://zhoujunxiong.gitee.com/2022/05/04/nodejs/%E6%B1%A0%E5%8C%96%E4%B8%8Epuppeteer%E4%BC%98%E5%8C%96/</guid>
      <pubDate>Wed, 04 May 2022 00:14:08 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;puppeteer优化&quot;&gt;&lt;a href=&quot;#puppeteer优化&quot; class=&quot;headerlink&quot; title=&quot;puppeteer优化&quot;&gt;&lt;/a&gt;puppeteer优化&lt;/h2&gt;&lt;p&gt;因为使用&lt;code&gt;puppeteer&lt;/code&gt;进行截图，主要资</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="puppeteer优化"><a href="#puppeteer优化" class="headerlink" title="puppeteer优化"></a>puppeteer优化</h2><p>因为使用<code>puppeteer</code>进行截图，主要资源占用实际上是在<code>chrome</code></p><p>思路主要就是</p><ul><li>关闭无关的chrome功能</li><li>使用缓存</li></ul><p>缓存主要是集中在<code>chrome</code>实例与<code>tab</code>页实例的缓存</p><p>写了一个简单的基于<code>promise</code>的<code>pool</code>类</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Pool</span> &#123;</span><br><span class="line">    resolves = [];</span><br><span class="line">    <span class="title function_">notify</span>(<span class="params">page</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> reslove = <span class="variable language_">this</span>.<span class="property">resolves</span>.<span class="title function_">pop</span>();</span><br><span class="line">        <span class="title function_">reslove</span>(page);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">resolves</span>.<span class="title function_">push</span>(resolve);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pool = <span class="keyword">new</span> <span class="title class_">Pool</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从pool中获取实例</span></span><br><span class="line"><span class="keyword">if</span> (unusePagePond.<span class="property">length</span> == <span class="number">0</span>) &#123;</span><br><span class="line">    page = <span class="keyword">await</span> pool.<span class="title function_">get</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    page = unusePagePond.<span class="title function_">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 任务结束，放回去</span></span><br><span class="line"><span class="keyword">if</span> (pool.<span class="property">resolves</span>.<span class="property">length</span> != <span class="number">0</span>) &#123;</span><br><span class="line">    pool.<span class="title function_">notify</span>(page);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    unusePagePond.<span class="title function_">push</span>(page);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写的略微捡漏，主要有几个地方</p><ul><li>没有判断总数，会造成一直有promise进入队列，数量过大会导致内存泄漏</li><li>没有优先级判断</li><li>没有自动扩容，降配机制</li></ul><h2 id="使用-node-pool-对代码进行优化"><a href="#使用-node-pool-对代码进行优化" class="headerlink" title="使用 node-pool 对代码进行优化"></a>使用 node-pool 对代码进行优化</h2><p>虽然仓库的名称叫<code>node-pool</code>，但是实际上这个库安装的时候叫<code>generic-pool</code></p><h3 id="node-pool-源码学习"><a href="#node-pool-源码学习" class="headerlink" title="node-pool 源码学习"></a>node-pool 源码学习</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> factory = &#123;</span><br><span class="line">  <span class="attr">create</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> browser.<span class="title function_">newPage</span>();</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">destroy</span>: <span class="keyword">function</span>(<span class="params">page</span>) &#123;</span><br><span class="line">    page.<span class="title function_">close</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> opts = &#123;</span><br><span class="line">  <span class="attr">max</span>: <span class="number">23</span>, <span class="comment">// maximum size of the pool</span></span><br><span class="line">  <span class="attr">min</span>: <span class="number">10</span> <span class="comment">// minimum size of the pool</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @ts-ignore</span></span><br><span class="line"><span class="keyword">let</span> pool = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">init</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!browser) &#123;</span><br><span class="line">    browser = <span class="keyword">await</span> puppeteer.<span class="title function_">launch</span>(&#123;</span><br><span class="line">      <span class="attr">args</span>: [</span><br><span class="line">        <span class="string">&quot;--disable-gpu&quot;</span>,</span><br><span class="line">        <span class="string">&quot;--disable-dev-shm-usage&quot;</span>,</span><br><span class="line">        <span class="string">&quot;--disable-setuid-sandbox&quot;</span>,</span><br><span class="line">        <span class="string">&quot;--no-first-run&quot;</span>,</span><br><span class="line">        <span class="string">&quot;--no-sandbox&quot;</span>,</span><br><span class="line">        <span class="string">&quot;--no-zygote&quot;</span>,</span><br><span class="line">        <span class="string">&quot;--single-process&quot;</span>,</span><br><span class="line">        <span class="string">&quot;--disable-extensions&quot;</span>,</span><br><span class="line">        <span class="string">&quot;--disable-xss-auditor&quot;</span>,</span><br><span class="line">        <span class="string">&quot;--disable-popup-blocking&quot;</span>,</span><br><span class="line">        <span class="string">&quot;--disable-accelerated-2d-canvas&quot;</span>,</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">headless</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// @ts-ignore</span></span><br><span class="line">  pool = genericPool.<span class="title function_">createPool</span>(factory, opts);</span><br><span class="line">  <span class="keyword">return</span> browser</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> page = <span class="keyword">await</span> pool.<span class="title function_">acquire</span>()</span><br><span class="line"><span class="comment">// page实例使用完毕后，放入缓存池</span></span><br><span class="line">pool.<span class="title function_">release</span>(page)</span><br></pre></td></tr></table></figure><ul><li>max：在任何给定时间创建的最大资源数。 （默认值 = 1） </li><li>min：在任何给定时间保留在池中的最小资源数。如果设置 &gt;= max，则池将默默地将最小值设置为等于最大值。 （默认=0） </li><li>maxWaitingClients：允许的最大排队请求数，额外的获取调用将在事件循环的未来循环中以错误回调。 </li><li>testOnBorrow: boolean: 池是否应该在将资源提供给客户端之前对其进行验证。要求指定 factory.validate。 </li><li>acquireTimeoutMillis：acquire 调用在超时前等待资源的最大毫秒数。 （默认无限制），如果提供应该非零正整数。 </li><li>destroyTimeoutMillis：destroy 调用在超时前等待资源的最大毫秒数。 （默认无限制），如果提供应该非零正整数。 fifo ：如果为 true，则最旧的资源将首先被分配。如果为 false，则最近释放的资源将最先被分配。这实际上 将池的行为从队列转换为堆栈。 boolean, (default true) </li><li>priorityRange: int between 1 and x - 如果设置，如果没有可用资源，借款人可以在队列中指定他们的相对优先级。见例子。 （默认 1）自动启动：布尔值，一旦调用构造函数，池是否应该开始创建资源、初始化驱逐器等。如果为 false，则可以通过调用 pool.start 来启动池，否则第一次调用 acquire 将启动池。 （默认为 true） </li><li>evictionRunIntervalMillis：运行回收检查的频率。默认值：0（不运行）。 </li><li>numTestsPerEvictionRun：检查每次驱逐运行的资源数量。默认值：3. </li><li>softIdleTimeoutMillis：对象在有资格被空闲对象回收者（如果有）驱逐之前可以在池中空闲的时间量，附加条件是至少“最小空闲”对象实例保留在池中.默认值 -1（没有东西可以被驱逐） </li><li>idleTimeoutMillis：对象可能处于空闲状态的最短时间 在由于空闲时间而有资格被驱逐之前在池中。取代 softIdleTimeoutMillis 默认值：30000 </li><li>Promise：Promise 库，池应使用的 Promises/A 实现。默认为 global.Promise 是什么（通常是原生promise）。 <h4 id="入口文件"><a href="#入口文件" class="headerlink" title="入口文件"></a>入口文件</h4></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通用池</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Pool</span> = <span class="built_in">require</span>(<span class="string">&quot;./lib/Pool&quot;</span>)</span><br><span class="line"><span class="comment">// 双端队列</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Deque</span> = <span class="built_in">require</span>(<span class="string">&quot;./lib/Deque&quot;</span>)</span><br><span class="line"><span class="comment">// 优先队列</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">PriorityQueue</span> = <span class="built_in">require</span>(<span class="string">&quot;./lib/PriorityQueue&quot;</span>)</span><br><span class="line"><span class="comment">// 默认回收器</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">DefaultEvictor</span> = <span class="built_in">require</span>(<span class="string">&quot;./lib/DefaultEvictor&quot;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="title class_">Pool</span>: <span class="title class_">Pool</span>,</span><br><span class="line">  <span class="title class_">Deque</span>: <span class="title class_">Deque</span>,</span><br><span class="line">  <span class="title class_">PriorityQueue</span>: <span class="title class_">PriorityQueue</span>,</span><br><span class="line">  <span class="title class_">DefaultEvictor</span>: <span class="title class_">DefaultEvictor</span>,</span><br><span class="line">  <span class="attr">createPool</span>: <span class="keyword">function</span> (<span class="params">factory, config</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Pool</span>(<span class="title class_">DefaultEvictor</span>, <span class="title class_">Deque</span>, <span class="title class_">PriorityQueue</span>, factory, config)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="DefaultEvictor"><a href="#DefaultEvictor" class="headerlink" title="DefaultEvictor"></a>DefaultEvictor</h4><p><code>DefaultEvictor</code>类只提供了一个方法<code>evict</code>来实现对象的回收。</p><p>返回<code>true</code>与<code>false</code>表示是否需要回收对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DefaultEvictor</span> &#123;</span><br><span class="line">  <span class="title function_">evict</span>(<span class="params">config, pooledResource, availableObjectsCount</span>) &#123;</span><br><span class="line">    <span class="comment">// 计算空闲时间</span></span><br><span class="line">    <span class="keyword">const</span> idleTime = <span class="title class_">Date</span>.<span class="title function_">now</span>() - pooledResource.<span class="property">lastIdleTime</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据配置，计算是否到达最大空闲时间</span></span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      config.<span class="property">softIdleTimeoutMillis</span> &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">      config.<span class="property">softIdleTimeoutMillis</span> &lt; idleTime &amp;&amp;</span><br><span class="line">      config.<span class="property">min</span> &lt; availableObjectsCount</span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (config.<span class="property">idleTimeoutMillis</span> &lt; idleTime) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">DefaultEvictor</span></span><br></pre></td></tr></table></figure><h4 id="Deque-双端队列"><a href="#Deque-双端队列" class="headerlink" title="Deque 双端队列"></a>Deque 双端队列</h4><p><code>Deque</code>会稍微复杂一些，但其实就是实现了一个 js 版本的双向链表</p><p>并且实现了迭代功能，支持<code>for of</code>迭代。</p><blockquote><p>现在还不是很理解为啥不使用 js 原生的数组</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// DoublyLinkedList是一个双向链表</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">DoublyLinkedList</span> = <span class="built_in">require</span>(<span class="string">&quot;./DoublyLinkedList&quot;</span>)</span><br><span class="line"><span class="comment">// 用于迭代双向链表的迭代器</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">DequeIterator</span> = <span class="built_in">require</span>(<span class="string">&quot;./DequeIterator&quot;</span>)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * DoublyLinkedList backed double ended queue</span></span><br><span class="line"><span class="comment"> * implements just enough to keep the Pool</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Deque</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_list</span> = <span class="keyword">new</span> <span class="title class_">DoublyLinkedList</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * removes and returns the first element from the queue</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> &#123;<span class="type">any</span>&#125; [description]</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">shift</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">undefined</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> node = <span class="variable language_">this</span>.<span class="property">_list</span>.<span class="property">head</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_list</span>.<span class="title function_">remove</span>(node)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> node.<span class="property">data</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * adds one elemts to the beginning of the queue</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span>  &#123;<span class="type">any</span>&#125; element [description]</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> &#123;<span class="type">any</span>&#125;         [description]</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">unshift</span>(<span class="params">element</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> node = <span class="title class_">DoublyLinkedList</span>.<span class="title function_">createNode</span>(element)</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_list</span>.<span class="title function_">insertBeginning</span>(node)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * adds one to the end of the queue</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span>  &#123;<span class="type">any</span>&#125; element [description]</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> &#123;<span class="type">any</span>&#125;         [description]</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">push</span>(<span class="params">element</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> node = <span class="title class_">DoublyLinkedList</span>.<span class="title function_">createNode</span>(element)</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_list</span>.<span class="title function_">insertEnd</span>(node)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * removes and returns the last element from the queue</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">pop</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">undefined</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> node = <span class="variable language_">this</span>.<span class="property">_list</span>.<span class="property">tail</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_list</span>.<span class="title function_">remove</span>(node)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> node.<span class="property">data</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DequeIterator</span>(<span class="variable language_">this</span>.<span class="property">_list</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">iterator</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DequeIterator</span>(<span class="variable language_">this</span>.<span class="property">_list</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">reverseIterator</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DequeIterator</span>(<span class="variable language_">this</span>.<span class="property">_list</span>, <span class="literal">true</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * get a reference to the item at the head of the queue</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> &#123;<span class="type">any</span>&#125; [description]</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">head</span>() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">undefined</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> node = <span class="variable language_">this</span>.<span class="property">_list</span>.<span class="property">head</span></span><br><span class="line">    <span class="keyword">return</span> node.<span class="property">data</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * get a reference to the item at the tail of the queue</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> &#123;<span class="type">any</span>&#125; [description]</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">tail</span>() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">undefined</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> node = <span class="variable language_">this</span>.<span class="property">_list</span>.<span class="property">tail</span></span><br><span class="line">    <span class="keyword">return</span> node.<span class="property">data</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">length</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_list</span>.<span class="property">length</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">Deque</span></span><br></pre></td></tr></table></figure><h4 id="PriorityQueue-优先队列"><a href="#PriorityQueue-优先队列" class="headerlink" title="PriorityQueue 优先队列"></a>PriorityQueue 优先队列</h4><p>本来以为是一个大顶堆实现的优先队列，实际上是通过一个数组，下标表示优先级</p><p>数组每一项，存放不同优先级的任务，是一个双端队列</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Queue</span> = <span class="built_in">require</span>(<span class="string">&quot;./Queue&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@class</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@private</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PriorityQueue</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">size</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_size</span> = <span class="title class_">Math</span>.<span class="title function_">max</span>(+size | <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="comment">/** <span class="doctag">@type</span> &#123;<span class="type">Queue[]</span>&#125; */</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_slots</span> = []</span><br><span class="line">    <span class="comment">// initialize arrays to hold queue elements</span></span><br><span class="line">    <span class="comment">// 每一项都会初始化一个双端队列</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">_size</span>; i++) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_slots</span>.<span class="title function_">push</span>(<span class="keyword">new</span> <span class="title class_">Queue</span>())</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">length</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> _length = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, slots = <span class="variable language_">this</span>.<span class="property">_slots</span>.<span class="property">length</span>; i &lt; slots; i++) &#123;</span><br><span class="line">      _length += <span class="variable language_">this</span>.<span class="property">_slots</span>[i].<span class="property">length</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _length</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">enqueue</span>(<span class="params">obj, priority</span>) &#123;</span><br><span class="line">    <span class="comment">// Convert to integer with a default value of 0.</span></span><br><span class="line">    priority = (priority &amp;&amp; +priority | <span class="number">0</span>) || <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (priority) &#123;</span><br><span class="line">      <span class="keyword">if</span> (priority &lt; <span class="number">0</span> || priority &gt;= <span class="variable language_">this</span>.<span class="property">_size</span>) &#123;</span><br><span class="line">        priority = <span class="variable language_">this</span>.<span class="property">_size</span> - <span class="number">1</span></span><br><span class="line">        <span class="comment">// put obj at the end of the line</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_slots</span>[priority].<span class="title function_">push</span>(obj)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">dequeue</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, sl = <span class="variable language_">this</span>.<span class="property">_slots</span>.<span class="property">length</span>; i &lt; sl; i += <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">_slots</span>[i].<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_slots</span>[i].<span class="title function_">shift</span>()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">head</span>() &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, sl = <span class="variable language_">this</span>.<span class="property">_slots</span>.<span class="property">length</span>; i &lt; sl; i += <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">_slots</span>[i].<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_slots</span>[i].<span class="property">head</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">tail</span>() &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="variable language_">this</span>.<span class="property">_slots</span>.<span class="property">length</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">_slots</span>[i].<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_slots</span>[i].<span class="property">tail</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">PriorityQueue</span></span><br></pre></td></tr></table></figure><h4 id="Pool-对象池"><a href="#Pool-对象池" class="headerlink" title="Pool 对象池"></a>Pool 对象池</h4><p>最后当然是我们最核心的<code>pool</code>生成方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Pool</span> <span class="keyword">extends</span> <span class="title class_ inherited__">EventEmitter</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>因为<code>pool</code>是基础<code>EventEmitter</code>的，所以它的实例是支持时间发布订阅的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="title function_">listenerCount</span>(<span class="attr">emitter</span>: <span class="title class_">EventEmitter</span>, <span class="attr">event</span>: string | symbol): number; <span class="comment">// deprecated</span></span><br><span class="line"><span class="keyword">static</span> <span class="attr">defaultMaxListeners</span>: number;</span><br><span class="line"></span><br><span class="line"><span class="title function_">addListener</span>(<span class="attr">event</span>: string | symbol, <span class="attr">listener</span>: <span class="function">(<span class="params">...args: any[]</span>) =&gt;</span> <span class="keyword">void</span>): <span class="variable language_">this</span>;</span><br><span class="line"><span class="title function_">on</span>(<span class="attr">event</span>: string | symbol, <span class="attr">listener</span>: <span class="function">(<span class="params">...args: any[]</span>) =&gt;</span> <span class="keyword">void</span>): <span class="variable language_">this</span>;</span><br><span class="line"><span class="title function_">once</span>(<span class="attr">event</span>: string | symbol, <span class="attr">listener</span>: <span class="function">(<span class="params">...args: any[]</span>) =&gt;</span> <span class="keyword">void</span>): <span class="variable language_">this</span>;</span><br><span class="line"><span class="title function_">prependListener</span>(<span class="attr">event</span>: string | symbol, <span class="attr">listener</span>: <span class="function">(<span class="params">...args: any[]</span>) =&gt;</span> <span class="keyword">void</span>): <span class="variable language_">this</span>;</span><br><span class="line"><span class="title function_">prependOnceListener</span>(<span class="attr">event</span>: string | symbol, <span class="attr">listener</span>: <span class="function">(<span class="params">...args: any[]</span>) =&gt;</span> <span class="keyword">void</span>): <span class="variable language_">this</span>;</span><br><span class="line"><span class="title function_">removeListener</span>(<span class="attr">event</span>: string | symbol, <span class="attr">listener</span>: <span class="function">(<span class="params">...args: any[]</span>) =&gt;</span> <span class="keyword">void</span>): <span class="variable language_">this</span>;</span><br><span class="line"><span class="title function_">removeAllListeners</span>(event?: string | symbol): <span class="variable language_">this</span>;</span><br><span class="line"><span class="title function_">setMaxListeners</span>(<span class="attr">n</span>: number): <span class="variable language_">this</span>;</span><br><span class="line"><span class="title function_">getMaxListeners</span>(): number;</span><br><span class="line"><span class="title function_">listeners</span>(<span class="attr">event</span>: string | symbol): <span class="title class_">Function</span>[];</span><br><span class="line"><span class="title function_">emit</span>(<span class="attr">event</span>: string | symbol, ...<span class="attr">args</span>: any[]): boolean;</span><br><span class="line"><span class="title function_">eventNames</span>(): <span class="title class_">Array</span>&lt;string | symbol&gt;;</span><br><span class="line"><span class="title function_">listenerCount</span>(<span class="attr">type</span>: string | symbol): number;</span><br></pre></td></tr></table></figure><p>接下来我们可以看一下构造函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">constructor</span>(<span class="params">Evictor, Deque, PriorityQueue, factory, options</span>) &#123;</span><br><span class="line">  <span class="variable language_">super</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 验证工厂函数是否符合规范</span></span><br><span class="line">  <span class="title function_">factoryValidator</span>(factory);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将选项与默认选项进行合并</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">_config</span> = <span class="keyword">new</span> <span class="title class_">PoolOptions</span>(options);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> fix up this ugly glue-ing</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">_Promise</span> = <span class="variable language_">this</span>.<span class="property">_config</span>.<span class="property">Promise</span>;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">_factory</span> = factory;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">_draining</span> = <span class="literal">false</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">_started</span> = <span class="literal">false</span>;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Holds waiting clients</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@type</span> &#123;<span class="type">PriorityQueue</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="comment">// 等待的客户端队列</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">_waitingClientsQueue</span> = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="variable language_">this</span>.<span class="property">_config</span>.<span class="property">priorityRange</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Collection of promises for resource creation calls made by the pool to factory.create</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@type</span> &#123;<span class="type">Set</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">_factoryCreateOperations</span> = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Collection of promises for resource destruction calls made by the pool to factory.destroy</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@type</span> &#123;<span class="type">Set</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">_factoryDestroyOperations</span> = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * A queue/stack of pooledResources awaiting acquisition</span></span><br><span class="line"><span class="comment">   * <span class="doctag">TODO:</span> replace with LinkedList backed array</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@type</span> &#123;<span class="type">Deque</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">_availableObjects</span> = <span class="keyword">new</span> <span class="title class_">Deque</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Collection of references for any resource that are undergoing validation before being acquired</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@type</span> &#123;<span class="type">Set</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">_testOnBorrowResources</span> = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Collection of references for any resource that are undergoing validation before being returned</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@type</span> &#123;<span class="type">Set</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">_testOnReturnResources</span> = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Collection of promises for any validations currently in process</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@type</span> &#123;<span class="type">Set</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">_validationOperations</span> = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * All objects associated with this pool in any state (except destroyed)</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@type</span> &#123;<span class="type">Set</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">_allObjects</span> = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Loans keyed by the borrowed resource</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@type</span> &#123;<span class="type">Map</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">_resourceLoans</span> = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Infinitely looping iterator over available object</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@type</span> &#123;<span class="type">DequeIterator</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">_evictionIterator</span> = <span class="variable language_">this</span>.<span class="property">_availableObjects</span>.<span class="title function_">iterator</span>();</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">_evictor</span> = <span class="keyword">new</span> <span class="title class_">Evictor</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * handle for setTimeout for next eviction run</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@type</span> &#123;<span class="type">(number|null)</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">_scheduledEviction</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// create initial resources (if factory.min &gt; 0)</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">_config</span>.<span class="property">autostart</span> === <span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">start</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>acquire</code>也是一个核心方法，它的实现如下</p><p><code>acquire</code>和我之前的实现的原理差不多是一样的，就是会<code>new</code>一个新的<code>Promise</code>，放在<code>_waitingClientsQueue</code>中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">acquire</span>(<span class="params">priority</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">_started</span> === <span class="literal">false</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">_config</span>.<span class="property">autostart</span> === <span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">start</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">_draining</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_Promise</span>.<span class="title function_">reject</span>(</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;pool is draining and cannot accept work&quot;</span>)</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> should we defer this check till after this event loop incase &quot;the situation&quot; changes in the meantime</span></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">spareResourceCapacity</span> &lt; <span class="number">1</span> &amp;&amp;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_availableObjects</span>.<span class="property">length</span> &lt; <span class="number">1</span> &amp;&amp;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_config</span>.<span class="property">maxWaitingClients</span> !== <span class="literal">undefined</span> &amp;&amp;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_waitingClientsQueue</span>.<span class="property">length</span> &gt;= <span class="variable language_">this</span>.<span class="property">_config</span>.<span class="property">maxWaitingClients</span></span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_Promise</span>.<span class="title function_">reject</span>(</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;max waitingClients count exceeded&quot;</span>)</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> resourceRequest = <span class="keyword">new</span> <span class="title class_">ResourceRequest</span>(</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_config</span>.<span class="property">acquireTimeoutMillis</span>,</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_Promise</span></span><br><span class="line">  );</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">_waitingClientsQueue</span>.<span class="title function_">enqueue</span>(resourceRequest, priority);</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">_dispense</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> resourceRequest.<span class="property">promise</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回之前调用了<code>_dispense</code>方法, 主要先判断队列中有多少个等待, 没有说明现在没有任务</p><p>反之，判断当前是否达到最大实例数量，没有就调用<code>_createResource</code>创建对应的实例</p><p>然后让可以调用的数量进行<code>dispatch</code></p><p>从<code>_availableObjects</code>中取出可用的对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">_dispense</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Local variables for ease of reading/writing</span></span><br><span class="line"><span class="comment">   * these don&#x27;t (shouldn&#x27;t) change across the execution of this fn</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">const</span> numWaitingClients = <span class="variable language_">this</span>.<span class="property">_waitingClientsQueue</span>.<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// If there aren&#x27;t any waiting requests then there is nothing to do</span></span><br><span class="line">  <span class="comment">// so lets short-circuit</span></span><br><span class="line">  <span class="keyword">if</span> (numWaitingClients &lt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> resourceShortfall =</span><br><span class="line">    numWaitingClients - <span class="variable language_">this</span>.<span class="property">_potentiallyAllocableResourceCount</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> actualNumberOfResourcesToCreate = <span class="title class_">Math</span>.<span class="title function_">min</span>(</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">spareResourceCapacity</span>,</span><br><span class="line">    resourceShortfall</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; actualNumberOfResourcesToCreate &gt; i; i++) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">_createResource</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// If we are doing test-on-borrow see how many more resources need to be moved into test</span></span><br><span class="line">  <span class="comment">// to help satisfy waitingClients</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">_config</span>.<span class="property">testOnBorrow</span> === <span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="comment">// how many available resources do we need to shift into test</span></span><br><span class="line">    <span class="keyword">const</span> desiredNumberOfResourcesToMoveIntoTest =</span><br><span class="line">      numWaitingClients - <span class="variable language_">this</span>.<span class="property">_testOnBorrowResources</span>.<span class="property">size</span>;</span><br><span class="line">    <span class="keyword">const</span> actualNumberOfResourcesToMoveIntoTest = <span class="title class_">Math</span>.<span class="title function_">min</span>(</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_availableObjects</span>.<span class="property">length</span>,</span><br><span class="line">      desiredNumberOfResourcesToMoveIntoTest</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; actualNumberOfResourcesToMoveIntoTest &gt; i; i++) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">_testOnBorrow</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// if we aren&#x27;t testing-on-borrow then lets try to allocate what we can</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">_config</span>.<span class="property">testOnBorrow</span> === <span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> actualNumberOfResourcesToDispatch = <span class="title class_">Math</span>.<span class="title function_">min</span>(</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_availableObjects</span>.<span class="property">length</span>,</span><br><span class="line">      numWaitingClients</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; actualNumberOfResourcesToDispatch &gt; i; i++) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">_dispatchResource</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://zhoujunxiong.gitee.com/categories/nodejs/">nodejs</category>
      
      
      <category domain="http://zhoujunxiong.gitee.com/tags/nodejs/">nodejs</category>
      
      <category domain="http://zhoujunxiong.gitee.com/tags/JavaScript/">JavaScript</category>
      
      <category domain="http://zhoujunxiong.gitee.com/tags/puppeteer/">puppeteer</category>
      
      
      <comments>http://zhoujunxiong.gitee.com/2022/05/04/nodejs/%E6%B1%A0%E5%8C%96%E4%B8%8Epuppeteer%E4%BC%98%E5%8C%96/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>go学习笔记</title>
      <link>http://zhoujunxiong.gitee.com/2022/04/17/GO/go%E4%B9%8B%E7%B1%BB%E5%9E%8B%E7%B3%BB%E7%BB%9F/</link>
      <guid>http://zhoujunxiong.gitee.com/2022/04/17/GO/go%E4%B9%8B%E7%B1%BB%E5%9E%8B%E7%B3%BB%E7%BB%9F/</guid>
      <pubDate>Sun, 17 Apr 2022 12:27:24 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;类型元数据&quot;&gt;&lt;a href=&quot;#类型元数据&quot; class=&quot;headerlink&quot; title=&quot;类型元数据&quot;&gt;&lt;/a&gt;类型元数据&lt;/h1&gt;&lt;p&gt;在&lt;code&gt;runtime&lt;/code&gt;包中，类型信息包含2-3层&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一层就是公共头he</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="类型元数据"><a href="#类型元数据" class="headerlink" title="类型元数据"></a>类型元数据</h1><p>在<code>runtime</code>包中，类型信息包含2-3层</p><ul><li>第一层就是公共头header（type）</li><li>第二层就是各自不同类型信息的body</li><li>第三层是只有自定义包才有的，用来存储包信息</li></ul><p>公共头信息</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> _type <span class="keyword">struct</span> &#123;</span><br><span class="line"> size       <span class="type">uintptr</span></span><br><span class="line"> ptrdata    <span class="type">uintptr</span> <span class="comment">// size of memory prefix holding all pointers</span></span><br><span class="line"> hash       <span class="type">uint32</span></span><br><span class="line"> tflag      tflag</span><br><span class="line"> align      <span class="type">uint8</span></span><br><span class="line"> fieldAlign <span class="type">uint8</span></span><br><span class="line"> kind       <span class="type">uint8</span></span><br><span class="line"> <span class="comment">// function for comparing objects of this type</span></span><br><span class="line"> <span class="comment">// (ptr to object A, ptr to object B) -&gt; ==?</span></span><br><span class="line"> equal <span class="function"><span class="keyword">func</span><span class="params">(unsafe.Pointer, unsafe.Pointer)</span></span> <span class="type">bool</span></span><br><span class="line"> <span class="comment">// gcdata stores the GC type data for the garbage collector.</span></span><br><span class="line"> <span class="comment">// If the KindGCProg bit is set in kind, gcdata is a GC program.</span></span><br><span class="line"> <span class="comment">// Otherwise it is a ptrmask bitmap. See mbitmap.go for details.</span></span><br><span class="line"> gcdata    *<span class="type">byte</span></span><br><span class="line"> str       nameOff</span><br><span class="line"> ptrToThis typeOff</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如: slice类型</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> slicetype <span class="keyword">struct</span> &#123;</span><br><span class="line"> typ  _type</span><br><span class="line"> elem *_type <span class="comment">// 指向对应类型的type，例如 []string类型指向stringtype</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三层是</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> uncommontype <span class="keyword">struct</span> &#123;</span><br><span class="line"> pkgpath nameOff <span class="comment">// 包路径</span></span><br><span class="line"> mcount  <span class="type">uint16</span> <span class="comment">// number of methods 方法数量</span></span><br><span class="line"> xcount  <span class="type">uint16</span> <span class="comment">// number of exported methods 暴露的方法数量</span></span><br><span class="line"> moff    <span class="type">uint32</span> <span class="comment">// offset from this uncommontype to [mcount]method 从这个uncommontype开始到方法数组的偏移量</span></span><br><span class="line"> _       <span class="type">uint32</span> <span class="comment">// unused </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.svg" data-lazy-src="https://raw.githubusercontent.com/SuperBigSniper/blogImg/master/20220417182255.png" alt="20220417182255"><br><img src= "/img/loading.svg" data-lazy-src="image-1.png" alt="alt text"></p><h2 id="type-xxx-int-与-type-xxx-int-区别"><a href="#type-xxx-int-与-type-xxx-int-区别" class="headerlink" title="type xxx int 与 type xxx = int 区别"></a>type xxx int 与 type xxx = int 区别</h2><p><code>type xxx int</code>只是取一个别名，类型元数据指向同一个</p><p><code>type xxx = int</code>会新建一个类型，指向不同的类型元数据</p><p><img src= "/img/loading.svg" data-lazy-src="https://raw.githubusercontent.com/SuperBigSniper/blogImg/master/20220417182531.png" alt="20220417182531"><br><img src= "/img/loading.svg" data-lazy-src="image-2.png" alt="alt text"></p><h1 id="空接口interface"><a href="#空接口interface" class="headerlink" title="空接口interface{}"></a>空接口interface{}</h1><p>空接口长下面这个样子</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> eface <span class="keyword">struct</span> &#123;</span><br><span class="line"> _type *_type</span><br><span class="line"> data  unsafe.Pointer</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>_type</code>就指向类型元数据</li><li><code>data</code>指向对应的值</li></ul><p>一个空接口元素，最开始两个值都为<code>nil</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> e <span class="keyword">interface</span>&#123;&#125; <span class="comment">// 此时 _type = nil, data = nil</span></span><br><span class="line">f, _ := os.Open(<span class="string">&quot;/tmp/test.txt&quot;</span>)</span><br><span class="line">e = f <span class="comment">// 此时就对元素进行赋值了,_type会指向f的类型元数据，data指向f的值</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.svg" data-lazy-src="https://raw.githubusercontent.com/SuperBigSniper/blogImg/master/20220417183259.png" alt="20220417183259"></p><h1 id="非空接口"><a href="#非空接口" class="headerlink" title="非空接口"></a>非空接口</h1><p>对于非空接口，必须实现接口中的所以方法和属性</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> iface <span class="keyword">struct</span> &#123;</span><br><span class="line"> tab  *itab</span><br><span class="line"> data unsafe.Pointer</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个<code>tab</code>指向<code>itab</code>类型</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// layout of Itab known to compilers</span></span><br><span class="line"><span class="comment">// allocated in non-garbage-collected memory</span></span><br><span class="line"><span class="comment">// Needs to be in sync with</span></span><br><span class="line"><span class="comment">// ../cmd/compile/internal/reflectdata/reflect.go:/^func.WriteTabs.</span></span><br><span class="line"><span class="keyword">type</span> itab <span class="keyword">struct</span> &#123;</span><br><span class="line"> inter *interfacetype <span class="comment">// 这个指向的是interface规定的需要实现的东西</span></span><br><span class="line"> _type *_type <span class="comment">// 这个指向实际上的类型</span></span><br><span class="line"> hash  <span class="type">uint32</span> <span class="comment">// copy of _type.hash. Used for type switches. 类型hash，用于快速判断两个类型是否相等</span></span><br><span class="line"> _     [<span class="number">4</span>]<span class="type">byte</span></span><br><span class="line">  <span class="comment">// 会将当前类型的方法地址拷贝到这里</span></span><br><span class="line"> fun   [<span class="number">1</span>]<span class="type">uintptr</span> <span class="comment">// variable sized. fun[0]==0 means _type does not implement inter. 方法地址数组</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> interfacetype <span class="keyword">struct</span> &#123;</span><br><span class="line"> typ     _type</span><br><span class="line"> pkgpath name <span class="comment">// 包路径</span></span><br><span class="line"> mhdr    []imethod <span class="comment">// 方法列表</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.svg" data-lazy-src="https://raw.githubusercontent.com/SuperBigSniper/blogImg/master/20220417184500.png" alt="20220417184500"></p><p>一个例子</p><p><img src= "/img/loading.svg" data-lazy-src="https://raw.githubusercontent.com/SuperBigSniper/blogImg/master/20220417184908.png" alt="20220417184908"></p><blockquote><p>注意 itab 只要inter与_type 确定了就不会改变了，所以go会去缓存itab</p></blockquote><h1 id="接口断言"><a href="#接口断言" class="headerlink" title="接口断言"></a>接口断言</h1><h2 id="首先是空接口-具体类型"><a href="#首先是空接口-具体类型" class="headerlink" title="首先是空接口.(具体类型)"></a>首先是<code>空接口.(具体类型)</code></h2><p>只需要判断，类型与<code>_type</code>的类型元数据是否相同即可</p><p><img src= "/img/loading.svg" data-lazy-src="https://raw.githubusercontent.com/SuperBigSniper/blogImg/master/20220417192951.png" alt="20220417192951"></p><h2 id="非空接口-具体类型"><a href="#非空接口-具体类型" class="headerlink" title="非空接口.(具体类型)"></a><code>非空接口.(具体类型)</code></h2><p>因为<code>itab</code>会被缓存，所以直接比较<code>itab</code>即可</p><p><img src= "/img/loading.svg" data-lazy-src="https://raw.githubusercontent.com/SuperBigSniper/blogImg/master/20220417193435.png" alt="20220417193435"></p><h2 id="空接口-非空接口"><a href="#空接口-非空接口" class="headerlink" title="空接口.(非空接口)"></a><code>空接口.(非空接口)</code></h2><p>原理同上, 如果没有初始值会被设置为对应类型的初始值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> e <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">rw, ok := e.(<span class="type">int</span>)</span><br><span class="line">fmt.Println(rw, ok)</span><br><span class="line"><span class="comment">// 0 false</span></span><br></pre></td></tr></table></figure><h2 id="非空接口-非空接口"><a href="#非空接口-非空接口" class="headerlink" title="非空接口.(非空接口)"></a><code>非空接口.(非空接口)</code></h2><p>同上</p>]]></content:encoded>
      
      
      <category domain="http://zhoujunxiong.gitee.com/categories/Go/">Go</category>
      
      
      <category domain="http://zhoujunxiong.gitee.com/tags/Go/">Go</category>
      
      
      <comments>http://zhoujunxiong.gitee.com/2022/04/17/GO/go%E4%B9%8B%E7%B1%BB%E5%9E%8B%E7%B3%BB%E7%BB%9F/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>go之error错误处理</title>
      <link>http://zhoujunxiong.gitee.com/2022/04/17/GO/go%E4%B9%8Berror%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</link>
      <guid>http://zhoujunxiong.gitee.com/2022/04/17/GO/go%E4%B9%8Berror%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</guid>
      <pubDate>Sun, 17 Apr 2022 12:27:24 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;定义一个错误&quot;&gt;&lt;a href=&quot;#定义一个错误&quot; class=&quot;headerlink&quot; title=&quot;定义一个错误&quot;&gt;&lt;/a&gt;定义一个错误&lt;/h1&gt;&lt;p&gt;&lt;code&gt;golang&lt;/code&gt;返回一个错误是很容易的，只要实现了&lt;code&gt;error&lt;/code&gt;</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="定义一个错误"><a href="#定义一个错误" class="headerlink" title="定义一个错误"></a>定义一个错误</h1><p><code>golang</code>返回一个错误是很容易的，只要实现了<code>error</code>方法就可以了</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="type">error</span> <span class="keyword">interface</span> &#123;</span><br><span class="line">    Error() <span class="type">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>golang</code>为我们提供了一个<code>errors</code>包，里面有一个<code>New</code>函数，可以快速创建一个错误</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">demo2</span><span class="params">()</span></span> (<span class="type">int</span>, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>, errors.New(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以一般的处理方式如下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> _ , err := demo2(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">    fmt.Println(err)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样做的问题是，如果错误在多层结构内抛出，比如3层，那么就需要一层一层返回，非常麻烦</p><h1 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h1><p>正确方式是把错误返回到顶部来处理</p><h2 id="方案一-结构体存起来"><a href="#方案一-结构体存起来" class="headerlink" title="方案一, 结构体存起来"></a>方案一, 结构体存起来</h2><p>将所有的错误先存到结构体的<code>error</code>字段中，然后最后来统一处理</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ZooTour <span class="keyword">interface</span> &#123;</span><br><span class="line">    Enter() <span class="type">error</span></span><br><span class="line">    VisitPanda(panda *Panda) <span class="type">error</span></span><br><span class="line">    Leave() <span class="type">error</span></span><br><span class="line">    Err() <span class="type">error</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Tour</span><span class="params">(t ZooTour, panda *Panda)</span></span> <span class="type">error</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 运行这些函数的时候，会把error都push到Err中</span></span><br><span class="line">    t.Enter()</span><br><span class="line">    t.VisitPanda(panda)</span><br><span class="line">    t.Leave()</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 集中编写业务逻辑代码,后统一处理error</span></span><br><span class="line">    <span class="keyword">if</span> err := t.Err(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> errors.WithMessage(err, <span class="string">&quot;ZooTour failed&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方案二，函数后置调用"><a href="#方案二，函数后置调用" class="headerlink" title="方案二，函数后置调用"></a>方案二，函数后置调用</h2><p>利用函数式编程延迟运行，相当于让调用方调用内部函数并获取错误</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Walker <span class="keyword">interface</span> &#123;</span><br><span class="line">    Next MyFunc</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> SliceWalker <span class="keyword">struct</span> &#123;</span><br><span class="line">    index <span class="type">int</span> </span><br><span class="line">    funs []MyFunc</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewEnterFunc</span><span class="params">()</span></span> MyFunc &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(t ZooTour)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> t.Enter()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BreakOnError</span><span class="params">(t ZooTour, walker Walker)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        f := walker.Next() </span><br><span class="line">        <span class="keyword">if</span> f == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> err := f(t); err := <span class="literal">nil</span> &#123;</span><br><span class="line">          <span class="comment">// 遇到错误break或者continue继续执行  </span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="打印堆栈"><a href="#打印堆栈" class="headerlink" title="打印堆栈"></a>打印堆栈</h2><p>我们可以使用<code>&quot;github.com/pkg/errors&quot;</code>这个包，使用<code>%+v</code>占位符即可打印堆栈错误</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/pkg/errors&quot;</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%+v&quot;</span>, GErrors.Wrap(<span class="type">error</span>, <span class="string">&quot;some error&quot;</span>))</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://zhoujunxiong.gitee.com/categories/Go/">Go</category>
      
      
      <category domain="http://zhoujunxiong.gitee.com/tags/Go/">Go</category>
      
      
      <comments>http://zhoujunxiong.gitee.com/2022/04/17/GO/go%E4%B9%8Berror%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
