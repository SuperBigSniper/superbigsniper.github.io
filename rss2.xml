<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Sniper</title>
    <link>http://zhoujunxiong.gitee.com/</link>
    
    <atom:link href="http://zhoujunxiong.gitee.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Wed, 04 May 2022 15:31:58 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>池化与puppeteer优化</title>
      <link>http://zhoujunxiong.gitee.com/2022/05/04/nodejs/%E6%B1%A0%E5%8C%96%E4%B8%8Epuppeteer%E4%BC%98%E5%8C%96/</link>
      <guid>http://zhoujunxiong.gitee.com/2022/05/04/nodejs/%E6%B1%A0%E5%8C%96%E4%B8%8Epuppeteer%E4%BC%98%E5%8C%96/</guid>
      <pubDate>Wed, 04 May 2022 00:14:08 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;puppeteer优化&quot;&gt;&lt;a href=&quot;#puppeteer优化&quot; class=&quot;headerlink&quot; title=&quot;puppeteer优化&quot;&gt;&lt;/a&gt;puppeteer优化&lt;/h2&gt;&lt;p&gt;因为使用&lt;code&gt;puppeteer&lt;/code&gt;进行截图，主要资</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="puppeteer优化"><a href="#puppeteer优化" class="headerlink" title="puppeteer优化"></a>puppeteer优化</h2><p>因为使用<code>puppeteer</code>进行截图，主要资源占用实际上是在<code>chrome</code></p><p>思路主要就是</p><ul><li>关闭无关的chrome功能</li><li>使用缓存</li></ul><p>缓存主要是集中在<code>chrome</code>实例与<code>tab</code>页实例的缓存</p><p>写了一个简单的基于<code>promise</code>的<code>pool</code>类</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Pool</span> &#123;</span><br><span class="line">    resolves = [];</span><br><span class="line">    <span class="title function_">notify</span>(<span class="params">page</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> reslove = <span class="variable language_">this</span>.<span class="property">resolves</span>.<span class="title function_">pop</span>();</span><br><span class="line">        <span class="title function_">reslove</span>(page);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">resolves</span>.<span class="title function_">push</span>(resolve);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pool = <span class="keyword">new</span> <span class="title class_">Pool</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从pool中获取实例</span></span><br><span class="line"><span class="keyword">if</span> (unusePagePond.<span class="property">length</span> == <span class="number">0</span>) &#123;</span><br><span class="line">    page = <span class="keyword">await</span> pool.<span class="title function_">get</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    page = unusePagePond.<span class="title function_">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 任务结束，放回去</span></span><br><span class="line"><span class="keyword">if</span> (pool.<span class="property">resolves</span>.<span class="property">length</span> != <span class="number">0</span>) &#123;</span><br><span class="line">    pool.<span class="title function_">notify</span>(page);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    unusePagePond.<span class="title function_">push</span>(page);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写的略微捡漏，主要有几个地方</p><ul><li>没有判断总数，会造成一直有promise进入队列，数量过大会导致内存泄漏</li><li>没有优先级判断</li><li>没有自动扩容，降配机制</li></ul><h2 id="使用-node-pool-对代码进行优化"><a href="#使用-node-pool-对代码进行优化" class="headerlink" title="使用 node-pool 对代码进行优化"></a>使用 node-pool 对代码进行优化</h2><p>虽然仓库的名称叫<code>node-pool</code>，但是实际上这个库安装的时候叫<code>generic-pool</code></p><h3 id="node-pool-源码学习"><a href="#node-pool-源码学习" class="headerlink" title="node-pool 源码学习"></a>node-pool 源码学习</h3><h4 id="入口文件"><a href="#入口文件" class="headerlink" title="入口文件"></a>入口文件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通用池</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Pool</span> = <span class="built_in">require</span>(<span class="string">&quot;./lib/Pool&quot;</span>)</span><br><span class="line"><span class="comment">// 双端队列</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Deque</span> = <span class="built_in">require</span>(<span class="string">&quot;./lib/Deque&quot;</span>)</span><br><span class="line"><span class="comment">// 优先队列</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">PriorityQueue</span> = <span class="built_in">require</span>(<span class="string">&quot;./lib/PriorityQueue&quot;</span>)</span><br><span class="line"><span class="comment">// 默认回收器</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">DefaultEvictor</span> = <span class="built_in">require</span>(<span class="string">&quot;./lib/DefaultEvictor&quot;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="title class_">Pool</span>: <span class="title class_">Pool</span>,</span><br><span class="line">  <span class="title class_">Deque</span>: <span class="title class_">Deque</span>,</span><br><span class="line">  <span class="title class_">PriorityQueue</span>: <span class="title class_">PriorityQueue</span>,</span><br><span class="line">  <span class="title class_">DefaultEvictor</span>: <span class="title class_">DefaultEvictor</span>,</span><br><span class="line">  <span class="attr">createPool</span>: <span class="keyword">function</span> (<span class="params">factory, config</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Pool</span>(<span class="title class_">DefaultEvictor</span>, <span class="title class_">Deque</span>, <span class="title class_">PriorityQueue</span>, factory, config)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="DefaultEvictor"><a href="#DefaultEvictor" class="headerlink" title="DefaultEvictor"></a>DefaultEvictor</h4><p><code>DefaultEvictor</code>类只提供了一个方法<code>evict</code>来实现对象的回收。</p><p>返回<code>true</code>与<code>false</code>表示是否需要回收对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DefaultEvictor</span> &#123;</span><br><span class="line">  <span class="title function_">evict</span>(<span class="params">config, pooledResource, availableObjectsCount</span>) &#123;</span><br><span class="line">    <span class="comment">// 计算空闲时间</span></span><br><span class="line">    <span class="keyword">const</span> idleTime = <span class="title class_">Date</span>.<span class="title function_">now</span>() - pooledResource.<span class="property">lastIdleTime</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据配置，计算是否到达最大空闲时间</span></span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      config.<span class="property">softIdleTimeoutMillis</span> &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">      config.<span class="property">softIdleTimeoutMillis</span> &lt; idleTime &amp;&amp;</span><br><span class="line">      config.<span class="property">min</span> &lt; availableObjectsCount</span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (config.<span class="property">idleTimeoutMillis</span> &lt; idleTime) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">DefaultEvictor</span></span><br></pre></td></tr></table></figure><h4 id="Deque-双端队列"><a href="#Deque-双端队列" class="headerlink" title="Deque 双端队列"></a>Deque 双端队列</h4><p><code>Deque</code>会稍微复杂一些，但其实就是实现了一个 js 版本的双向链表</p><p>并且实现了迭代功能，支持<code>for of</code>迭代。</p><blockquote><p>现在还不是很理解为啥不使用 js 原生的数组</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// DoublyLinkedList是一个双向链表</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">DoublyLinkedList</span> = <span class="built_in">require</span>(<span class="string">&quot;./DoublyLinkedList&quot;</span>)</span><br><span class="line"><span class="comment">// 用于迭代双向链表的迭代器</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">DequeIterator</span> = <span class="built_in">require</span>(<span class="string">&quot;./DequeIterator&quot;</span>)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * DoublyLinkedList backed double ended queue</span></span><br><span class="line"><span class="comment"> * implements just enough to keep the Pool</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Deque</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_list</span> = <span class="keyword">new</span> <span class="title class_">DoublyLinkedList</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * removes and returns the first element from the queue</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> &#123;<span class="type">any</span>&#125; [description]</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">shift</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">undefined</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> node = <span class="variable language_">this</span>.<span class="property">_list</span>.<span class="property">head</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_list</span>.<span class="title function_">remove</span>(node)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> node.<span class="property">data</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * adds one elemts to the beginning of the queue</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span>  &#123;<span class="type">any</span>&#125; element [description]</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> &#123;<span class="type">any</span>&#125;         [description]</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">unshift</span>(<span class="params">element</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> node = <span class="title class_">DoublyLinkedList</span>.<span class="title function_">createNode</span>(element)</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_list</span>.<span class="title function_">insertBeginning</span>(node)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * adds one to the end of the queue</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span>  &#123;<span class="type">any</span>&#125; element [description]</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> &#123;<span class="type">any</span>&#125;         [description]</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">push</span>(<span class="params">element</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> node = <span class="title class_">DoublyLinkedList</span>.<span class="title function_">createNode</span>(element)</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_list</span>.<span class="title function_">insertEnd</span>(node)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * removes and returns the last element from the queue</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">pop</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">undefined</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> node = <span class="variable language_">this</span>.<span class="property">_list</span>.<span class="property">tail</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_list</span>.<span class="title function_">remove</span>(node)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> node.<span class="property">data</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DequeIterator</span>(<span class="variable language_">this</span>.<span class="property">_list</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">iterator</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DequeIterator</span>(<span class="variable language_">this</span>.<span class="property">_list</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">reverseIterator</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DequeIterator</span>(<span class="variable language_">this</span>.<span class="property">_list</span>, <span class="literal">true</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * get a reference to the item at the head of the queue</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> &#123;<span class="type">any</span>&#125; [description]</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">head</span>() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">undefined</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> node = <span class="variable language_">this</span>.<span class="property">_list</span>.<span class="property">head</span></span><br><span class="line">    <span class="keyword">return</span> node.<span class="property">data</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * get a reference to the item at the tail of the queue</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> &#123;<span class="type">any</span>&#125; [description]</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">tail</span>() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">undefined</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> node = <span class="variable language_">this</span>.<span class="property">_list</span>.<span class="property">tail</span></span><br><span class="line">    <span class="keyword">return</span> node.<span class="property">data</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">length</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_list</span>.<span class="property">length</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">Deque</span></span><br></pre></td></tr></table></figure><h4 id="PriorityQueue-优先队列"><a href="#PriorityQueue-优先队列" class="headerlink" title="PriorityQueue 优先队列"></a>PriorityQueue 优先队列</h4><p>本来以为是一个大顶堆实现的优先队列，实际上是通过一个数组，下标表示优先级</p><p>数组每一项，存放不同优先级的任务，是一个双端队列</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Queue</span> = <span class="built_in">require</span>(<span class="string">&quot;./Queue&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@class</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@private</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PriorityQueue</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">size</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_size</span> = <span class="title class_">Math</span>.<span class="title function_">max</span>(+size | <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="comment">/** <span class="doctag">@type</span> &#123;<span class="type">Queue[]</span>&#125; */</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_slots</span> = []</span><br><span class="line">    <span class="comment">// initialize arrays to hold queue elements</span></span><br><span class="line">    <span class="comment">// 每一项都会初始化一个双端队列</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">_size</span>; i++) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_slots</span>.<span class="title function_">push</span>(<span class="keyword">new</span> <span class="title class_">Queue</span>())</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">length</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> _length = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, slots = <span class="variable language_">this</span>.<span class="property">_slots</span>.<span class="property">length</span>; i &lt; slots; i++) &#123;</span><br><span class="line">      _length += <span class="variable language_">this</span>.<span class="property">_slots</span>[i].<span class="property">length</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _length</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">enqueue</span>(<span class="params">obj, priority</span>) &#123;</span><br><span class="line">    <span class="comment">// Convert to integer with a default value of 0.</span></span><br><span class="line">    priority = (priority &amp;&amp; +priority | <span class="number">0</span>) || <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (priority) &#123;</span><br><span class="line">      <span class="keyword">if</span> (priority &lt; <span class="number">0</span> || priority &gt;= <span class="variable language_">this</span>.<span class="property">_size</span>) &#123;</span><br><span class="line">        priority = <span class="variable language_">this</span>.<span class="property">_size</span> - <span class="number">1</span></span><br><span class="line">        <span class="comment">// put obj at the end of the line</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_slots</span>[priority].<span class="title function_">push</span>(obj)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">dequeue</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, sl = <span class="variable language_">this</span>.<span class="property">_slots</span>.<span class="property">length</span>; i &lt; sl; i += <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">_slots</span>[i].<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_slots</span>[i].<span class="title function_">shift</span>()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">head</span>() &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, sl = <span class="variable language_">this</span>.<span class="property">_slots</span>.<span class="property">length</span>; i &lt; sl; i += <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">_slots</span>[i].<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_slots</span>[i].<span class="property">head</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">tail</span>() &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="variable language_">this</span>.<span class="property">_slots</span>.<span class="property">length</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">_slots</span>[i].<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_slots</span>[i].<span class="property">tail</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">PriorityQueue</span></span><br></pre></td></tr></table></figure><h4 id="Pool-对象池"><a href="#Pool-对象池" class="headerlink" title="Pool 对象池"></a>Pool 对象池</h4><p>最后当然是我们最核心的<code>pool</code>生成方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Pool</span> <span class="keyword">extends</span> <span class="title class_ inherited__">EventEmitter</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>因为<code>pool</code>是基础<code>EventEmitter</code>的，所以它的实例是支持时间发布订阅的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="title function_">listenerCount</span>(<span class="attr">emitter</span>: <span class="title class_">EventEmitter</span>, <span class="attr">event</span>: string | symbol): number; <span class="comment">// deprecated</span></span><br><span class="line"><span class="keyword">static</span> <span class="attr">defaultMaxListeners</span>: number;</span><br><span class="line"></span><br><span class="line"><span class="title function_">addListener</span>(<span class="attr">event</span>: string | symbol, <span class="attr">listener</span>: <span class="function">(<span class="params">...args: any[]</span>) =&gt;</span> <span class="keyword">void</span>): <span class="variable language_">this</span>;</span><br><span class="line"><span class="title function_">on</span>(<span class="attr">event</span>: string | symbol, <span class="attr">listener</span>: <span class="function">(<span class="params">...args: any[]</span>) =&gt;</span> <span class="keyword">void</span>): <span class="variable language_">this</span>;</span><br><span class="line"><span class="title function_">once</span>(<span class="attr">event</span>: string | symbol, <span class="attr">listener</span>: <span class="function">(<span class="params">...args: any[]</span>) =&gt;</span> <span class="keyword">void</span>): <span class="variable language_">this</span>;</span><br><span class="line"><span class="title function_">prependListener</span>(<span class="attr">event</span>: string | symbol, <span class="attr">listener</span>: <span class="function">(<span class="params">...args: any[]</span>) =&gt;</span> <span class="keyword">void</span>): <span class="variable language_">this</span>;</span><br><span class="line"><span class="title function_">prependOnceListener</span>(<span class="attr">event</span>: string | symbol, <span class="attr">listener</span>: <span class="function">(<span class="params">...args: any[]</span>) =&gt;</span> <span class="keyword">void</span>): <span class="variable language_">this</span>;</span><br><span class="line"><span class="title function_">removeListener</span>(<span class="attr">event</span>: string | symbol, <span class="attr">listener</span>: <span class="function">(<span class="params">...args: any[]</span>) =&gt;</span> <span class="keyword">void</span>): <span class="variable language_">this</span>;</span><br><span class="line"><span class="title function_">removeAllListeners</span>(event?: string | symbol): <span class="variable language_">this</span>;</span><br><span class="line"><span class="title function_">setMaxListeners</span>(<span class="attr">n</span>: number): <span class="variable language_">this</span>;</span><br><span class="line"><span class="title function_">getMaxListeners</span>(): number;</span><br><span class="line"><span class="title function_">listeners</span>(<span class="attr">event</span>: string | symbol): <span class="title class_">Function</span>[];</span><br><span class="line"><span class="title function_">emit</span>(<span class="attr">event</span>: string | symbol, ...<span class="attr">args</span>: any[]): boolean;</span><br><span class="line"><span class="title function_">eventNames</span>(): <span class="title class_">Array</span>&lt;string | symbol&gt;;</span><br><span class="line"><span class="title function_">listenerCount</span>(<span class="attr">type</span>: string | symbol): number;</span><br></pre></td></tr></table></figure><p>接下来我们可以看一下构造函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">constructor</span>(<span class="params">Evictor, Deque, PriorityQueue, factory, options</span>) &#123;</span><br><span class="line">  <span class="variable language_">super</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 验证工厂函数是否符合规范</span></span><br><span class="line">  <span class="title function_">factoryValidator</span>(factory);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将选项与默认选项进行合并</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">_config</span> = <span class="keyword">new</span> <span class="title class_">PoolOptions</span>(options);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> fix up this ugly glue-ing</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">_Promise</span> = <span class="variable language_">this</span>.<span class="property">_config</span>.<span class="property">Promise</span>;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">_factory</span> = factory;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">_draining</span> = <span class="literal">false</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">_started</span> = <span class="literal">false</span>;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Holds waiting clients</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@type</span> &#123;<span class="type">PriorityQueue</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="comment">// 等待的客户端队列</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">_waitingClientsQueue</span> = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="variable language_">this</span>.<span class="property">_config</span>.<span class="property">priorityRange</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Collection of promises for resource creation calls made by the pool to factory.create</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@type</span> &#123;<span class="type">Set</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">_factoryCreateOperations</span> = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Collection of promises for resource destruction calls made by the pool to factory.destroy</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@type</span> &#123;<span class="type">Set</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">_factoryDestroyOperations</span> = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * A queue/stack of pooledResources awaiting acquisition</span></span><br><span class="line"><span class="comment">   * <span class="doctag">TODO:</span> replace with LinkedList backed array</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@type</span> &#123;<span class="type">Deque</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">_availableObjects</span> = <span class="keyword">new</span> <span class="title class_">Deque</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Collection of references for any resource that are undergoing validation before being acquired</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@type</span> &#123;<span class="type">Set</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">_testOnBorrowResources</span> = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Collection of references for any resource that are undergoing validation before being returned</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@type</span> &#123;<span class="type">Set</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">_testOnReturnResources</span> = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Collection of promises for any validations currently in process</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@type</span> &#123;<span class="type">Set</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">_validationOperations</span> = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * All objects associated with this pool in any state (except destroyed)</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@type</span> &#123;<span class="type">Set</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">_allObjects</span> = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Loans keyed by the borrowed resource</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@type</span> &#123;<span class="type">Map</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">_resourceLoans</span> = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Infinitely looping iterator over available object</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@type</span> &#123;<span class="type">DequeIterator</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">_evictionIterator</span> = <span class="variable language_">this</span>.<span class="property">_availableObjects</span>.<span class="title function_">iterator</span>();</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">_evictor</span> = <span class="keyword">new</span> <span class="title class_">Evictor</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * handle for setTimeout for next eviction run</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@type</span> &#123;<span class="type">(number|null)</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">_scheduledEviction</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// create initial resources (if factory.min &gt; 0)</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">_config</span>.<span class="property">autostart</span> === <span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">start</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>acquire</code>也是一个核心方法，它的实现如下</p><p><code>acquire</code>和我之前的实现的原理差不多是一样的，就是会<code>new</code>一个新的<code>Promise</code>，放在<code>_waitingClientsQueue</code>中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">acquire</span>(<span class="params">priority</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">_started</span> === <span class="literal">false</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">_config</span>.<span class="property">autostart</span> === <span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">start</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">_draining</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_Promise</span>.<span class="title function_">reject</span>(</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;pool is draining and cannot accept work&quot;</span>)</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> should we defer this check till after this event loop incase &quot;the situation&quot; changes in the meantime</span></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">spareResourceCapacity</span> &lt; <span class="number">1</span> &amp;&amp;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_availableObjects</span>.<span class="property">length</span> &lt; <span class="number">1</span> &amp;&amp;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_config</span>.<span class="property">maxWaitingClients</span> !== <span class="literal">undefined</span> &amp;&amp;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_waitingClientsQueue</span>.<span class="property">length</span> &gt;= <span class="variable language_">this</span>.<span class="property">_config</span>.<span class="property">maxWaitingClients</span></span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_Promise</span>.<span class="title function_">reject</span>(</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;max waitingClients count exceeded&quot;</span>)</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> resourceRequest = <span class="keyword">new</span> <span class="title class_">ResourceRequest</span>(</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_config</span>.<span class="property">acquireTimeoutMillis</span>,</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_Promise</span></span><br><span class="line">  );</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">_waitingClientsQueue</span>.<span class="title function_">enqueue</span>(resourceRequest, priority);</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">_dispense</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> resourceRequest.<span class="property">promise</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回之前调用了<code>_dispense</code>方法, 主要先判断队列中有多少个等待, 没有说明现在没有任务</p><p>反之，判断当前是否达到最大实例数量，没有就调用<code>_createResource</code>创建对应的实例</p><p>然后让可以调用的数量进行<code>dispatch</code></p><p>从<code>_availableObjects</code>中取出可用的对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">_dispense</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Local variables for ease of reading/writing</span></span><br><span class="line"><span class="comment">   * these don&#x27;t (shouldn&#x27;t) change across the execution of this fn</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">const</span> numWaitingClients = <span class="variable language_">this</span>.<span class="property">_waitingClientsQueue</span>.<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// If there aren&#x27;t any waiting requests then there is nothing to do</span></span><br><span class="line">  <span class="comment">// so lets short-circuit</span></span><br><span class="line">  <span class="keyword">if</span> (numWaitingClients &lt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> resourceShortfall =</span><br><span class="line">    numWaitingClients - <span class="variable language_">this</span>.<span class="property">_potentiallyAllocableResourceCount</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> actualNumberOfResourcesToCreate = <span class="title class_">Math</span>.<span class="title function_">min</span>(</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">spareResourceCapacity</span>,</span><br><span class="line">    resourceShortfall</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; actualNumberOfResourcesToCreate &gt; i; i++) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">_createResource</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// If we are doing test-on-borrow see how many more resources need to be moved into test</span></span><br><span class="line">  <span class="comment">// to help satisfy waitingClients</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">_config</span>.<span class="property">testOnBorrow</span> === <span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="comment">// how many available resources do we need to shift into test</span></span><br><span class="line">    <span class="keyword">const</span> desiredNumberOfResourcesToMoveIntoTest =</span><br><span class="line">      numWaitingClients - <span class="variable language_">this</span>.<span class="property">_testOnBorrowResources</span>.<span class="property">size</span>;</span><br><span class="line">    <span class="keyword">const</span> actualNumberOfResourcesToMoveIntoTest = <span class="title class_">Math</span>.<span class="title function_">min</span>(</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_availableObjects</span>.<span class="property">length</span>,</span><br><span class="line">      desiredNumberOfResourcesToMoveIntoTest</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; actualNumberOfResourcesToMoveIntoTest &gt; i; i++) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">_testOnBorrow</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// if we aren&#x27;t testing-on-borrow then lets try to allocate what we can</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">_config</span>.<span class="property">testOnBorrow</span> === <span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> actualNumberOfResourcesToDispatch = <span class="title class_">Math</span>.<span class="title function_">min</span>(</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_availableObjects</span>.<span class="property">length</span>,</span><br><span class="line">      numWaitingClients</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; actualNumberOfResourcesToDispatch &gt; i; i++) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">_dispatchResource</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://zhoujunxiong.gitee.com/categories/nodejs/">nodejs</category>
      
      
      <category domain="http://zhoujunxiong.gitee.com/tags/nodejs/">nodejs</category>
      
      <category domain="http://zhoujunxiong.gitee.com/tags/JavaScript/">JavaScript</category>
      
      <category domain="http://zhoujunxiong.gitee.com/tags/puppeteer/">puppeteer</category>
      
      
      <comments>http://zhoujunxiong.gitee.com/2022/05/04/nodejs/%E6%B1%A0%E5%8C%96%E4%B8%8Epuppeteer%E4%BC%98%E5%8C%96/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>go学习笔记</title>
      <link>http://zhoujunxiong.gitee.com/2022/04/17/GO/go%E4%B9%8B%E7%B1%BB%E5%9E%8B%E7%B3%BB%E7%BB%9F/</link>
      <guid>http://zhoujunxiong.gitee.com/2022/04/17/GO/go%E4%B9%8B%E7%B1%BB%E5%9E%8B%E7%B3%BB%E7%BB%9F/</guid>
      <pubDate>Sun, 17 Apr 2022 12:27:24 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;类型元数据&quot;&gt;&lt;a href=&quot;#类型元数据&quot; class=&quot;headerlink&quot; title=&quot;类型元数据&quot;&gt;&lt;/a&gt;类型元数据&lt;/h1&gt;&lt;p&gt;在&lt;code&gt;runtime&lt;/code&gt;包中，类型信息包含2-3层&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一层就是公共头he</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="类型元数据"><a href="#类型元数据" class="headerlink" title="类型元数据"></a>类型元数据</h1><p>在<code>runtime</code>包中，类型信息包含2-3层</p><ul><li>第一层就是公共头header（type）</li><li>第二层就是各自不同类型信息的body</li><li>第三层是只有自定义包才有的，用来存储包信息</li></ul><p>公共头信息</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> _type <span class="keyword">struct</span> &#123;</span><br><span class="line">size       <span class="type">uintptr</span></span><br><span class="line">ptrdata    <span class="type">uintptr</span> <span class="comment">// size of memory prefix holding all pointers</span></span><br><span class="line">hash       <span class="type">uint32</span></span><br><span class="line">tflag      tflag</span><br><span class="line">align      <span class="type">uint8</span></span><br><span class="line">fieldAlign <span class="type">uint8</span></span><br><span class="line">kind       <span class="type">uint8</span></span><br><span class="line"><span class="comment">// function for comparing objects of this type</span></span><br><span class="line"><span class="comment">// (ptr to object A, ptr to object B) -&gt; ==?</span></span><br><span class="line">equal <span class="function"><span class="keyword">func</span><span class="params">(unsafe.Pointer, unsafe.Pointer)</span></span> <span class="type">bool</span></span><br><span class="line"><span class="comment">// gcdata stores the GC type data for the garbage collector.</span></span><br><span class="line"><span class="comment">// If the KindGCProg bit is set in kind, gcdata is a GC program.</span></span><br><span class="line"><span class="comment">// Otherwise it is a ptrmask bitmap. See mbitmap.go for details.</span></span><br><span class="line">gcdata    *<span class="type">byte</span></span><br><span class="line">str       nameOff</span><br><span class="line">ptrToThis typeOff</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如: slice类型</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> slicetype <span class="keyword">struct</span> &#123;</span><br><span class="line">typ  _type</span><br><span class="line">elem *_type <span class="comment">// 指向对应类型的type，例如 []string类型指向stringtype</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三层是</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> uncommontype <span class="keyword">struct</span> &#123;</span><br><span class="line">pkgpath nameOff <span class="comment">// 包路径</span></span><br><span class="line">mcount  <span class="type">uint16</span> <span class="comment">// number of methods 方法数量</span></span><br><span class="line">xcount  <span class="type">uint16</span> <span class="comment">// number of exported methods 暴露的方法数量</span></span><br><span class="line">moff    <span class="type">uint32</span> <span class="comment">// offset from this uncommontype to [mcount]method 从这个uncommontype开始到方法数组的偏移量</span></span><br><span class="line">_       <span class="type">uint32</span> <span class="comment">// unused </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/SuperBigSniper/blogImg/master/20220417182255.png" alt="20220417182255"></p><h2 id="type-xxx-int-与-type-xxx-int-区别"><a href="#type-xxx-int-与-type-xxx-int-区别" class="headerlink" title="type xxx int 与 type xxx = int 区别"></a>type xxx int 与 type xxx = int 区别</h2><p><code>type xxx int</code>只是取一个别名，类型元数据指向同一个</p><p><code>type xxx = int</code>会新建一个类型，指向不同的类型元数据</p><p><img src="https://raw.githubusercontent.com/SuperBigSniper/blogImg/master/20220417182531.png" alt="20220417182531"></p><h1 id="空接口interface"><a href="#空接口interface" class="headerlink" title="空接口interface{}"></a>空接口interface{}</h1><p>空接口长下面这个样子</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> eface <span class="keyword">struct</span> &#123;</span><br><span class="line">_type *_type</span><br><span class="line">data  unsafe.Pointer</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>_type</code>就指向类型元数据</li><li><code>data</code>指向对应的值</li></ul><p>一个空接口元素，最开始两个值都为<code>nil</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> e <span class="keyword">interface</span>&#123;&#125; <span class="comment">// 此时 _type = nil, data = nil</span></span><br><span class="line">f, _ := os.Open(<span class="string">&quot;/tmp/test.txt&quot;</span>)</span><br><span class="line">e = f <span class="comment">// 此时就对元素进行赋值了,_type会指向f的类型元数据，data指向f的值</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/SuperBigSniper/blogImg/master/20220417183259.png" alt="20220417183259"></p><h1 id="非空接口"><a href="#非空接口" class="headerlink" title="非空接口"></a>非空接口</h1><p>对于非空接口，必须实现接口中的所以方法和属性</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> iface <span class="keyword">struct</span> &#123;</span><br><span class="line">tab  *itab</span><br><span class="line">data unsafe.Pointer</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个<code>tab</code>指向<code>itab</code>类型</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// layout of Itab known to compilers</span></span><br><span class="line"><span class="comment">// allocated in non-garbage-collected memory</span></span><br><span class="line"><span class="comment">// Needs to be in sync with</span></span><br><span class="line"><span class="comment">// ../cmd/compile/internal/reflectdata/reflect.go:/^func.WriteTabs.</span></span><br><span class="line"><span class="keyword">type</span> itab <span class="keyword">struct</span> &#123;</span><br><span class="line">inter *interfacetype <span class="comment">// 这个指向的是interface规定的需要实现的东西</span></span><br><span class="line">_type *_type <span class="comment">// 这个指向实际上的类型</span></span><br><span class="line">hash  <span class="type">uint32</span> <span class="comment">// copy of _type.hash. Used for type switches. 类型hash，用于快速判断两个类型是否相等</span></span><br><span class="line">_     [<span class="number">4</span>]<span class="type">byte</span></span><br><span class="line">  <span class="comment">// 会将当前类型的方法地址拷贝到这里</span></span><br><span class="line">fun   [<span class="number">1</span>]<span class="type">uintptr</span> <span class="comment">// variable sized. fun[0]==0 means _type does not implement inter. 方法地址数组</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> interfacetype <span class="keyword">struct</span> &#123;</span><br><span class="line">typ     _type</span><br><span class="line">pkgpath name <span class="comment">// 包路径</span></span><br><span class="line">mhdr    []imethod <span class="comment">// 方法列表</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/SuperBigSniper/blogImg/master/20220417184500.png" alt="20220417184500"></p><p>一个例子</p><p><img src="https://raw.githubusercontent.com/SuperBigSniper/blogImg/master/20220417184908.png" alt="20220417184908"></p><blockquote><p>注意 itab 只要inter与_type 确定了就不会改变了，所以go会去缓存itab</p></blockquote><h1 id="接口断言"><a href="#接口断言" class="headerlink" title="接口断言"></a>接口断言</h1><h2 id="首先是空接口-具体类型"><a href="#首先是空接口-具体类型" class="headerlink" title="首先是空接口.(具体类型)"></a>首先是<code>空接口.(具体类型)</code></h2><p>只需要判断，类型与<code>_type</code>的类型元数据是否相同即可</p><p><img src="https://raw.githubusercontent.com/SuperBigSniper/blogImg/master/20220417192951.png" alt="20220417192951"></p><h2 id="非空接口-具体类型"><a href="#非空接口-具体类型" class="headerlink" title="非空接口.(具体类型)"></a><code>非空接口.(具体类型)</code></h2><p>因为<code>itab</code>会被缓存，所以直接比较<code>itab</code>即可</p><p><img src="https://raw.githubusercontent.com/SuperBigSniper/blogImg/master/20220417193435.png" alt="20220417193435"></p><h2 id="空接口-非空接口"><a href="#空接口-非空接口" class="headerlink" title="空接口.(非空接口)"></a><code>空接口.(非空接口)</code></h2><p>原理同上, 如果没有初始值会被设置为对应类型的初始值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> e <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">rw, ok := e.(<span class="type">int</span>)</span><br><span class="line">fmt.Println(rw, ok)</span><br><span class="line"><span class="comment">// 0 false</span></span><br></pre></td></tr></table></figure><h2 id="非空接口-非空接口"><a href="#非空接口-非空接口" class="headerlink" title="非空接口.(非空接口)"></a><code>非空接口.(非空接口)</code></h2><p>同上</p>]]></content:encoded>
      
      
      <category domain="http://zhoujunxiong.gitee.com/categories/Go/">Go</category>
      
      
      <category domain="http://zhoujunxiong.gitee.com/tags/Go/">Go</category>
      
      
      <comments>http://zhoujunxiong.gitee.com/2022/04/17/GO/go%E4%B9%8B%E7%B1%BB%E5%9E%8B%E7%B3%BB%E7%BB%9F/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>pm2</title>
      <link>http://zhoujunxiong.gitee.com/2022/04/01/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/pm2/</link>
      <guid>http://zhoujunxiong.gitee.com/2022/04/01/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/pm2/</guid>
      <pubDate>Fri, 01 Apr 2022 00:14:08 GMT</pubDate>
      
        
        
      <description>&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=</description>
        
      
      
      
      <content:encoded><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">pm2 start app.js              <span class="comment"># 启动app.js应用程序</span></span><br><span class="line">pm2 start app.js -i 4         <span class="comment"># cluster mode 模式启动4个app.js的应用实例     # 4个应用程序会自动进行负载均衡</span></span><br><span class="line">pm2 start app.js --name=<span class="string">&quot;api&quot;</span> <span class="comment"># 启动应用程序并命名为 &quot;api&quot;</span></span><br><span class="line">pm2 start app.js --watch      <span class="comment"># 当文件变化时自动重启应用</span></span><br><span class="line">pm2 start script.sh           <span class="comment"># 启动 bash 脚本</span></span><br><span class="line">pm2 list                      <span class="comment"># 列表 PM2 启动的所有的应用程序</span></span><br><span class="line">pm2 monit                     <span class="comment"># 显示每个应用程序的CPU和内存占用情况</span></span><br><span class="line">pm2 show [app-name]           <span class="comment"># 显示应用程序的所有信息</span></span><br><span class="line">pm2 logs                      <span class="comment"># 显示所有应用程序的日志</span></span><br><span class="line">pm2 logs [app-name]           <span class="comment"># 显示指定应用程序的日志</span></span><br><span class="line">pm2 stop all                  <span class="comment"># 停止所有的应用程序</span></span><br><span class="line">pm2 stop 0                    <span class="comment"># 停止 id为 0的指定应用程序</span></span><br><span class="line">pm2 restart all               <span class="comment"># 重启所有应用</span></span><br><span class="line">pm2 reload all                <span class="comment"># 重启 cluster mode下的所有应用</span></span><br><span class="line">pm2 gracefulReload all        <span class="comment"># Graceful reload all apps in cluster mode</span></span><br><span class="line">pm2 delete all                <span class="comment"># 关闭并删除所有应用</span></span><br><span class="line">pm2 delete 0                  <span class="comment"># 删除指定应用 id 0</span></span><br><span class="line">pm2 scale api 10              <span class="comment"># 把名字叫api的应用扩展到10个实例</span></span><br><span class="line">pm2 reset [app-name]          <span class="comment"># 重置重启数量</span></span><br><span class="line">pm2 startup                   <span class="comment"># 创建开机自启动命令</span></span><br><span class="line">pm2 save                      <span class="comment"># 保存当前应用列表</span></span><br><span class="line">pm2 resurrect                 <span class="comment"># 重新加载保存的应用列表</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://zhoujunxiong.gitee.com/categories/nodejs/">nodejs</category>
      
      
      <category domain="http://zhoujunxiong.gitee.com/tags/nodejs/">nodejs</category>
      
      <category domain="http://zhoujunxiong.gitee.com/tags/JavaScript/">JavaScript</category>
      
      <category domain="http://zhoujunxiong.gitee.com/tags/pm2/">pm2</category>
      
      
      <comments>http://zhoujunxiong.gitee.com/2022/04/01/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/pm2/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>koa源码再读</title>
      <link>http://zhoujunxiong.gitee.com/2022/03/26/nodejs/koa%E6%BA%90%E7%A0%81%E5%86%8D%E8%AF%BB/</link>
      <guid>http://zhoujunxiong.gitee.com/2022/03/26/nodejs/koa%E6%BA%90%E7%A0%81%E5%86%8D%E8%AF%BB/</guid>
      <pubDate>Sat, 26 Mar 2022 01:39:44 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;为什么要读？&quot;&gt;&lt;a href=&quot;#为什么要读？&quot; class=&quot;headerlink&quot; title=&quot;为什么要读？&quot;&gt;&lt;/a&gt;为什么要读？&lt;/h2&gt;&lt;p&gt;&lt;code&gt;koa&lt;/code&gt;作为一微框架，有许多可以值得我们学习的地方，并且代码也是非常精炼的&lt;/p&gt;
</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="为什么要读？"><a href="#为什么要读？" class="headerlink" title="为什么要读？"></a>为什么要读？</h2><p><code>koa</code>作为一微框架，有许多可以值得我们学习的地方，并且代码也是非常精炼的</p><p>其中中间件模式与context上下文的实现也是非常值得我们学习的，并且应用也是非常广泛的</p><p>通过源码学习我们可以学到更多的细节的东西，在之后自己的工作也可以借用这些思想</p><h2 id="整体概览与目录结构"><a href="#整体概览与目录结构" class="headerlink" title="整体概览与目录结构"></a>整体概览与目录结构</h2><p><code>koa</code>的源码文件很少，只包含4个</p><ul><li>application 应用核心</li><li>context koa的上下文ctx</li><li>request koa包装的req</li><li>response koa包装的res</li></ul><p>还有一些其它的<code>docs</code>等等, 都不是我们关注的重点</p><h3 id="Application"><a href="#Application" class="headerlink" title="Application"></a>Application</h3><p><code>Application</code>是一个非常精简的类，包含下面的方法</p><ul><li>listen</li><li>use</li><li>toJSON</li><li>inspect</li><li>callback</li><li>handleRequest</li><li>createContext</li><li>onerror</li></ul><p>这些都是什么作用呢，我们通过构造函数开始看起</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">constructor</span> (options) &#123;</span><br><span class="line">  <span class="variable language_">super</span>()</span><br><span class="line">  options = options || &#123;&#125;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">proxy</span> = options.<span class="property">proxy</span> || <span class="literal">false</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">subdomainOffset</span> = options.<span class="property">subdomainOffset</span> || <span class="number">2</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">proxyIpHeader</span> = options.<span class="property">proxyIpHeader</span> || <span class="string">&#x27;X-Forwarded-For&#x27;</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">maxIpsCount</span> = options.<span class="property">maxIpsCount</span> || <span class="number">0</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">env</span> = options.<span class="property">env</span> || process.<span class="property">env</span>.<span class="property">NODE_ENV</span> || <span class="string">&#x27;development&#x27;</span></span><br><span class="line">  <span class="keyword">if</span> (options.<span class="property">keys</span>) <span class="variable language_">this</span>.<span class="property">keys</span> = options.<span class="property">keys</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">middleware</span> = []</span><br><span class="line">  <span class="comment">// 非常重要</span></span><br><span class="line">  <span class="comment">// 创建了，三个对象，分别继承了其它的三个文件</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">context</span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(context)</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">request</span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(request)</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">response</span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(response)</span><br><span class="line">  <span class="comment">// util.inspect.custom support for node 6+</span></span><br><span class="line">  <span class="comment">/* istanbul ignore else */</span></span><br><span class="line">  <span class="keyword">if</span> (util.<span class="property">inspect</span>.<span class="property">custom</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>[util.<span class="property">inspect</span>.<span class="property">custom</span>] = <span class="variable language_">this</span>.<span class="property">inspect</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中最重要的就是创建了<code>context</code>, <code>request</code>, <code>response</code>三个对象</p><p>这个时候我们在回忆一下，<code>koa</code>的使用方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Koa</span> = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  ctx.<span class="property">body</span> = <span class="string">&#x27;Hello World&#x27;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><h4 id="listen"><a href="#listen" class="headerlink" title="listen"></a><code>listen</code></h4><p>一个极简的<code>koa</code>使用如上，我们可以观察到通过<code>listen</code>开启了整个应用的启动</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">listen (...args) &#123;</span><br><span class="line">  <span class="title function_">debug</span>(<span class="string">&#x27;listen&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="variable language_">this</span>.<span class="title function_">callback</span>())</span><br><span class="line">  <span class="keyword">return</span> server.<span class="title function_">listen</span>(...args)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="callback"><a href="#callback" class="headerlink" title="callback"></a><code>callback</code></h4><p>调用原生的<code>http</code>方法创建<code>server</code>, 参数透传，传入了<code>callback</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">callback () &#123;</span><br><span class="line">  <span class="comment">// compose的作用是将所有的middleware进行组合（我们后面再来看这个函数的源码）</span></span><br><span class="line">  <span class="keyword">const</span> fn = <span class="title function_">compose</span>(<span class="variable language_">this</span>.<span class="property">middleware</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="title function_">listenerCount</span>(<span class="string">&#x27;error&#x27;</span>)) <span class="variable language_">this</span>.<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="variable language_">this</span>.<span class="property">onerror</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 重点在这里</span></span><br><span class="line">  <span class="comment">// 这里创建了一个新的上下文环境，相当于每一个请求都会有一个新的context</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleRequest</span> = (<span class="params">req, res</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> ctx = <span class="variable language_">this</span>.<span class="title function_">createContext</span>(req, res)</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">handleRequest</span>(ctx, fn)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> handleRequest</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="createContext"><a href="#createContext" class="headerlink" title="createContext"></a><code>createContext</code></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">createContext (req, res) &#123;</span><br><span class="line">  <span class="comment">// 创建context并挂载req, res</span></span><br><span class="line">  <span class="keyword">const</span> context = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="variable language_">this</span>.<span class="property">context</span>)</span><br><span class="line">  <span class="keyword">const</span> request = context.<span class="property">request</span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="variable language_">this</span>.<span class="property">request</span>)</span><br><span class="line">  <span class="keyword">const</span> response = context.<span class="property">response</span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="variable language_">this</span>.<span class="property">response</span>)</span><br><span class="line">  context.<span class="property">app</span> = request.<span class="property">app</span> = response.<span class="property">app</span> = <span class="variable language_">this</span></span><br><span class="line">  context.<span class="property">req</span> = request.<span class="property">req</span> = response.<span class="property">req</span> = req</span><br><span class="line">  context.<span class="property">res</span> = request.<span class="property">res</span> = response.<span class="property">res</span> = res</span><br><span class="line">  request.<span class="property">ctx</span> = response.<span class="property">ctx</span> = context</span><br><span class="line">  request.<span class="property">response</span> = response</span><br><span class="line">  response.<span class="property">request</span> = request</span><br><span class="line">  context.<span class="property">originalUrl</span> = request.<span class="property">originalUrl</span> = req.<span class="property">url</span></span><br><span class="line">  context.<span class="property">state</span> = &#123;&#125;</span><br><span class="line">  <span class="keyword">return</span> context</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="this-handleRequest"><a href="#this-handleRequest" class="headerlink" title="this.handleRequest"></a><code>this.handleRequest</code></h4><p>创建完新的上下文环境之后，会将这个<code>ctx</code>,和队友的中间件函数集合<code>fn</code>传给<code>this.handleRequest</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">handleRequest (ctx, fnMiddleware) &#123;</span><br><span class="line">  <span class="keyword">const</span> res = ctx.<span class="property">res</span></span><br><span class="line">  <span class="comment">// 这里进行了一个默认处理，如果没有后续处理，所有的请求默认都是404</span></span><br><span class="line">  res.<span class="property">statusCode</span> = <span class="number">404</span></span><br><span class="line">  <span class="comment">// 使用ctx的默认错误处理函数</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">onerror</span> = err =&gt; ctx.<span class="title function_">onerror</span>(err)</span><br><span class="line">  <span class="comment">// 通过`respond`生成了一个`handleResponse`函数</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleResponse</span> = (<span class="params"></span>) =&gt; <span class="title function_">respond</span>(ctx)</span><br><span class="line">  <span class="comment">// 这里估计是注册了一个请求完成的回调函数，后面再分析</span></span><br><span class="line">  <span class="title function_">onFinished</span>(res, onerror)</span><br><span class="line">  <span class="comment">// 通过这一行，我们可以知道返回了一个promise，且中间件函数处理完成后，最后进行处理的是`handleResponse`</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">fnMiddleware</span>(ctx).<span class="title function_">then</span>(handleResponse).<span class="title function_">catch</span>(onerror)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="respond"><a href="#respond" class="headerlink" title="respond"></a><code>respond</code></h4><p>可以看到<code>this.handleRequest</code>是一个非常重要的函数, 做了非常多的事情，接下来我们看一下<code>respond</code>函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">respond</span> (ctx) &#123;</span><br><span class="line">  <span class="comment">// allow bypassing koa</span></span><br><span class="line">  <span class="comment">// 通过设置respond，我们可以跳过koa的默认处理</span></span><br><span class="line">  <span class="comment">// 也就是中间件结束之后，koa不会帮我们自动回复请求</span></span><br><span class="line">  <span class="comment">// 我们可以手动的去回复请求, 使用`ctx.res.end(&#x27;lol&#x27;)`</span></span><br><span class="line">  <span class="keyword">if</span> (ctx.<span class="property">respond</span> === <span class="literal">false</span>) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 这个等我们看了ctx源码之后再来分析</span></span><br><span class="line">  <span class="keyword">if</span> (!ctx.<span class="property">writable</span>) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> res = ctx.<span class="property">res</span></span><br><span class="line">  <span class="keyword">let</span> body = ctx.<span class="property">body</span></span><br><span class="line">  <span class="keyword">const</span> code = ctx.<span class="property">status</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断body为空的情况的 响应码</span></span><br><span class="line">  <span class="comment">// status.empty = &#123;</span></span><br><span class="line">  <span class="comment">//   204: true,</span></span><br><span class="line">  <span class="comment">//   205: true,</span></span><br><span class="line">  <span class="comment">//   304: true</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  <span class="keyword">if</span> (statuses.<span class="property">empty</span>[code]) &#123;</span><br><span class="line">    <span class="comment">// strip headers</span></span><br><span class="line">    ctx.<span class="property">body</span> = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">end</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果是head方法，只会返回响应头，提前结束请求</span></span><br><span class="line">  <span class="comment">// 判断body长度，设置&#x27;Content-Length&#x27;结束请求</span></span><br><span class="line">  <span class="keyword">if</span> (ctx.<span class="property">method</span> === <span class="string">&#x27;HEAD&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!res.<span class="property">headersSent</span> &amp;&amp; !ctx.<span class="property">response</span>.<span class="title function_">has</span>(<span class="string">&#x27;Content-Length&#x27;</span>)) &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; length &#125; = ctx.<span class="property">response</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="title class_">Number</span>.<span class="title function_">isInteger</span>(length)) ctx.<span class="property">length</span> = length</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">end</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// status body</span></span><br><span class="line">  <span class="keyword">if</span> (body == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">// 没有请求体，length置为0，然后直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (ctx.<span class="property">response</span>.<span class="property">_explicitNullBody</span>) &#123;</span><br><span class="line">      ctx.<span class="property">response</span>.<span class="title function_">remove</span>(<span class="string">&#x27;Content-Type&#x27;</span>)</span><br><span class="line">      ctx.<span class="property">response</span>.<span class="title function_">remove</span>(<span class="string">&#x27;Transfer-Encoding&#x27;</span>)</span><br><span class="line">      ctx.<span class="property">length</span> = <span class="number">0</span></span><br><span class="line">      <span class="keyword">return</span> res.<span class="title function_">end</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 是否为http2</span></span><br><span class="line">    <span class="comment">// http2 会优先给请求体中发送 状态码，而不是文字</span></span><br><span class="line">    <span class="comment">// 例如  404  not found</span></span><br><span class="line">    <span class="keyword">if</span> (ctx.<span class="property">req</span>.<span class="property">httpVersionMajor</span> &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">      body = <span class="title class_">String</span>(code)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      body = ctx.<span class="property">message</span> || <span class="title class_">String</span>(code)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!res.<span class="property">headersSent</span>) &#123;</span><br><span class="line">      ctx.<span class="property">type</span> = <span class="string">&#x27;text&#x27;</span></span><br><span class="line">      ctx.<span class="property">length</span> = <span class="title class_">Buffer</span>.<span class="title function_">byteLength</span>(body)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">end</span>(body)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// responses</span></span><br><span class="line">  <span class="comment">// 根据body类型进行返回</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Buffer</span>.<span class="title function_">isBuffer</span>(body)) <span class="keyword">return</span> res.<span class="title function_">end</span>(body)</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> body === <span class="string">&#x27;string&#x27;</span>) <span class="keyword">return</span> res.<span class="title function_">end</span>(body)</span><br><span class="line">  <span class="keyword">if</span> (body <span class="keyword">instanceof</span> <span class="title class_">Stream</span>) <span class="keyword">return</span> body.<span class="title function_">pipe</span>(res)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// body: json</span></span><br><span class="line">  <span class="comment">// 当body是个对象的时候，我们就转字符串操作</span></span><br><span class="line">  body = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(body)</span><br><span class="line">  <span class="keyword">if</span> (!res.<span class="property">headersSent</span>) &#123;</span><br><span class="line">    ctx.<span class="property">length</span> = <span class="title class_">Buffer</span>.<span class="title function_">byteLength</span>(body)</span><br><span class="line">  &#125;</span><br><span class="line">  res.<span class="title function_">end</span>(body)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到 <code>respond</code> 本质上就是一个默认操作，在最后阶段处理</p><h3 id="context"><a href="#context" class="headerlink" title="context"></a>context</h3><p><code>context</code>本质上是一个js对象，里面有公共方法</p><ul><li>inspect</li><li>toJSON</li><li>throw</li><li>onerror</li><li>get cookies</li></ul><p>然后还有一堆的<code>delegate</code>代理方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这段代码相当于就是给proto挂上response的属性方法</span></span><br><span class="line"><span class="title function_">delegate</span>(proto, <span class="string">&#x27;response&#x27;</span>)</span><br><span class="line">  .<span class="title function_">method</span>(<span class="string">&#x27;attachment&#x27;</span>)</span><br><span class="line">  .<span class="title function_">method</span>(<span class="string">&#x27;redirect&#x27;</span>)</span><br><span class="line">  .<span class="title function_">method</span>(<span class="string">&#x27;remove&#x27;</span>)</span><br><span class="line">  .<span class="title function_">method</span>(<span class="string">&#x27;vary&#x27;</span>)</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><h4 id="onerror"><a href="#onerror" class="headerlink" title="onerror"></a>onerror</h4><p>我们重点观察一下<code>onerror</code>方法，因为从上文我们知道这个是默认的错误处理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">onerror (err) &#123;</span><br><span class="line">  <span class="comment">// don&#x27;t do anything if there is no error.</span></span><br><span class="line">  <span class="comment">// this allows you to pass `this.onerror`</span></span><br><span class="line">  <span class="comment">// to node-style callbacks.</span></span><br><span class="line">  <span class="keyword">if</span> (err == <span class="literal">null</span>) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// When dealing with cross-globals a normal `instanceof` check doesn&#x27;t work properly.</span></span><br><span class="line">  <span class="comment">// See https://github.com/koajs/koa/issues/1466</span></span><br><span class="line">  <span class="comment">// We can probably remove it once jest fixes https://github.com/facebook/jest/issues/2549.</span></span><br><span class="line">  <span class="keyword">const</span> isNativeError =</span><br><span class="line">    <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(err) === <span class="string">&#x27;[object Error]&#x27;</span> ||</span><br><span class="line">    err <span class="keyword">instanceof</span> <span class="title class_">Error</span></span><br><span class="line">  <span class="comment">// 不是原生错误，进行格式化</span></span><br><span class="line">  <span class="keyword">if</span> (!isNativeError) err = <span class="keyword">new</span> <span class="title class_">Error</span>(util.<span class="title function_">format</span>(<span class="string">&#x27;non-error thrown: %j&#x27;</span>, err))</span><br><span class="line"></span><br><span class="line">  <span class="comment">// headerSent是用来判断，请求是否已经响应</span></span><br><span class="line">  <span class="keyword">let</span> headerSent = <span class="literal">false</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">headerSent</span> || !<span class="variable language_">this</span>.<span class="property">writable</span>) &#123;</span><br><span class="line">    headerSent = err.<span class="property">headerSent</span> = <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// delegate</span></span><br><span class="line">  <span class="comment">// 这里会触发application的onerror方法</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">app</span>.<span class="title function_">emit</span>(<span class="string">&#x27;error&#x27;</span>, err, <span class="variable language_">this</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// nothing we can do here other</span></span><br><span class="line">  <span class="comment">// than delegate to the app-level</span></span><br><span class="line">  <span class="comment">// handler and log.</span></span><br><span class="line">  <span class="keyword">if</span> (headerSent) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> &#123; res &#125; = <span class="variable language_">this</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// first unset all headers</span></span><br><span class="line">  <span class="comment">/* istanbul ignore else */</span></span><br><span class="line">  <span class="comment">// 给ctx.res挂一个getHeaderNames函数可以快速移除响应头, 原生http默认为空</span></span><br><span class="line">  <span class="comment">// ctx.res = &#123;</span></span><br><span class="line">  <span class="comment">//   getHeaderNames: () =&gt; [&#x27;content-type&#x27;, &#x27;content-length&#x27;],</span></span><br><span class="line">  <span class="comment">//   removeHeader: () =&gt; removed++,</span></span><br><span class="line">  <span class="comment">//   end: () =&gt; &#123;&#125;,</span></span><br><span class="line">  <span class="comment">//   emit: () =&gt; &#123;&#125;</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> res.<span class="property">getHeaderNames</span> === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    res.<span class="title function_">getHeaderNames</span>().<span class="title function_">forEach</span>(<span class="function"><span class="params">name</span> =&gt;</span> res.<span class="title function_">removeHeader</span>(name))</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    res.<span class="property">_headers</span> = &#123;&#125; <span class="comment">// Node &lt; 7.7</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// then set those specified</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">set</span>(err.<span class="property">headers</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// force text/plain</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">type</span> = <span class="string">&#x27;text&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> statusCode = err.<span class="property">status</span> || err.<span class="property">statusCode</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// ENOENT support</span></span><br><span class="line">  <span class="keyword">if</span> (err.<span class="property">code</span> === <span class="string">&#x27;ENOENT&#x27;</span>) statusCode = <span class="number">404</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// default to 500</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> statusCode !== <span class="string">&#x27;number&#x27;</span> || !statuses[statusCode]) statusCode = <span class="number">500</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// respond</span></span><br><span class="line">  <span class="keyword">const</span> code = statuses[statusCode]</span><br><span class="line">  <span class="keyword">const</span> msg = err.<span class="property">expose</span> ? err.<span class="property">message</span> : code</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">status</span> = err.<span class="property">status</span> = statusCode</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">length</span> = <span class="title class_">Buffer</span>.<span class="title function_">byteLength</span>(msg)</span><br><span class="line">  res.<span class="title function_">end</span>(msg)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>简单来说就是帮助我们写了一个默认错误处理函数</p><h3 id="request，response"><a href="#request，response" class="headerlink" title="request，response"></a>request，response</h3><p>在<code>koa</code>中，我们知道，除了使用原生的<code>req</code>与<code>res</code>外，我们还可以使用<code>koa</code>包装之后的<code>request</code>,<code>response</code></p><p>而在这两个包装对象就是将一些原生的值转化为我们想要的值</p><h2 id="一些其他重要的函数"><a href="#一些其他重要的函数" class="headerlink" title="一些其他重要的函数"></a>一些其他重要的函数</h2><h3 id="koa-compose"><a href="#koa-compose" class="headerlink" title="koa-compose"></a>koa-compose</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">compose</span> (middleware) &#123;</span><br><span class="line">  <span class="comment">// 中间件必须为数组</span></span><br><span class="line">  <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(middleware)) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;Middleware stack must be an array!&#x27;</span>)</span><br><span class="line">  <span class="comment">// 每个中间件都必须是函数</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> fn <span class="keyword">of</span> middleware) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> fn !== <span class="string">&#x27;function&#x27;</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;Middleware must be composed of functions!&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">Object</span>&#125; <span class="variable">context</span></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> &#123;<span class="type">Promise</span>&#125;</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@api</span> <span class="variable">public</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">context, next</span>) &#123;</span><br><span class="line">    <span class="comment">// last called middleware #</span></span><br><span class="line">    <span class="keyword">let</span> index = -<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">dispatch</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="comment">// 函数声明会提前，所以放在下面也是ok的</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">dispatch</span> (i) &#123;</span><br><span class="line">      <span class="comment">// 一个中间中，调用多次next函数就会报错</span></span><br><span class="line">      <span class="keyword">if</span> (i &lt;= index) <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;next() called multiple times&#x27;</span>))</span><br><span class="line">      index = i</span><br><span class="line">      <span class="comment">// 取出要执行的函数</span></span><br><span class="line">      <span class="keyword">let</span> fn = middleware[i]</span><br><span class="line">      <span class="comment">// 如果是最后一个中间件，将fn置为空</span></span><br><span class="line">      <span class="keyword">if</span> (i === middleware.<span class="property">length</span>) fn = next</span><br><span class="line">      <span class="comment">// 没有fn即要执行的函数，返回一个已经resove的空的Promise</span></span><br><span class="line">      <span class="keyword">if</span> (!fn) <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>()</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 将fn的执行结果进行包装， 传入一个next函数来触发下一个中间件函数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="title function_">fn</span>(context, dispatch.<span class="title function_">bind</span>(<span class="literal">null</span>, i + <span class="number">1</span>)));</span><br><span class="line">      &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(err)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://zhoujunxiong.gitee.com/categories/nodejs/">nodejs</category>
      
      
      <category domain="http://zhoujunxiong.gitee.com/tags/nodejs/">nodejs</category>
      
      <category domain="http://zhoujunxiong.gitee.com/tags/JavaScript/">JavaScript</category>
      
      <category domain="http://zhoujunxiong.gitee.com/tags/koa/">koa</category>
      
      
      <comments>http://zhoujunxiong.gitee.com/2022/03/26/nodejs/koa%E6%BA%90%E7%A0%81%E5%86%8D%E8%AF%BB/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Typescript之常见套路</title>
      <link>http://zhoujunxiong.gitee.com/2022/03/18/%E5%89%8D%E7%AB%AF/Typescript/Typescript%E4%B9%8B%E5%B8%B8%E8%A7%81%E5%A5%97%E8%B7%AF/</link>
      <guid>http://zhoujunxiong.gitee.com/2022/03/18/%E5%89%8D%E7%AB%AF/Typescript/Typescript%E4%B9%8B%E5%B8%B8%E8%A7%81%E5%A5%97%E8%B7%AF/</guid>
      <pubDate>Fri, 18 Mar 2022 10:53:49 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;条件判断（extends）&quot;&gt;&lt;a href=&quot;#条件判断（extends）&quot; class=&quot;headerlink&quot; title=&quot;条件判断（extends）&quot;&gt;&lt;/a&gt;条件判断（extends）&lt;/h2&gt;&lt;p&gt;当&lt;code&gt;条件类型&lt;/code&gt;和&lt;code&gt;联</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="条件判断（extends）"><a href="#条件判断（extends）" class="headerlink" title="条件判断（extends）"></a>条件判断（extends）</h2><p>当<code>条件类型</code>和<code>联合类型</code>遇到一起就会出现<code>分发条件类型</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Extract1</span>&lt;T,U&gt; = T <span class="keyword">extends</span> U ? T : <span class="built_in">never</span> ;</span><br><span class="line"><span class="keyword">type</span> z1 = <span class="title class_">Extract1</span>&lt;<span class="string">&quot;a&quot;</span> | <span class="string">&quot;b&quot;</span> | <span class="string">&quot;c&quot;</span>, <span class="string">&quot;a&quot;</span>&gt; <span class="comment">// &quot;a&quot;  </span></span><br><span class="line"><span class="comment">// &quot;a&quot; extends &quot;a&quot; ? &quot;a&quot; : never</span></span><br><span class="line"><span class="comment">// &quot;b&quot; extends &quot;a&quot; ? &quot;b&quot; : never</span></span><br><span class="line"><span class="comment">// &quot;c&quot; extends &quot;a&quot; ? &quot;c&quot; : never</span></span><br><span class="line"><span class="keyword">type</span> z2 = <span class="title class_">Extract1</span>&lt;<span class="string">&quot;a&quot;</span> | <span class="string">&quot;b&quot;</span> | <span class="string">&quot;c&quot;</span>, <span class="string">&quot;a&quot;</span>|<span class="string">&quot;b&quot;</span>&gt; <span class="comment">// &quot;a&quot; | &quot;b&quot; </span></span><br><span class="line"><span class="comment">// &quot;a&quot; extends &quot;a&quot;|&quot;b&quot; ? &quot;a&quot; : never</span></span><br><span class="line"><span class="comment">// &quot;b&quot; extends &quot;a&quot;|&quot;b&quot; ? &quot;b&quot; : never</span></span><br><span class="line"><span class="comment">// &quot;c&quot; extends &quot;a&quot;|&quot;b&quot; ? &quot;c&quot; : never</span></span><br></pre></td></tr></table></figure><p>与<code>交叉类型</code>与<code>条件类型</code>也会有<code>分发条件类型</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Extract1</span>&lt;T,U&gt; = T <span class="keyword">extends</span> U ? T : <span class="built_in">never</span> ;</span><br><span class="line"><span class="keyword">type</span> z3 = <span class="title class_">Extract1</span>&lt;<span class="title class_">Boolean</span> &amp; <span class="literal">true</span>, <span class="literal">true</span>&gt; <span class="comment">// type z3 = Boolean &amp; true</span></span><br><span class="line"><span class="comment">// Boolean extends true ? Boolean : never</span></span><br><span class="line"><span class="comment">// true extends true ? true : never</span></span><br><span class="line"><span class="comment">// 最后 Boolean 与 true 进行合并 Boolean &amp; true</span></span><br><span class="line"><span class="comment">// 当两个不能进行交叉时，就会出现never类型</span></span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>boolean 其实也是联合类型, 包含<code>true</code>与<code>false</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Test</span>&lt;T&gt; = T <span class="keyword">extends</span> <span class="literal">true</span> ? <span class="number">1</span> : <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> res = <span class="title class_">Test</span>&lt;<span class="built_in">boolean</span>&gt;; </span><br><span class="line"><span class="comment">// type res4 = 1 | 2</span></span><br></pre></td></tr></table></figure><p>条件类型对 any(unknow会是2，never是never) 做了特殊处理，如果左边是 any，那么直接把 trueType 和 falseType 合并成联合类型返回</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Test1</span>&lt;T&gt; = T <span class="keyword">extends</span> <span class="literal">true</span> ? <span class="number">1</span> : <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> res5 = <span class="title class_">Test1</span>&lt;<span class="built_in">any</span>&gt;; <span class="comment">// 1 | 2</span></span><br></pre></td></tr></table></figure><h2 id="模式匹配（infer）"><a href="#模式匹配（infer）" class="headerlink" title="模式匹配（infer）"></a>模式匹配（infer）</h2><p>例如正则</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;abc&quot;</span>.<span class="title function_">replace</span>(<span class="regexp">/a(b)c/</span>, <span class="string">&quot;$1&quot;</span>)</span><br><span class="line"><span class="comment">// &#x27;b&#x27;</span></span><br></pre></td></tr></table></figure><p>通过 ts 提供的<code>infer</code>关键字，我们可以使用模式匹配</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">GetValueType</span>&lt;T&gt; = T <span class="keyword">extends</span> <span class="title class_">Promise</span>&lt;infer R&gt; ? R : <span class="built_in">never</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PromiseType</span> = <span class="title class_">Promise</span>&lt;<span class="built_in">number</span>[]&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> res = <span class="title class_">GetValueType</span>&lt;<span class="title class_">PromiseType</span>&gt; <span class="comment">// number[]</span></span><br></pre></td></tr></table></figure><h3 id="数组类型的模式匹配"><a href="#数组类型的模式匹配" class="headerlink" title="数组类型的模式匹配"></a>数组类型的模式匹配</h3><p>通过<code>...</code>关键字对数组解构</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Pop</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[]&gt; = T <span class="keyword">extends</span> [...infer <span class="title class_">Rest</span>, infer R] ? [...<span class="title class_">Rest</span>] : <span class="built_in">never</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> res = <span class="title class_">Pop</span>&lt;[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]&gt; <span class="comment">// [1,2]</span></span><br></pre></td></tr></table></figure><h3 id="字符串的模式匹配"><a href="#字符串的模式匹配" class="headerlink" title="字符串的模式匹配"></a>字符串的模式匹配</h3><p><code>trim</code>去除空格</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">TrimLeft</span>&lt;<span class="title class_">Str</span> <span class="keyword">extends</span> <span class="built_in">string</span>&gt; = <span class="title class_">Str</span> <span class="keyword">extends</span> <span class="string">`<span class="subst">$&#123;<span class="string">&quot; &quot;</span> | <span class="string">&quot;\t&quot;</span> | <span class="string">&quot;\n&quot;</span> | <span class="string">&quot;\r&quot;</span>&#125;</span><span class="subst">$&#123;infer Rest&#125;</span>`</span> ? <span class="title class_">TrimLeft</span>&lt;<span class="title class_">Rest</span>&gt; : <span class="title class_">Str</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> res = <span class="title class_">TrimLeft</span>&lt;<span class="string">&#x27;   abc&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="函数参数的模式匹配"><a href="#函数参数的模式匹配" class="headerlink" title="函数参数的模式匹配"></a>函数参数的模式匹配</h3><p>先是参数的匹配</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">GetParams</span>&lt;<span class="title class_">Func</span> <span class="keyword">extends</span> <span class="title class_">Function</span>&gt; = <span class="title class_">Func</span> <span class="keyword">extends</span> (...<span class="attr">params</span>: infer <span class="title class_">Params</span>) =&gt; <span class="built_in">any</span> ? <span class="title class_">Params</span> : <span class="built_in">never</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> res1 = <span class="title class_">GetParams</span>&lt;<span class="function">(<span class="params">a: <span class="built_in">string</span>, b: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">void</span>&gt;;</span><br><span class="line"><span class="comment">// type res1 = [a: string, b: number]</span></span><br></pre></td></tr></table></figure><p>返回值的匹配</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">GetReturn</span>&lt;<span class="title class_">Func</span> <span class="keyword">extends</span> <span class="title class_">Function</span>&gt; = <span class="title class_">Func</span> <span class="keyword">extends</span> (...<span class="attr">params</span>: <span class="built_in">any</span>[]) =&gt; infer <span class="title class_">Return</span> ? <span class="title class_">Return</span> : <span class="built_in">never</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> res3 = <span class="title class_">GetReturn</span>&lt;<span class="function">(<span class="params">a: <span class="built_in">string</span>, b: <span class="built_in">number</span></span>) =&gt;</span> <span class="title class_">Promise</span>&lt;<span class="built_in">number</span>&gt;&gt;;</span><br><span class="line"><span class="comment">// type res3 = Promise&lt;number&gt;</span></span><br></pre></td></tr></table></figure><h2 id="数值运算-（数组中number与length）"><a href="#数值运算-（数组中number与length）" class="headerlink" title="数值运算 （数组中number与length）"></a>数值运算 （数组中number与length）</h2><p>通过<code>number</code>将数组解构为联合类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> x = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>][<span class="built_in">number</span>] <span class="comment">// type x = 1 | 3 | 2</span></span><br></pre></td></tr></table></figure><p>通过<code>length</code>我们可以获取数组的长度</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> len0 = [][<span class="string">&#x27;length&#x27;</span>] <span class="comment">// 0</span></span><br><span class="line"><span class="keyword">type</span> len1 = [<span class="built_in">unknown</span>][<span class="string">&#x27;length&#x27;</span>] <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">type</span> len2 = [<span class="built_in">unknown</span>, <span class="built_in">unknown</span>][<span class="string">&#x27;length&#x27;</span>] <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h3 id="Add"><a href="#Add" class="headerlink" title="Add"></a>Add</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">BuildArray</span>&lt;</span><br><span class="line">    <span class="title class_">Length</span> <span class="keyword">extends</span> <span class="built_in">number</span>, </span><br><span class="line">    <span class="title class_">Ele</span> = <span class="built_in">unknown</span>, </span><br><span class="line">    <span class="title class_">Arr</span> <span class="keyword">extends</span> <span class="built_in">unknown</span>[] = []</span><br><span class="line">&gt; = <span class="title class_">Arr</span>[<span class="string">&#x27;length&#x27;</span>] <span class="keyword">extends</span> <span class="title class_">Length</span> </span><br><span class="line">        ? <span class="title class_">Arr</span> </span><br><span class="line">        : <span class="title class_">BuildArray</span>&lt;<span class="title class_">Length</span>, <span class="title class_">Ele</span>, [...<span class="title class_">Arr</span>, <span class="title class_">Ele</span>]&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Add</span>&lt;<span class="title class_">Num1</span> <span class="keyword">extends</span> <span class="built_in">number</span>, <span class="title class_">Num2</span> <span class="keyword">extends</span> <span class="built_in">number</span>&gt; = </span><br><span class="line">    [...<span class="title class_">BuildArray</span>&lt;<span class="title class_">Num1</span>&gt;,...<span class="title class_">BuildArray</span>&lt;<span class="title class_">Num2</span>&gt;][<span class="string">&#x27;length&#x27;</span>];</span><br></pre></td></tr></table></figure><h3 id="Subtract"><a href="#Subtract" class="headerlink" title="Subtract"></a>Subtract</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Subtract</span>&lt;<span class="title class_">Num1</span> <span class="keyword">extends</span> <span class="built_in">number</span>, <span class="title class_">Num2</span> <span class="keyword">extends</span> <span class="built_in">number</span>&gt; = </span><br><span class="line">    <span class="title class_">BuildArray</span>&lt;<span class="title class_">Num1</span>&gt; <span class="keyword">extends</span> [...<span class="attr">arr1</span>: <span class="title class_">BuildArray</span>&lt;<span class="title class_">Num2</span>&gt;, ...<span class="attr">arr2</span>: infer <span class="title class_">Rest</span>]</span><br><span class="line">        ? <span class="title class_">Rest</span>[<span class="string">&#x27;length&#x27;</span>]</span><br><span class="line">        : <span class="built_in">never</span>;</span><br></pre></td></tr></table></figure><h3 id="Mutiply"><a href="#Mutiply" class="headerlink" title="Mutiply"></a>Mutiply</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Mutiply</span>&lt;</span><br><span class="line">    <span class="title class_">Num1</span> <span class="keyword">extends</span> <span class="built_in">number</span>,</span><br><span class="line">    <span class="title class_">Num2</span> <span class="keyword">extends</span> <span class="built_in">number</span>,</span><br><span class="line">    <span class="title class_">ResultArr</span> <span class="keyword">extends</span> <span class="built_in">unknown</span>[] = []</span><br><span class="line">&gt; = <span class="title class_">Num2</span> <span class="keyword">extends</span> <span class="number">0</span> ? <span class="title class_">ResultArr</span>[<span class="string">&#x27;length&#x27;</span>]</span><br><span class="line">        : <span class="title class_">Mutiply</span>&lt;<span class="title class_">Num1</span>, <span class="title class_">Subtract</span>&lt;<span class="title class_">Num2</span>, <span class="number">1</span>&gt;, [...<span class="title class_">BuildArray</span>&lt;<span class="title class_">Num1</span>&gt;, ...<span class="title class_">ResultArr</span>]&gt;;</span><br></pre></td></tr></table></figure><h3 id="Divide"><a href="#Divide" class="headerlink" title="Divide"></a>Divide</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Divide</span>&lt;</span><br><span class="line">    <span class="title class_">Num1</span> <span class="keyword">extends</span> <span class="built_in">number</span>,</span><br><span class="line">    <span class="title class_">Num2</span> <span class="keyword">extends</span> <span class="built_in">number</span>,</span><br><span class="line">    <span class="title class_">CountArr</span> <span class="keyword">extends</span> <span class="built_in">unknown</span>[] = []</span><br><span class="line">&gt; = <span class="title class_">Num1</span> <span class="keyword">extends</span> <span class="number">0</span> ? <span class="title class_">CountArr</span>[<span class="string">&#x27;length&#x27;</span>]</span><br><span class="line">        : <span class="title class_">Divide</span>&lt;<span class="title class_">Subtract</span>&lt;<span class="title class_">Num1</span>, <span class="title class_">Num2</span>&gt;, <span class="title class_">Num2</span>, [<span class="built_in">unknown</span>, ...<span class="title class_">CountArr</span>]&gt;;</span><br></pre></td></tr></table></figure><h3 id="StrLen"><a href="#StrLen" class="headerlink" title="StrLen"></a>StrLen</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">StrLen</span>&lt;</span><br><span class="line">    <span class="title class_">Str</span> <span class="keyword">extends</span> <span class="built_in">string</span>,</span><br><span class="line">    <span class="title class_">CountArr</span> <span class="keyword">extends</span> <span class="built_in">unknown</span>[] = []</span><br><span class="line">&gt; = <span class="title class_">Str</span> <span class="keyword">extends</span> <span class="string">`<span class="subst">$&#123;<span class="built_in">string</span>&#125;</span><span class="subst">$&#123;infer Rest&#125;</span>`</span> </span><br><span class="line">    ? <span class="title class_">StrLen</span>&lt;<span class="title class_">Rest</span>, [...<span class="title class_">CountArr</span>, <span class="built_in">unknown</span>]&gt; </span><br><span class="line">    : <span class="title class_">CountArr</span>[<span class="string">&#x27;length&#x27;</span>]</span><br></pre></td></tr></table></figure><h3 id="重映射"><a href="#重映射" class="headerlink" title="重映射"></a>重映射</h3><p>使用<code>as</code>可以将类型进行重映射</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">MapType</span>&lt;T&gt; = &#123;</span><br><span class="line">    [</span><br><span class="line">        <span class="title class_">Key</span> <span class="keyword">in</span> keyof T </span><br><span class="line">            <span class="keyword">as</span> <span class="string">`<span class="subst">$&#123;Key &amp; <span class="built_in">string</span>&#125;</span><span class="subst">$&#123;Key &amp; <span class="built_in">string</span>&#125;</span><span class="subst">$&#123;Key &amp; <span class="built_in">string</span>&#125;</span>`</span></span><br><span class="line">    ]: [T[<span class="title class_">Key</span>], T[<span class="title class_">Key</span>], T[<span class="title class_">Key</span>]]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> res = <span class="title class_">MapType</span>&lt;&#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>&#125;&gt;;</span><br><span class="line"><span class="comment">// type res = &#123;</span></span><br><span class="line"><span class="comment">//     aaa: [1, 1, 1];</span></span><br><span class="line"><span class="comment">//     bbb: [2, 2, 2];</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><p>这里的<code>Key</code>包含了几种三种类型<code>&#39;string | number | symbol&#39;</code>, 使用交叉符<code>&amp;</code>可以将类型缩窄</p><p><code>Key &amp; string</code>就会变为<code>string</code></p>]]></content:encoded>
      
      
      <category domain="http://zhoujunxiong.gitee.com/categories/Typescript/">Typescript</category>
      
      
      <category domain="http://zhoujunxiong.gitee.com/tags/%E5%89%8D%E7%AB%AF/">前端</category>
      
      <category domain="http://zhoujunxiong.gitee.com/tags/Typescript/">Typescript</category>
      
      
      <comments>http://zhoujunxiong.gitee.com/2022/03/18/%E5%89%8D%E7%AB%AF/Typescript/Typescript%E4%B9%8B%E5%B8%B8%E8%A7%81%E5%A5%97%E8%B7%AF/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>V8中的JS数组</title>
      <link>http://zhoujunxiong.gitee.com/2022/02/13/%E5%89%8D%E7%AB%AF/JS%E5%8E%9F%E7%90%86/V8%E4%B8%AD%E7%9A%84JS%E6%95%B0%E7%BB%84/</link>
      <guid>http://zhoujunxiong.gitee.com/2022/02/13/%E5%89%8D%E7%AB%AF/JS%E5%8E%9F%E7%90%86/V8%E4%B8%AD%E7%9A%84JS%E6%95%B0%E7%BB%84/</guid>
      <pubDate>Sun, 13 Feb 2022 08:12:44 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;数组分类&quot;&gt;&lt;a href=&quot;#数组分类&quot; class=&quot;headerlink&quot; title=&quot;数组分类&quot;&gt;&lt;/a&gt;数组分类&lt;/h2&gt;&lt;p&gt;JSArray 继承于 JSObject ，从注释上看，它有两种存储方式：&lt;/p&gt;
&lt;p&gt;fast：存储结构是 FixedA</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="数组分类"><a href="#数组分类" class="headerlink" title="数组分类"></a>数组分类</h2><p>JSArray 继承于 JSObject ，从注释上看，它有两种存储方式：</p><p>fast：存储结构是 FixedArray ，并且数组长度 &lt;= elements.length() ，push 或 pop 时可能会伴随着动态扩容或减容<br>slow：存储结构是 HashTable（哈希表），并且数组下标作为 key<br>fast 模式下数组在源码里面叫 FastElements ，而 slow 模式下的叫做 SlowElements 。</p><ol><li><p>快数组（FastElements）<br>FixedArray 是 V8 实现的一个类似于数组的类，它表示一段连续的内存，可以使用索引直接定位。新创建的空数组默认就是快数组。当数组满（数组的长度达到数组在内存中申请的内存容量最大值）的时候，继续 push 时， JSArray 会进行动态的扩容，以存储更多的元素。</p></li><li><p>慢数组（SlowElements）<br>慢数组以哈希表的形式存储在内存空间里，它不需要开辟连续的存储空间，但需要额外维护一个哈希表，与快数组相比，性能相对较差。</p></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/objects/dictionary.h</span></span><br><span class="line"><span class="function"><span class="keyword">class</span> <span class="title">EXPORT_TEMPLATE_DECLARE</span><span class="params">(V8_EXPORT_PRIVATE)</span> Dictionary</span></span><br><span class="line"><span class="function">    : public HashTable&lt;Derived, Shape&gt; &#123;</span></span><br><span class="line">  <span class="keyword">using</span> DerivedHashTable = HashTable&lt;Derived, Shape&gt;;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">using</span> Key = <span class="keyword">typename</span> Shape::Key;</span><br><span class="line">  <span class="comment">// Returns the value at entry.</span></span><br><span class="line">  <span class="function"><span class="keyword">inline</span> Object <span class="title">ValueAt</span><span class="params">(InternalIndex entry)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> Object <span class="title">ValueAt</span><span class="params">(<span class="type">const</span> Isolate* isolate, InternalIndex entry)</span></span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>从源码中可以看出，它的内部就是一个 HashTable。</p><h2 id="什么时候会从-fast-转变为-slow"><a href="#什么时候会从-fast-转变为-slow" class="headerlink" title="什么时候会从 fast 转变为 slow"></a>什么时候会从 fast 转变为 slow</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/objects/js-objects.h</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">uint32_t</span> kMaxGap = <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// src/objects/dictionary.h</span></span><br><span class="line"><span class="comment">// JSObjects prefer dictionary elements if the dictionary saves this much</span></span><br><span class="line"><span class="comment">// memory compared to a fast elements backing store.</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">uint32_t</span> kPreferFastElementsSizeFactor = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// src/objects/js-objects-inl.h</span></span><br><span class="line"><span class="comment">// If the fast-case backing storage takes up much more memory than a dictionary</span></span><br><span class="line"><span class="comment">// backing storage would, the object should have slow elements.</span></span><br><span class="line"><span class="comment">// static</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">bool</span> <span class="title">ShouldConvertToSlowElements</span><span class="params">(<span class="type">uint32_t</span> used_elements,</span></span></span><br><span class="line"><span class="params"><span class="function">                                               <span class="type">uint32_t</span> new_capacity)</span> </span>&#123;</span><br><span class="line">  <span class="type">uint32_t</span> size_threshold = NumberDictionary::kPreferFastElementsSizeFactor *</span><br><span class="line">                            NumberDictionary::<span class="built_in">ComputeCapacity</span>(used_elements) *</span><br><span class="line">                            NumberDictionary::kEntrySize;</span><br><span class="line">  <span class="comment">// 快数组新容量是扩容后的容量3倍之多时，也会被转成慢数组</span></span><br><span class="line">  <span class="keyword">return</span> size_threshold &lt;= new_capacity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">bool</span> <span class="title">ShouldConvertToSlowElements</span><span class="params">(JSObject object,</span></span></span><br><span class="line"><span class="params"><span class="function">                                               <span class="type">uint32_t</span> capacity,</span></span></span><br><span class="line"><span class="params"><span class="function">                                               <span class="type">uint32_t</span> index,</span></span></span><br><span class="line"><span class="params"><span class="function">                                               <span class="type">uint32_t</span>* new_capacity)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">STATIC_ASSERT</span>(JSObject::kMaxUncheckedOldFastElementsLength &lt;=</span><br><span class="line">                JSObject::kMaxUncheckedFastElementsLength);</span><br><span class="line">  <span class="keyword">if</span> (index &lt; capacity) &#123;</span><br><span class="line">    *new_capacity = capacity;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 当加入的索引值（例如例3中的2000）比当前容量capacity 大于等于 1024时，</span></span><br><span class="line">  <span class="comment">// 返回true，转为慢数组</span></span><br><span class="line">  <span class="keyword">if</span> (index - capacity &gt;= JSObject::kMaxGap) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  *new_capacity = JSObject::<span class="built_in">NewElementsCapacity</span>(index + <span class="number">1</span>);</span><br><span class="line">  <span class="built_in">DCHECK_LT</span>(index, *new_capacity);</span><br><span class="line">  <span class="comment">// TODO(ulan): Check if it works with young large objects.</span></span><br><span class="line">  <span class="keyword">if</span> (*new_capacity &lt;= JSObject::kMaxUncheckedOldFastElementsLength ||</span><br><span class="line">      (*new_capacity &lt;= JSObject::kMaxUncheckedFastElementsLength &amp;&amp;</span><br><span class="line">       <span class="built_in">ObjectInYoungGeneration</span>(object))) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">ShouldConvertToSlowElements</span>(object.<span class="built_in">GetFastElementsUsage</span>(),</span><br><span class="line">                                     *new_capacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以，当处于以下情况时，快数组会被转变为慢数组：</p><ul><li>当加入的索引值<code>index</code>比当前容量<code>capacity</code>差值大于等于<code>1024</code>时（index - capacity &gt;= 1024）</li><li>快数组新容量是扩容后的容量 3 倍之多时</li></ul><p>例如：向快数组里增加一个大索引同类型值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">arr[<span class="number">2000</span>] = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>当往 arr 增加一个 2000 的索引时，arr 被转成慢数组。节省了大量的内存空间（从索引为 2 到索引为 2000）。</p><h2 id="什么时候会从-slow-转变为-fast"><a href="#什么时候会从-slow-转变为-fast" class="headerlink" title="什么时候会从 slow 转变为 fast"></a>什么时候会从 slow 转变为 fast</h2><p>当慢数组的元素可存放在快数组中且长度在 smi(<code>SMall Integer</code> -32768~32767) 之间且仅节省了50%的空间，则会转变为快数组</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="type">bool</span> <span class="title">ShouldConvertToFastElements</span><span class="params">(JSObject object,</span></span></span><br><span class="line"><span class="params"><span class="function">                                        NumberDictionary dictionary,</span></span></span><br><span class="line"><span class="params"><span class="function">                                        <span class="type">uint32_t</span> index,</span></span></span><br><span class="line"><span class="params"><span class="function">                                        <span class="type">uint32_t</span>* new_capacity)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// If properties with non-standard attributes or accessors were added, we</span></span><br><span class="line">  <span class="comment">// cannot go back to fast elements.</span></span><br><span class="line">  <span class="keyword">if</span> (dictionary.<span class="built_in">requires_slow_elements</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="comment">// Adding a property with this index will require slow elements.</span></span><br><span class="line">  <span class="keyword">if</span> (index &gt;= <span class="built_in">static_cast</span>&lt;<span class="type">uint32_t</span>&gt;(Smi::kMaxValue)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span> (object.<span class="built_in">IsJSArray</span>()) &#123;</span><br><span class="line">    Object length = JSArray::<span class="built_in">cast</span>(object).<span class="built_in">length</span>();</span><br><span class="line">    <span class="keyword">if</span> (!length.<span class="built_in">IsSmi</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    *new_capacity = <span class="built_in">static_cast</span>&lt;<span class="type">uint32_t</span>&gt;(Smi::<span class="built_in">ToInt</span>(length));</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (object.<span class="built_in">IsJSArgumentsObject</span>()) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    *new_capacity = dictionary.<span class="built_in">max_number_key</span>() + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  *new_capacity = <span class="built_in">Max</span>(index + <span class="number">1</span>, *new_capacity);</span><br><span class="line">  <span class="type">uint32_t</span> dictionary_size = <span class="built_in">static_cast</span>&lt;<span class="type">uint32_t</span>&gt;(dictionary.<span class="built_in">Capacity</span>()) *</span><br><span class="line">                             NumberDictionary::kEntrySize;</span><br><span class="line">  <span class="comment">// Turn fast if the dictionary only saves 50% space.</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">2</span> * dictionary_size &gt;= *new_capacity;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JavaScript-中，数组的动态扩容与减容（FastElements）"><a href="#JavaScript-中，数组的动态扩容与减容（FastElements）" class="headerlink" title="JavaScript 中，数组的动态扩容与减容（FastElements）"></a>JavaScript 中，数组的动态扩容与减容（FastElements）</h2><p>默认空数组初始化大小为 4 :</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Number of element slots to pre-allocate for an empty array.</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">int</span> kPreallocatedArrayElements = <span class="number">4</span>;</span><br></pre></td></tr></table></figure><p>在 JavaScript 中，当数组执行 push 操作时，一旦发现数组内存不足，将进行扩容。</p><p>在 Chrome 源码中， push 的操作是用汇编实现的，在 c++ 里嵌入的汇编，以提高执行效率，并且在汇编的基础上用 c++ 封装了一层，在编译执行的时候，会将这些 c++ 代码转成汇编代码。</p><p>计算新容量的函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// js-objects.h</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">uint32_t</span> kMinAddedElementsCapacity = <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// code-stub-assembler.cc</span></span><br><span class="line"><span class="function">Node* <span class="title">CodeStubAssembler::CalculateNewElementsCapacity</span><span class="params">(Node* old_capacity,</span></span></span><br><span class="line"><span class="params"><span class="function">                                                      ParameterMode mode)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">CSA_SLOW_ASSERT</span>(<span class="keyword">this</span>, <span class="built_in">MatchesParameterMode</span>(old_capacity, mode));</span><br><span class="line">  Node* half_old_capacity = <span class="built_in">WordOrSmiShr</span>(old_capacity, <span class="number">1</span>, mode);</span><br><span class="line">  Node* new_capacity = <span class="built_in">IntPtrOrSmiAdd</span>(half_old_capacity, old_capacity, mode);</span><br><span class="line">  Node* padding =</span><br><span class="line">      <span class="built_in">IntPtrOrSmiConstant</span>(JSObject::kMinAddedElementsCapacity, mode);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">IntPtrOrSmiAdd</span>(new_capacity, padding, mode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以扩容后新容量计公式为：</p><p><code>new_capacity = old_capacity /2 + old_capacity + 16</code></p><blockquote><p>即老的容量的 1.5 倍加上 16 。</p></blockquote><p>初始化为 4 个，当 push 第 5 个的时候，容量将会变成：</p><p><code>new_capacity = 4 / 2 + 4 + 16 = 22</code></p><p>接着申请一块这么大的内存，把老的数据拷过去，把新元素放在当前 length 位置，然后将数组的 length + 1，并返回 length。</p><p>所以，扩容可以分为以下几步：</p><p>push 操作时，发现数组内存不足<br>申请 new_capacity = old_capacity /2 + old_capacity + 16 那么长度的内存空间<br>将数组拷贝到新内存中<br>把新元素放在当前 length 位置<br>数组的 length + 1<br>返回 length<br>整个过程，用户是无感知的，不像 C，需用用户手动申请内存空间。</p><p>当数组执行 pop 操作时，会判断 pop 后数组的容量，是否需要进行减容。</p><p>不同于数组的 push 使用汇编实现的， pop 使用 c++ 实现的。</p><p>判断是否进行减容：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="number">2</span> * length &lt;= capacity) &#123;</span><br><span class="line">  <span class="comment">// If more than half the elements won&#x27;t be used, trim the array.</span></span><br><span class="line">  isolate-&gt;<span class="built_in">heap</span>()-&gt;<span class="built_in">RightTrimFixedArray</span>(*backing_store, capacity - length);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// Otherwise, fill the unused tail with holes.</span></span><br><span class="line">  BackingStore::<span class="built_in">cast</span>(*backing_store)-&gt;<span class="built_in">FillWithHoles</span>(length, old_length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以，当数组 pop 后，如果数组容量大于等于 length 的 2 倍，则进行容量调整，使用 RightTrimFixedArray 函数，计算出需要释放的空间大小，做好标记，等待 GC 回收；如果数组容量小于 length 的 2 倍，则用 holes 对象填充。</p><p>所以，减容可以分为以下几步：</p><p>pop 操作时，获取数组 length<br>获取 length - 1 上的元素（要删除的元素）<br>数组 length - 1<br>判断数组的总容量是否大于等于 length - 1 的 2 倍<br>是的话，使用 RightTrimFixedArray 函数，计算出需要释放的空间大小，并做好标记，等待 GC 回收<br>不是的话，用 holes 对象填充<br>返回要删除的元素</p>]]></content:encoded>
      
      
      <category domain="http://zhoujunxiong.gitee.com/categories/JS%E5%8E%9F%E7%90%86/">JS原理</category>
      
      
      <category domain="http://zhoujunxiong.gitee.com/tags/%E5%89%8D%E7%AB%AF/">前端</category>
      
      <category domain="http://zhoujunxiong.gitee.com/tags/JS%E5%8E%9F%E7%90%86/">JS原理</category>
      
      
      <comments>http://zhoujunxiong.gitee.com/2022/02/13/%E5%89%8D%E7%AB%AF/JS%E5%8E%9F%E7%90%86/V8%E4%B8%AD%E7%9A%84JS%E6%95%B0%E7%BB%84/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Nuxt3</title>
      <link>http://zhoujunxiong.gitee.com/2022/02/06/%E5%89%8D%E7%AB%AF/%E6%A1%86%E6%9E%B6/Nuxt3/</link>
      <guid>http://zhoujunxiong.gitee.com/2022/02/06/%E5%89%8D%E7%AB%AF/%E6%A1%86%E6%9E%B6/Nuxt3/</guid>
      <pubDate>Sun, 06 Feb 2022 14:00:30 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;Nuxt3安装&quot;&gt;&lt;a href=&quot;#Nuxt3安装&quot; class=&quot;headerlink&quot; title=&quot;Nuxt3安装&quot;&gt;&lt;/a&gt;Nuxt3安装&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://v3.nuxtjs.org/getting-started/int</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="Nuxt3安装"><a href="#Nuxt3安装" class="headerlink" title="Nuxt3安装"></a>Nuxt3安装</h2><p><a href="https://v3.nuxtjs.org/getting-started/introduction">官网</a></p><p>运行命令<code>npx nuxi init nuxt3-app</code>即可创建一个项目</p><blockquote><p>node版本需要高于v14.16.0</p></blockquote><p>然后会生成一些文件和目录</p><ul><li>.nuxt </li><li>.output</li><li>assets</li><li>components 这个目录下可以创建一个全局组件</li><li>composables 这个目录下可以创建一个全局组件</li><li>layouts 布局相关的组件</li><li>middleware 中间件</li><li>pages 具体的页面</li><li>plugins</li><li>public</li><li>server</li><li>.gitignore</li><li>app.vue</li><li>nuxt.config.ts</li><li>package.json</li><li>tsconfig.json</li></ul><h2 id="pages"><a href="#pages" class="headerlink" title="pages"></a>pages</h2><p><code>pages</code>包含了项目中所有的页面，相当于是路由</p><p>使用之前需要在页面添加一个<code>&lt;NuxtPage /&gt;</code>相当于<code>&lt;router-view /&gt;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;NuxtPage /&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>在<code>pages</code>中使用约定路由进行页面的跳转</p><h3 id="最简单的路由"><a href="#最简单的路由" class="headerlink" title="最简单的路由"></a>最简单的路由</h3><p>直接在<code>pages</code>中添加一个文件即可</p><p>例如，添加一个<code>index.vue</code></p><blockquote><p>默认会访问<code>index</code>页面</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;hello vue3 nuxt3&lt;/h1&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">// 会生成想下面一样的路由</span><br><span class="line">&lt;!-- [</span><br><span class="line">  &#123;</span><br><span class="line">    path: &#x27;/&#x27;,</span><br><span class="line">    component: &#x27;~/pages/index.vue&#x27;,</span><br><span class="line">    name: &#x27;index&#x27;,</span><br><span class="line">  &#125;,</span><br><span class="line">] --&gt;</span><br></pre></td></tr></table></figure><h3 id="动态路由之参数路由"><a href="#动态路由之参数路由" class="headerlink" title="动态路由之参数路由"></a>动态路由之参数路由</h3><p>如果我们在文件名或者文件夹名称里面包含了<code>方括号</code>，它们将被转换为<code>动态路由参数</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// -| pages/</span><br><span class="line">// ---| users-[group]/</span><br><span class="line">// -----| [id].vue</span><br><span class="line">// 上面案例我们可以在组件[id].vue中访问group、id这两个参数:</span><br><span class="line">// /users-admins/123   group就是admins，id就是123</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &#123;&#123; $route.params.group &#125;&#125;</span><br><span class="line">  &#123;&#123; $route.params.id &#125;&#125;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h3 id="动态路由之嵌套路由"><a href="#动态路由之嵌套路由" class="headerlink" title="动态路由之嵌套路由"></a>动态路由之嵌套路由</h3><p>目录和文件同名，就制造了嵌套路由。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-| pages/</span><br><span class="line">---| parent/</span><br><span class="line">------| child.vue</span><br><span class="line">---| parent.vue</span><br></pre></td></tr></table></figure><p>child.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;child page&lt;/h1&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>父组件中使用NuxtChild组件显示嵌套子组件内容，parent.vue：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;parent page&lt;/h1&gt;</span><br><span class="line">    &lt;!-- 子组件出口 --&gt;</span><br><span class="line">    &lt;NuxtChild&gt;&lt;/NuxtChild&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>试一下，index.vue</p><p><code>&lt;NuxtLink to=&quot;/parent/child&quot;&gt;Parent&lt;/NuxtLink&gt;</code></p><p>那如果只使用<code>/parent</code>会怎么样？发现内容没有了，显然需要一个<code>&#123;path: &#39;/parent/&#39;&#125;</code>子路由</p><p>解决方法也很简单，在<code>parent/目录</code>下加一个<code>index.vue</code>即可。</p><h2 id="Layout"><a href="#Layout" class="headerlink" title="Layout"></a>Layout</h2><p>那些放在<code>layouts/目录</code>下的SFC会被自动加载进来，如果我们创建的SFC名为<code>default.vue</code>，将会被用于项目所有页面中作为布局模板</p><h3 id="默认布局"><a href="#默认布局" class="headerlink" title="默认布局"></a>默认布局</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;default layout&lt;/h1&gt;</span><br><span class="line">  &lt;!-- 子路由的内容都会通过这个slot插入 --&gt;</span><br><span class="line">  &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style lang=&quot;&quot;&gt;</span><br><span class="line">  </span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="自定义布局文件"><a href="#自定义布局文件" class="headerlink" title="自定义布局文件"></a>自定义布局文件</h3><p>如果我们的布局文件名不叫default，而是别的，比如custom.vue，想要使用它们，就必须在某个页面中设置页面属性layout。</p><p>custom.vue：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    内容来自自定义布局页custom.vue！</span><br><span class="line">    &lt;slot /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>可以在helloworld.vue中试试custom这个布局，helloworld.vue：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  layout: &quot;custom&quot;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="NuxtLayout"><a href="#NuxtLayout" class="headerlink" title="NuxtLayout"></a>NuxtLayout</h3><p><code>NuxtLayout</code>可以充分使用<code>layout</code>的<code>slot</code>能力</p><p>可以使用<code>NuxtLayout</code>组件结合<code>slots</code>获得完全控制力，同时需要设置组件选项<code>layout: false</code>。</p><p>helloworld.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;NuxtLayout name=&quot;custom&quot;&gt;</span><br><span class="line">    &lt;template #header&gt;</span><br><span class="line"> &lt;h1&gt;hello page&lt;/h1&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">    some content...</span><br><span class="line">&lt;/NuxtLayout&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  layout: false,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>修改一下custom.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    内容来自自定义布局页custom.vue！</span><br><span class="line">    &lt;slot name=&quot;header&quot;/&gt;</span><br><span class="line">    &lt;slot /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>我们甚至能组合多个布局页：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;NuxtLayout name=&quot;custom&quot;&gt;</span><br><span class="line">      &lt;template #header&gt;</span><br><span class="line">        &lt;h1&gt;hello page&lt;/h1&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">      some content...</span><br><span class="line">    &lt;/NuxtLayout&gt;</span><br><span class="line"></span><br><span class="line">    &lt;NuxtLayout name=&quot;default&quot;&gt;</span><br><span class="line">      some content...</span><br><span class="line">    &lt;/NuxtLayout&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h2 id="components"><a href="#components" class="headerlink" title="components"></a>components</h2><h3 id="普通组件"><a href="#普通组件" class="headerlink" title="普通组件"></a>普通组件</h3><p>Vue组件放在<code>components/目录</code>，这些组件可以被用在页面和其他组件中，以往我们使用这些组件需要导入并注册它们，但Nuxt会自动导入<code>components/</code>目录中的任意组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">| components/</span><br><span class="line">--| TheHeader.vue</span><br><span class="line">--| TheFooter.vue</span><br></pre></td></tr></table></figure><p>layouts/default.vue:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;TheHeader /&gt;</span><br><span class="line">    &lt;slot /&gt;</span><br><span class="line">    &lt;TheFooter /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h3 id="组件名称约定"><a href="#组件名称约定" class="headerlink" title="组件名称约定"></a>组件名称约定</h3><p>没有嵌套的组件会以文件名直接导入，但如果存在嵌套关系哪？例如下面的路径：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| components/</span><br><span class="line">--| base/</span><br><span class="line">----| foo/</span><br><span class="line">------| Button.vue</span><br></pre></td></tr></table></figure><p>那么组件名称将会基于路径和文件名连起来，比如上面的base/foo/Button.vue注册名称将会是BaseFooButton，将来用起来会像下面这样：</p><p><code>&lt;BaseFooButton /&gt;</code></p><h3 id="组件懒加载"><a href="#组件懒加载" class="headerlink" title="组件懒加载"></a>组件懒加载</h3><p>如果在组件名前面加上Lazy前缀，则可以按需懒加载该组件，可用于优化打包尺寸。</p><p>比如，下面的用法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;Mountains&lt;/h1&gt;</span><br><span class="line">    &lt;LazyMountainsList v-if=&quot;show&quot; /&gt;</span><br><span class="line">    &lt;button v-if=&quot;!show&quot; @click=&quot;show = true&quot;&gt;显示列表&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">  import &#123;ref&#125; from &#x27;vue&#x27;</span><br><span class="line">  const show = ref(false)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="数据获取"><a href="#数据获取" class="headerlink" title="数据获取"></a>数据获取</h2><p>nuxt3中提供的数据获取函数有以下四个：</p><ul><li>useFetch</li><li>useLazyFetch</li><li>useAsyncData</li><li>useLazyAsyncData<br>注意：它们都必须在setup或生命周期钩子中使用</li></ul><h3 id="useAsyncData"><a href="#useAsyncData" class="headerlink" title="useAsyncData"></a>useAsyncData</h3><p>在页面、组件或插件中都可以使用useAsyncData获取那些异步数据。比如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">  <span class="attr">data</span>: <span class="title class_">Ref</span>&lt;<span class="title class_">DataT</span>&gt;, <span class="comment">// 返回的数据</span></span><br><span class="line">  <span class="attr">pending</span>: <span class="title class_">Ref</span>&lt;boolean&gt;, <span class="comment">// 加载状态指示器</span></span><br><span class="line">  <span class="attr">refresh</span>: <span class="function">(<span class="params">force?: boolean</span>) =&gt;</span> <span class="title class_">Promise</span>&lt;<span class="keyword">void</span>&gt;, <span class="comment">// 强制刷新函数</span></span><br><span class="line">  error?: any <span class="comment">// 请求失败的错误信息</span></span><br><span class="line">&#125; = <span class="title function_">useAsyncData</span>(</span><br><span class="line">  <span class="attr">key</span>: string,<span class="comment">// 唯一键用于多次请求结果去重</span></span><br><span class="line">  <span class="attr">fn</span>: <span class="function">() =&gt;</span> <span class="title class_">Object</span>,<span class="comment">// 返回数值的异步函数</span></span><br><span class="line">  <span class="comment">// lazy - 是否在路由之后才请求数据，server - 是否在服务端请求数据</span></span><br><span class="line">  options?: &#123; <span class="attr">lazy</span>: boolean, <span class="attr">server</span>: boolean &#125; </span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>获取待办事项数据，index.vue：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- 待办列表 --&gt;</span><br><span class="line">    &lt;div v-for=&quot;todo in todos&quot; :key=&quot;todo.id&quot;&gt;</span><br><span class="line">      &lt;input type=&quot;checkbox&quot; v-model=&quot;todo.completed&quot;&gt;</span><br><span class="line">      &lt;strong&gt;&#123;&#123;todo.title&#125;&#125;&lt;/strong&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">const &#123; data: todos &#125; = await useAsyncData(</span><br><span class="line">  &#x27;count&#x27;, () =&gt; $fetch(&#x27;/api/todos&#x27;))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>$fetch使用参考ohmyfetch</p></blockquote><h3 id="useFetch"><a href="#useFetch" class="headerlink" title="useFetch"></a>useFetch</h3><p>页面、组件或者插件中可以使用useFetch获取任意URL资源。<br>useFetch是对useAsyncData包装，自动生成key同时推断响应类型，用起来更简单。<br>看下面方法签名，基本完全相同：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">  <span class="attr">data</span>: <span class="title class_">Ref</span>&lt;<span class="title class_">DataT</span>&gt;,</span><br><span class="line">  <span class="attr">pending</span>: <span class="title class_">Ref</span>&lt;boolean&gt;,</span><br><span class="line">  <span class="attr">refresh</span>: <span class="function">(<span class="params">force?: boolean</span>) =&gt;</span> <span class="title class_">Promise</span>&lt;<span class="keyword">void</span>&gt;,</span><br><span class="line">  error?: any</span><br><span class="line">&#125; = <span class="title function_">useFetch</span>(<span class="attr">url</span>: string, options?)</span><br></pre></td></tr></table></figure><h3 id="useLazyAsyncData"><a href="#useLazyAsyncData" class="headerlink" title="useLazyAsyncData"></a>useLazyAsyncData</h3><p>该方法等效于useAsyncData，仅仅设置了lazy选项为true，也就是它不会阻塞路由导航，这意味着我们需要处理data为null的情况（或者通过default选购给data设置一个默认值）</p><p><code>useFetch</code></p><p>页面、组件或者插件中可以使用useFetch获取任意URL资源。</p><p>useFetch是对useAsyncData包装，自动生成key同时推断响应类型，用起来更简单。</p><p>看下面方法签名，基本完全相同：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">  <span class="attr">data</span>: <span class="title class_">Ref</span>&lt;<span class="title class_">DataT</span>&gt;,</span><br><span class="line">  <span class="attr">pending</span>: <span class="title class_">Ref</span>&lt;boolean&gt;,</span><br><span class="line">  <span class="attr">refresh</span>: <span class="function">(<span class="params">force?: boolean</span>) =&gt;</span> <span class="title class_">Promise</span>&lt;<span class="keyword">void</span>&gt;,</span><br><span class="line">  error?: any</span><br><span class="line">&#125; = <span class="title function_">useFetch</span>(<span class="attr">url</span>: string, options?)</span><br></pre></td></tr></table></figure><h3 id="useLazyFetch"><a href="#useLazyFetch" class="headerlink" title="useLazyFetch"></a>useLazyFetch</h3><p>该方法等效于useFetch，仅设置了lazy选项为true，所以它不会阻塞路由导航，这意味着我们需要处理data为null的情况（或者通过default选购给data设置一个默认值）</p><p>最佳实践</p><p>只选取需要的数据</p><p>由于请求回来的数据会存储在页面payload中，甚至包括那些没有用到的字段，所以文档中明确建议大家只选择那些组件用到的数据，我们可以设置$fetch的pick选项。</p><p>比如，下面的用法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="attr">data</span>: mountain &#125; = <span class="keyword">await</span> <span class="title function_">useFetch</span>(<span class="string">&#x27;/api/mountains/everest&#x27;</span>, &#123; </span><br><span class="line">  <span class="attr">pick</span>: [<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;description&#x27;</span>] </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="composables"><a href="#composables" class="headerlink" title="composables"></a>composables</h3><p>Nuxt3提供了 <code>useState</code> 创建响应式且服务端友好的跨组件状态共享能力。</p><p><code>useState</code> 是服务端友好的 ref 替换。它的值在服务端渲染（客户端注水的过程中）将被保留并通过唯一key在组件间共享。</p><p>声明一个状态，index.vue</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> counter = <span class="title function_">useState</span>(<span class="string">&quot;counter&quot;</span>, <span class="function">() =&gt;</span> <span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">1000</span>))</span><br><span class="line">&lt;button @click=<span class="string">&quot;counter++&quot;</span>&gt;+&lt;/button&gt;</span><br><span class="line">&#123;&#123; counter &#125;&#125;</span><br><span class="line">&lt;button @click=<span class="string">&quot;counter--&quot;</span>&gt;-&lt;/button&gt;</span><br></pre></td></tr></table></figure><p>共享状态</p><p>我们的全局状态当然想要在组件之间共享，此时可以利用nuxt的composables自动导入特性，把它们定义在composables目录中，这样他们将成为全局类型安全的状态。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">composables/useCounter.<span class="property">ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">useCounter</span> = (<span class="params"></span>) =&gt;</span><br><span class="line">  <span class="title function_">useState</span>(<span class="string">&quot;counter&quot;</span>, <span class="function">() =&gt;</span> <span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">1000</span>));</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://zhoujunxiong.gitee.com/categories/%E6%A1%86%E6%9E%B6/">框架</category>
      
      
      <category domain="http://zhoujunxiong.gitee.com/tags/%E5%89%8D%E7%AB%AF/">前端</category>
      
      <category domain="http://zhoujunxiong.gitee.com/tags/%E6%A1%86%E6%9E%B6/">框架</category>
      
      <category domain="http://zhoujunxiong.gitee.com/tags/Nuxt3/">Nuxt3</category>
      
      
      <comments>http://zhoujunxiong.gitee.com/2022/02/06/%E5%89%8D%E7%AB%AF/%E6%A1%86%E6%9E%B6/Nuxt3/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>flutter之animation</title>
      <link>http://zhoujunxiong.gitee.com/2022/02/04/flutter/flutter%E4%B9%8Bkey/</link>
      <guid>http://zhoujunxiong.gitee.com/2022/02/04/flutter/flutter%E4%B9%8Bkey/</guid>
      <pubDate>Fri, 04 Feb 2022 00:06:27 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;key&quot;&gt;&lt;a href=&quot;#key&quot; class=&quot;headerlink&quot; title=&quot;key&quot;&gt;&lt;/a&gt;key&lt;/h2&gt;&lt;p&gt;和&lt;code&gt;react&lt;/code&gt;中的key作用是类似的，在对视图进行更新时，flutter也会对比key&lt;/p&gt;
&lt;h3 id</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="key"><a href="#key" class="headerlink" title="key"></a>key</h2><p>和<code>react</code>中的key作用是类似的，在对视图进行更新时，flutter也会对比key</p><h3 id="奇怪的现象"><a href="#奇怪的现象" class="headerlink" title="奇怪的现象"></a>奇怪的现象</h3><p>例如有下面这一个组件</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyText</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyText(<span class="keyword">this</span>.index, &#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">int</span> index;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _MyTextState createState() =&gt; _MyTextState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_MyTextState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">MyText</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Text(</span><br><span class="line">      <span class="string">&quot;文本 <span class="subst">$&#123;widget.index&#125;</span>&quot;</span>,</span><br><span class="line">      style: TextStyle(fontSize: <span class="number">20</span>, color: Colors.blueAccent[widget.index * <span class="number">100</span>]),</span><br><span class="line">      textAlign: TextAlign.center,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后进行这样的调用,</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ListView(</span><br><span class="line">  children: &lt;Widget&gt;[</span><br><span class="line">    MyText(<span class="number">1</span>),</span><br><span class="line">    MyText(<span class="number">2</span>),</span><br><span class="line">    MyText(<span class="number">3</span>),</span><br><span class="line">  ],</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.svg" data-lazy-src="https://gitee.com/zhoujunxiong/BlogImg/raw/master/blog/20220204105449.png"></p><p>当你删除第二个时，就会发生奇怪的现象, 明明删除第二个，但是第三个缺没了</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ListView(</span><br><span class="line">  children: &lt;Widget&gt;[</span><br><span class="line">    MyText(<span class="number">1</span>),</span><br><span class="line">    <span class="comment">// MyText(2),</span></span><br><span class="line">    MyText(<span class="number">3</span>),</span><br><span class="line">  ],</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.svg" data-lazy-src="https://gitee.com/zhoujunxiong/BlogImg/raw/master/blog/20220204105550.png"></p><p>需要注意，这种情况只会发生在<code>stateFullWidget</code>中，如果是<code>statelessWidget</code>，那么这种情况不会发生</p><blockquote><p>Stateless的信息在widget类里，Stateful的信息在state里</p></blockquote><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTextLess</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">int</span> index;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> MyTextLess(<span class="keyword">this</span>.index, &#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Text(</span><br><span class="line">      <span class="string">&quot;文本 <span class="subst">$index</span>&quot;</span>,</span><br><span class="line">      style: TextStyle(fontSize: <span class="number">20</span>, color: Colors.blueAccent[index * <span class="number">100</span>]),</span><br><span class="line">      textAlign: TextAlign.center,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LocalKey"><a href="#LocalKey" class="headerlink" title="LocalKey"></a>LocalKey</h3><p>一般只需要增加一个<code>key</code>就可以解决了</p><p><code>LocalKey</code>只会在同层进行比较，<code>LocalKey</code>根据不同的情况会有很多种类的key</p><ul><li>ValueKey 直接根据传入的值来比较 (使用<code>==</code>进行比较)</li><li>ObjectKey 根据传入的对象来比较（使用<code>identical(a, b)</code>进行比较）</li><li>UniqueKey 生成一个唯一的key</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MyText(<span class="number">1</span>, key: ValueKey(<span class="number">1</span>)),</span><br><span class="line">MyText(<span class="number">2</span>, key: ValueKey(<span class="number">2</span>)),</span><br><span class="line">MyText(<span class="number">3</span>, key: ValueKey(<span class="number">3</span>)),</span><br></pre></td></tr></table></figure><h3 id="globalKey"><a href="#globalKey" class="headerlink" title="globalKey"></a>globalKey</h3><ul><li><code>globalKey</code>可以让<code>state</code>跟着<code>widget</code>一起变化（跨层级）</li><li>还可以通过<code>globalKey</code>拿到组件的<code>state</code></li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> state = (_globalKey.currentState <span class="keyword">as</span> MyTextState);</span><br><span class="line"><span class="keyword">final</span> widget = (_globalKey.currentWidget <span class="keyword">as</span> MyText);</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://zhoujunxiong.gitee.com/categories/flutter/">flutter</category>
      
      
      <category domain="http://zhoujunxiong.gitee.com/tags/flutter/">flutter</category>
      
      <category domain="http://zhoujunxiong.gitee.com/tags/dart/">dart</category>
      
      
      <comments>http://zhoujunxiong.gitee.com/2022/02/04/flutter/flutter%E4%B9%8Bkey/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>flutter之animation</title>
      <link>http://zhoujunxiong.gitee.com/2022/02/03/flutter/flutter%E4%B9%8Banimation/</link>
      <guid>http://zhoujunxiong.gitee.com/2022/02/03/flutter/flutter%E4%B9%8Banimation/</guid>
      <pubDate>Thu, 03 Feb 2022 06:06:27 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;隐式动画&quot;&gt;&lt;a href=&quot;#隐式动画&quot; class=&quot;headerlink&quot; title=&quot;隐式动画&quot;&gt;&lt;/a&gt;隐式动画&lt;/h2&gt;&lt;h3 id=&quot;AnimatedContainer&quot;&gt;&lt;a href=&quot;#AnimatedContainer&quot; class=&quot;he</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="隐式动画"><a href="#隐式动画" class="headerlink" title="隐式动画"></a>隐式动画</h2><h3 id="AnimatedContainer"><a href="#AnimatedContainer" class="headerlink" title="AnimatedContainer"></a>AnimatedContainer</h3><p><code>AnimatedContainer</code>就和我们日常css中的一些动画属性是类似的</p><p>你只需要定义一个<code>duration</code>就可以了，然后当你改变其它属性时就会进行自动的计算</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">AnimatedContainer(</span><br><span class="line">  duration: <span class="keyword">const</span> <span class="built_in">Duration</span>(seconds: <span class="number">1</span>),</span><br><span class="line">  curve: Curves.easeInOut,</span><br><span class="line">  width: _width, <span class="comment">// _width是一个变量</span></span><br><span class="line">  height: _height,</span><br><span class="line">  alignment: Alignment.center,</span><br><span class="line">  color: Colors.red,</span><br><span class="line">  child: Text(<span class="string">&#x27;AnimatedContainer&#x27;</span>),</span><br><span class="line">),</span><br></pre></td></tr></table></figure><p>与其类似的还有</p><ul><li>AnimatedPadding(padding: padding, duration: duration)</li><li>AnimatedOpacity(opacity: opacity, duration: duration)</li></ul><h3 id="TweenAnimationBuilder"><a href="#TweenAnimationBuilder" class="headerlink" title="TweenAnimationBuilder"></a>TweenAnimationBuilder</h3><p><code>TweenAnimationBuilder</code>通过传入一个<code>Tween</code>和<code>duration</code>来实现动画效果</p><p><code>Tween</code>指定了动画的起始值和结束值，然后通过一个<code>builder</code>来构建组件</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">TweenAnimationBuilder(</span><br><span class="line">    tween: Tween(begin: <span class="number">1.0</span>, end: <span class="number">150.0</span>),</span><br><span class="line">    duration: <span class="built_in">Duration</span>(seconds: <span class="number">5</span>),</span><br><span class="line">    builder: (BuildContext build, <span class="built_in">double</span> value, child) &#123;</span><br><span class="line">      <span class="keyword">return</span> Container(</span><br><span class="line">        color: Colors.amber,</span><br><span class="line">        height: value, <span class="comment">// 这个数值会自动更新，从1.0到150.0</span></span><br><span class="line">        alignment: Alignment.center,</span><br><span class="line">        width: <span class="number">300</span>,</span><br><span class="line">        child: Text(<span class="string">&#x27;TweenAnimationBuilder&#x27;</span>),</span><br><span class="line">      );</span><br><span class="line">    &#125;),</span><br></pre></td></tr></table></figure><h3 id="AnimatedSwitcher"><a href="#AnimatedSwitcher" class="headerlink" title="AnimatedSwitcher"></a>AnimatedSwitcher</h3><p>有时候，我们需要切换不同的组件有一个动画效果，这个时候就需要用到<code>AnimatedSwitcher</code></p><p><code>AnimatedSwitcher</code>默认的效果是<code>FadeTransition</code>, 可以通过<code>transitionBuilder</code>进行修改</p><ul><li>FadeTransition: opacity</li><li>ScaleTransition: scale</li><li>RotationTransition: turns</li></ul><p><code>child</code>就是你需要展示和切换的组件</p><blockquote><p>注意在flutter中，相同类型组件切换会被复用，这个时候可以用<code>ValueKey</code>或者<code>UniqueKey</code>生成一个唯一key</p></blockquote><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">AnimatedSwitcher(</span><br><span class="line">  transitionBuilder: (child, animation) &#123;</span><br><span class="line">    <span class="comment">// 默认是 FadeTransition opacity</span></span><br><span class="line">    <span class="comment">// ScaleTransition scale</span></span><br><span class="line">    <span class="comment">// RotationTransition turns</span></span><br><span class="line">    <span class="keyword">return</span> RotationTransition(</span><br><span class="line">      child: child,</span><br><span class="line">      turns: animation,</span><br><span class="line">      <span class="comment">// opacity: animation,</span></span><br><span class="line">    );</span><br><span class="line">  &#125;,</span><br><span class="line">  duration: <span class="built_in">Duration</span>(milliseconds: <span class="number">500</span>),</span><br><span class="line">  child: isReverse</span><br><span class="line">      ? Text(</span><br><span class="line">          <span class="string">&#x27;Annie&#x27;</span>,</span><br><span class="line">          key: ValueKey(<span class="string">&#x27;Annie&#x27;</span>),</span><br><span class="line">          style: TextStyle(fontSize: <span class="number">40</span>),</span><br><span class="line">        )</span><br><span class="line">      : Text(</span><br><span class="line">          <span class="string">&#x27;Hi&#x27;</span>,</span><br><span class="line">          key: UniqueKey(),</span><br><span class="line">          style: TextStyle(fontSize: <span class="number">40</span>),</span><br><span class="line">        ),</span><br><span class="line">),</span><br></pre></td></tr></table></figure><h2 id="手动动画"><a href="#手动动画" class="headerlink" title="手动动画"></a>手动动画</h2><p>有时候我们需要精确控制动画，这个时候就需要<code>AnimationController</code></p><p><code>AnimationController</code>可以指定动画的时间，以及动画帧数</p><p>一般来说，使用<code>vsync: this</code>来指定帧数(混入一个<code>SingleTickerProviderStateMixin</code>类)</p><p>同时还可以传入<code>lowerBound</code>和<code>upperBound</code>来指定动画的数值范围，默认为0到1，组件内部是帮你生成了一个<code>Tween</code></p><ul><li>forward</li><li>reverse</li><li>repeat</li><li>stop 在当前位置停止动画</li><li>reset 停止动画并回归原位</li><li>dispose</li><li>animateTo</li><li>animateBack</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_AnnieDemo2State</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">AnnieDemo2</span>&gt; <span class="title">with</span> <span class="title">SingleTickerProviderStateMixin</span> </span>&#123;</span><br><span class="line">  <span class="keyword">late</span> <span class="keyword">final</span> AnimationController controller;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    controller = AnimationController(</span><br><span class="line">      duration: <span class="keyword">const</span> <span class="built_in">Duration</span>(seconds: <span class="number">1</span>),</span><br><span class="line">      <span class="comment">// lowerBound: 100,</span></span><br><span class="line">      <span class="comment">// upperBound: 200,</span></span><br><span class="line">      vsync: <span class="keyword">this</span>,</span><br><span class="line">    );</span><br><span class="line">    controller.repeat();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> dispose() &#123;</span><br><span class="line">    <span class="keyword">super</span>.dispose();</span><br><span class="line">    controller.dispose();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RotationTransition-ScaleTransition-SlideTransition"><a href="#RotationTransition-ScaleTransition-SlideTransition" class="headerlink" title="RotationTransition, ScaleTransition, SlideTransition"></a>RotationTransition, ScaleTransition, SlideTransition</h3><p>顾名思义，flutter为我们封装了常用的一些<code>Transition</code>, 直接传入<code>controller</code>就用了</p><p>一般来说，我们有两种方法修改<code>Tween</code>的值</p><ul><li><code>Tween</code>类的<code>animate</code>方法 （ 这种往往更常用，可以通过<code>chain</code>方法添加<code>CurveTween</code>指定动画执行的时机 ）</li><li><code>AnimationController</code>的<code>drive</code>方法</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">RotationTransition(</span><br><span class="line">  turns: controller,</span><br><span class="line">  child: Container(</span><br><span class="line">    width: <span class="number">100</span>,</span><br><span class="line">    height: <span class="number">100</span>,</span><br><span class="line">    color: Colors.greenAccent,</span><br><span class="line">  ),</span><br><span class="line">),</span><br><span class="line">ElevatedButton(</span><br><span class="line">  onPressed: () &#123;</span><br><span class="line">    <span class="keyword">if</span> (controller.isAnimating) &#123;</span><br><span class="line">      controller.reset();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      controller.repeat();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  child: Text(<span class="string">&#x27;reset&#x27;</span>),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">ScaleTransition(</span><br><span class="line">  <span class="comment">// scale: controller.drive(Tween(begin: 0.1, end: 1.0)),</span></span><br><span class="line">  scale: Tween(begin: <span class="number">0.1</span>, end: <span class="number">1.0</span>)</span><br><span class="line">      .chain(</span><br><span class="line">        CurveTween(curve: Interval(<span class="number">0</span>, <span class="number">0.5</span>)),</span><br><span class="line">      )</span><br><span class="line">      <span class="comment">// .chain(Tween(begin: 1, end: 0.1))</span></span><br><span class="line">      <span class="comment">// .chain(</span></span><br><span class="line">      <span class="comment">//   CurveTween(curve: Interval(0.5, 1)),</span></span><br><span class="line">      <span class="comment">// )</span></span><br><span class="line">      .animate(controller),</span><br><span class="line">  <span class="comment">// .drive(Tween(begin: 1, end: 0.5)),</span></span><br><span class="line">  child: Container(</span><br><span class="line">    width: <span class="number">100</span>,</span><br><span class="line">    height: <span class="number">100</span>,</span><br><span class="line">    color: Colors.greenAccent,</span><br><span class="line">  ),</span><br><span class="line">),</span><br></pre></td></tr></table></figure><p>如果你的<code>Tween</code>想要有多个关键帧，可以使用<code>TweenSequence</code></p><p>通过传入多个<code>TweenSequenceItem</code>指定多个关键帧</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">SlideTransition(</span><br><span class="line">    position: TweenSequence&lt;Offset&gt;(</span><br><span class="line">      &lt;TweenSequenceItem&lt;Offset&gt;&gt;[</span><br><span class="line">        TweenSequenceItem&lt;Offset&gt;(</span><br><span class="line">          tween: Tween&lt;Offset&gt;(</span><br><span class="line">            begin: Offset(<span class="number">0</span>, <span class="number">0</span>),</span><br><span class="line">            end: Offset(<span class="number">0</span>, <span class="number">10</span>),</span><br><span class="line">          ),</span><br><span class="line">          weight: <span class="number">10.0</span>,</span><br><span class="line">        ),</span><br><span class="line">        TweenSequenceItem&lt;Offset&gt;(</span><br><span class="line">          tween: Tween&lt;Offset&gt;(</span><br><span class="line">            begin: Offset(<span class="number">0</span>, <span class="number">10</span>),</span><br><span class="line">            end: Offset(<span class="number">4</span>, <span class="number">5</span>),</span><br><span class="line">          ),</span><br><span class="line">          weight: <span class="number">60.0</span>,</span><br><span class="line">        ),</span><br><span class="line">        TweenSequenceItem&lt;Offset&gt;(</span><br><span class="line">          tween: Tween&lt;Offset&gt;(</span><br><span class="line">            begin: Offset(<span class="number">4</span>, <span class="number">5</span>),</span><br><span class="line">            end: Offset(<span class="number">0</span>, <span class="number">0</span>),</span><br><span class="line">          ),</span><br><span class="line">          weight: <span class="number">60.0</span>,</span><br><span class="line">        ),</span><br><span class="line">      ],</span><br><span class="line">    ).animate(controller),</span><br><span class="line">    child: Container(</span><br><span class="line">      width: <span class="number">20</span>,</span><br><span class="line">      height: <span class="number">20</span>,</span><br><span class="line">      color: Colors.greenAccent,</span><br><span class="line">    ),</span><br><span class="line">  ),</span><br></pre></td></tr></table></figure><h3 id="AnimatedWidget"><a href="#AnimatedWidget" class="headerlink" title="AnimatedWidget"></a>AnimatedWidget</h3><p><code>AnimatedWidget</code>是一种简化自定义动画的组件, 省去了<code>setState</code>与<code>addListener</code>的操作</p><p>你只需要继承<code>AnimatedWidget</code>，初始化<code>listenable</code>(即<code>animationController</code>)，然后在<code>build</code>方法中添加你的动画</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnimatedWidgetDemo</span> <span class="keyword">extends</span> <span class="title">AnimatedWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> AnimatedWidgetDemo(&#123;Key? key, <span class="keyword">required</span> Animation&lt;<span class="built_in">double</span>&gt; animation&#125;) : <span class="keyword">super</span>(key: key, listenable: animation);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">final</span> animation = listenable <span class="keyword">as</span> Animation&lt;<span class="built_in">double</span>&gt;;</span><br><span class="line">    <span class="keyword">return</span> Center(</span><br><span class="line">      child: Container(</span><br><span class="line">        margin: <span class="keyword">const</span> EdgeInsets.symmetric(vertical: <span class="number">10</span>),</span><br><span class="line">        height: animation.value,</span><br><span class="line">        width: animation.value,</span><br><span class="line">        child: <span class="keyword">const</span> FlutterLogo(),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原理如下</p><p>首先它是继承自<code>StatefulWidget</code>, 帮你给传入的<code>AnimationController</code>添加<code>addListener</code>并<code>setState</code></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_AnimatedState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">AnimatedWidget</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    widget.listenable.addListener(_handleChange);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> didUpdateWidget(AnimatedWidget oldWidget) &#123;</span><br><span class="line">    <span class="keyword">super</span>.didUpdateWidget(oldWidget);</span><br><span class="line">    <span class="keyword">if</span> (widget.listenable != oldWidget.listenable) &#123;</span><br><span class="line">      oldWidget.listenable.removeListener(_handleChange);</span><br><span class="line">      widget.listenable.addListener(_handleChange);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> dispose() &#123;</span><br><span class="line">    widget.listenable.removeListener(_handleChange);</span><br><span class="line">    <span class="keyword">super</span>.dispose();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> _handleChange() &#123;</span><br><span class="line">    setState(() &#123;</span><br><span class="line">      <span class="comment">// The listenable&#x27;s state is our build state, and it changed already.</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) =&gt; widget.build(context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AnimatedBuilder"><a href="#AnimatedBuilder" class="headerlink" title="AnimatedBuilder"></a>AnimatedBuilder</h3><p><code>AnimatedBuilder</code>继承自<code>AnimatedWidget</code></p><p>它和<code>AnimatedWidget</code>作用类似，但是场景不同</p><p>它更适合直接对一个小的组件进行动画，不需要进行继承，直接传入<code>animation</code>与<code>builder</code>就可以使用，使用起来更方便</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnimatedBuilderDemo</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> AnimatedBuilderDemo(&#123;</span><br><span class="line">    Key? key,</span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">this</span>.animation,</span><br><span class="line">  &#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> Animation&lt;<span class="built_in">double</span>&gt; animation;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Center(</span><br><span class="line">      child: AnimatedBuilder(</span><br><span class="line">        animation: animation,</span><br><span class="line">        builder: (context, child) &#123;</span><br><span class="line">          <span class="keyword">return</span> SizedBox(</span><br><span class="line">            height: animation.value,</span><br><span class="line">            width: animation.value,</span><br><span class="line">            child: <span class="keyword">const</span> FlutterLogo(),</span><br><span class="line">          );</span><br><span class="line">        &#125;,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://zhoujunxiong.gitee.com/categories/flutter/">flutter</category>
      
      
      <category domain="http://zhoujunxiong.gitee.com/tags/flutter/">flutter</category>
      
      <category domain="http://zhoujunxiong.gitee.com/tags/dart/">dart</category>
      
      
      <comments>http://zhoujunxiong.gitee.com/2022/02/03/flutter/flutter%E4%B9%8Banimation/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>flutter之GetX</title>
      <link>http://zhoujunxiong.gitee.com/2022/01/28/flutter/flutter%E4%B9%8BGetX/</link>
      <guid>http://zhoujunxiong.gitee.com/2022/01/28/flutter/flutter%E4%B9%8BGetX/</guid>
      <pubDate>Fri, 28 Jan 2022 13:22:38 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;安装GetX-cli&quot;&gt;&lt;a href=&quot;#安装GetX-cli&quot; class=&quot;headerlink&quot; title=&quot;安装GetX-cli&quot;&gt;&lt;/a&gt;安装GetX-cli&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/jonataslaw</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="安装GetX-cli"><a href="#安装GetX-cli" class="headerlink" title="安装GetX-cli"></a>安装GetX-cli</h2><p><a href="https://github.com/jonataslaw/get_cli">文档</a></p><p>通过cli，我们可以快速搭建<code>GetX</code>的项目</p><p>cli安装命令<code>pub global activate get_cli</code></p><blockquote><p>不要使用<code>flutter pub global activate get_cli</code>, 高版本dart会有问题 </p></blockquote><p>然后配置环境变量</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;<span class="variable">$PATH</span>&quot;</span>:<span class="string">&quot;/usr/local/Caskroom/flutter/2.2.0/flutter/.pub-cache/bin&quot;</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;<span class="variable">$PATH</span>&quot;</span>:<span class="string">&quot;/usr/local/Caskroom/flutter/2.2.0/flutter/bin/cache/dart-sdk/bin&quot;</span></span><br></pre></td></tr></table></figure><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>使用命令<code>get create project projectName</code>进行项目的创建</p><h2 id="创建view"><a href="#创建view" class="headerlink" title="创建view"></a>创建view</h2><p>使用<code>get create view:connectDemo</code>创建view</p><p>会生成`app/views/views/connect_demo_view.dart``</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:get/get.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConnectDemoView</span> <span class="keyword">extends</span> <span class="title">GetView</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(<span class="string">&#x27;ConnectDemoView&#x27;</span>),</span><br><span class="line">        centerTitle: <span class="keyword">true</span>,</span><br><span class="line">      ),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: Text(</span><br><span class="line">          <span class="string">&#x27;ConnectDemoView is working&#x27;</span>,</span><br><span class="line">          style: TextStyle(fontSize: <span class="number">20</span>),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建Controller"><a href="#创建Controller" class="headerlink" title="创建Controller"></a>创建Controller</h2><p>创建conntroller可以使用命令<code>get create controller:connectDemo</code></p><p>之后会生成<code>app/controllers/connect_demo_controller.dart</code></p><p>这是一个基本的<code>Controller</code>,它继承自<code>GetxController</code></p><ul><li>onInit 初始化</li><li>onReady 小部件已经构建好了</li><li>onClose 小部件销毁的时候</li></ul><p><code>getx</code>还为我们提供了一些事件监听的函数</p><ul><li>ever</li><li>everAll</li><li>once</li><li>debounce</li><li>interval</li></ul><p>还有不同作用的依赖注入</p><ul><li>Get.put()： 不使用控制器实例也会被创建</li><li>Get.lazyPut()： 懒加载方式创建实例，只有在使用时才创建</li><li>Get.putAsync()： <code>Get.put()</code>的异步版版本</li><li>Get.create()： 每次使用都会创建一个新的实例</li></ul><blockquote><p>如果只是需要更新某一个地方，可以增加id, <code>upadte([&#39;_count&#39;]); GetBuilder(id: &#39;_count&#39;, builder: (context) =&gt; Text(&#39;$_count&#39;));</code></p></blockquote><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:get/get.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConnectDemoController</span> <span class="keyword">extends</span> <span class="title">GetxController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> count = <span class="number">0.</span>obs;</span><br><span class="line">  <span class="keyword">var</span> countManual = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> onInit() &#123;</span><br><span class="line">    <span class="keyword">super</span>.onInit();</span><br><span class="line">      <span class="comment">// 监听count的值,当它发生改变的时候调用</span></span><br><span class="line">      ever(count, (callback) =&gt; <span class="built_in">print</span>(<span class="string">&quot;ever----<span class="subst">$count</span>&quot;</span>));</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 监听多个值,当它们发生改变的时候调用</span></span><br><span class="line">      everAll([count], (callback) =&gt; <span class="built_in">print</span>(<span class="string">&quot;everAll----<span class="subst">$count</span>&quot;</span>));</span><br><span class="line"></span><br><span class="line">      <span class="comment">// count值改变时调用,只执行一次</span></span><br><span class="line">      once(count, (callback) =&gt; <span class="built_in">print</span>(<span class="string">&quot;once----<span class="subst">$count</span>&quot;</span>));</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 用户停止打字时1秒后调用,主要是防DDos</span></span><br><span class="line">      debounce(count, (callback) =&gt; <span class="built_in">print</span>(<span class="string">&quot;debounce----<span class="subst">$count</span>&quot;</span>));</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 忽略1秒内的所有变动（默认一秒）</span></span><br><span class="line">      interval(count, (callback) =&gt; <span class="built_in">print</span>(<span class="string">&quot;interval----<span class="subst">$count</span>&quot;</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> onReady() &#123;</span><br><span class="line">    <span class="keyword">super</span>.onReady();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> onClose() &#123;&#125;</span><br><span class="line">  <span class="keyword">void</span> increment() =&gt; count.value++;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> decrement() &#123;</span><br><span class="line">    countManual--;</span><br><span class="line">    update();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后就可以在<code>view</code>中使用</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter_demo/app/controllers/connect_demo_controller.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:get/get.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConnectDemoView</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 对controller进行初始化</span></span><br><span class="line">  <span class="keyword">final</span> controller = Get.put(ConnectDemoController());</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Center(</span><br><span class="line">      child: Column(</span><br><span class="line">        children: [</span><br><span class="line">          <span class="comment">// 第一种方式，通Obx对数据进行响应式监听，数据需要进行obs操作</span></span><br><span class="line">          Obx(</span><br><span class="line">            () =&gt; Text(</span><br><span class="line">              <span class="string">&quot;count: <span class="subst">$&#123;controller.count&#125;</span>&quot;</span>,</span><br><span class="line">              style: TextStyle(fontSize: <span class="number">20</span>),</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">          ElevatedButton(</span><br><span class="line">            onPressed: () &#123;</span><br><span class="line">              controller.increment();</span><br><span class="line">            &#125;,</span><br><span class="line">            child: Text(<span class="string">&quot;Increment&quot;</span>),</span><br><span class="line">          ),</span><br><span class="line">          <span class="comment">// 第二种方式，通过GetBuilder，就不需要对数据obs与obx</span></span><br><span class="line">          GetBuilder&lt;ConnectDemoController&gt;(</span><br><span class="line">            init: controller,</span><br><span class="line">            builder: (controller) &#123;</span><br><span class="line">              <span class="keyword">return</span> Text(</span><br><span class="line">                <span class="string">&quot;countManual: <span class="subst">$&#123;controller.countManual&#125;</span>&quot;</span>,</span><br><span class="line">                style: TextStyle(fontSize: <span class="number">20</span>),</span><br><span class="line">              );</span><br><span class="line">            &#125;,</span><br><span class="line">          ),</span><br><span class="line">          <span class="comment">// 第三种方式，通过GetX，就不需要对数据obs与obx与controller初始化</span></span><br><span class="line">          <span class="comment">// GetX&lt;ConnectDemoController&gt;(</span></span><br><span class="line">          <span class="comment">//   init: ConnectDemoController(),</span></span><br><span class="line">          <span class="comment">//   builder: (controller) &#123;</span></span><br><span class="line">          <span class="comment">//     return Text(</span></span><br><span class="line">          <span class="comment">//      &quot;countManual: $&#123;controller.countManual&#125;&quot;,</span></span><br><span class="line">          <span class="comment">//       style: TextStyle(fontSize: 20),</span></span><br><span class="line">          <span class="comment">//     );</span></span><br><span class="line">          <span class="comment">//   &#125;,</span></span><br><span class="line">          <span class="comment">// ),</span></span><br><span class="line">          ElevatedButton(</span><br><span class="line">            onPressed: () &#123;</span><br><span class="line">              controller.decrement();</span><br><span class="line">            &#125;,</span><br><span class="line">            child: Text(<span class="string">&quot;decrement&quot;</span>),</span><br><span class="line">          ),</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Get-Service"><a href="#Get-Service" class="headerlink" title="Get Service"></a>Get Service</h3><p>这个类就像一个 GetxController，它共享相同的生命周期</p><ul><li>onInit()</li><li>onReady()</li><li>onClose()。<br>但里面没有 “逻辑”。它只是通知GetX的依赖注入系统，这个子类不能从内存中删除。所以如果你需要在你的应用程序的生命周期内对一个类实例进行绝对的持久化，那么就可以使用GetxService</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:get/get.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:shared_preferences/shared_preferences.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Service</span> <span class="keyword">extends</span> <span class="title">GetxService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  Future&lt;<span class="keyword">void</span>&gt; getCounter() <span class="keyword">async</span> &#123;</span><br><span class="line">    SharedPreferences prefs = <span class="keyword">await</span> SharedPreferences.getInstance();</span><br><span class="line">    <span class="built_in">int</span> count = (prefs.getInt(<span class="string">&quot;counter&quot;</span>) ?? <span class="number">0</span>) + <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;count 的值为: <span class="subst">$count</span>&quot;</span>);</span><br><span class="line">    <span class="keyword">await</span> prefs.setInt(<span class="string">&quot;counter&quot;</span>, count);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter_getx_example/GetXServiceExample/GetXServiceExample.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter_getx_example/GetXServiceExample/Service.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:get/get.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// <span class="language-markdown">初始化服务</span></span></span><br><span class="line">Future&lt;<span class="keyword">void</span>&gt; main() <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="keyword">await</span> initServices();</span><br><span class="line">  runApp(MyApp());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Future&lt;<span class="keyword">void</span>&gt; initServices() <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;初始化服务&quot;</span>);</span><br><span class="line">  <span class="keyword">await</span> Get.putAsync(() <span class="keyword">async</span> =&gt; <span class="keyword">await</span> Service());</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;所有服务启动&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> GetMaterialApp(</span><br><span class="line">      title: <span class="string">&quot;GetX&quot;</span>,</span><br><span class="line">      home: GetXServiceExample(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Binding"><a href="#Binding" class="headerlink" title="Binding"></a>Binding</h2><p>使用GetX状态管理器的时候,往往每次都是用需要手动实例化一个控制器，这样的话基本页面都需要实例化一次，这样就太麻烦了，而Binding 能解决上述问题，可以在项目初始化时把所有需要进行状态管理的控制器进行统一初始化</p><blockquote><p><code>Binding</code>与<code>Service</code>一样没有专门的命令进行创建，只能手动创建</p></blockquote><p>首先创建一个<code>binding</code>，它继承自<code>Bindings</code>, 需要你去实现一个<code>dependencies</code>函数</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter_demo/app/controllers/connect_demo_controller.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:get/get.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConnectDemoBinding</span> <span class="keyword">implements</span> <span class="title">Bindings</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> dependencies() &#123;</span><br><span class="line">    Get.lazyPut&lt;ConnectDemoController&gt;(() =&gt; ConnectDemoController());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有多重方式可以初始化binding</p><h3 id="初始化方法一-在GetMaterialApp中初始化"><a href="#初始化方法一-在GetMaterialApp中初始化" class="headerlink" title="初始化方法一: 在GetMaterialApp中初始化"></a>初始化方法一: 在GetMaterialApp中初始化</h3><p><code>GetMaterialApp</code>中有一个<code>initialBinding</code></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">GetMaterialApp(</span><br><span class="line">  title: <span class="string">&#x27;Material App&#x27;</span>,</span><br><span class="line">  <span class="comment">// 国际化</span></span><br><span class="line">  translations: TranslateDemo(),</span><br><span class="line">  locale: Locale(<span class="string">&#x27;zh&#x27;</span>, <span class="string">&#x27;CN&#x27;</span>),</span><br><span class="line">  fallbackLocale: Locale(<span class="string">&#x27;zh&#x27;</span>, <span class="string">&#x27;CN&#x27;</span>),</span><br><span class="line">  <span class="comment">// 进行binding初始化</span></span><br><span class="line">  initialBinding: ConnectDemoBinding(),</span><br><span class="line">  home: Scaffold(</span><br><span class="line">    appBar: AppBar(</span><br><span class="line">      title: Text(<span class="string">&#x27;GetMaterial App Bar&#x27;</span>),</span><br><span class="line">    ),</span><br><span class="line">    <span class="comment">// body: Home(),</span></span><br><span class="line">    body: ConnectDemoView(),</span><br><span class="line">  ),</span><br><span class="line">  <span class="comment">// 一定要指定下面两个，否则在真机上不会生效</span></span><br><span class="line">  theme: ThemeData.light(),</span><br><span class="line">  darkTheme: ThemeData.dark(),</span><br><span class="line">  debugShowCheckedModeBanner: <span class="keyword">false</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="初始化方法二-在routePage中初始化"><a href="#初始化方法二-在routePage中初始化" class="headerlink" title="初始化方法二: 在routePage中初始化"></a>初始化方法二: 在routePage中初始化</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">getPages: [</span><br><span class="line">  GetPage(</span><br><span class="line">    name: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">    page: () =&gt; ConnectDemoView(),</span><br><span class="line">    <span class="comment">// binding: ConnectDemoBinding(), 一般用这个</span></span><br><span class="line">    binding: BindingsBuilder(() &#123;</span><br><span class="line">      Get.lazyPut&lt;ConnectDemoBinding&gt;(() =&gt; ConnectDemoBinding());</span><br><span class="line">    &#125;),</span><br><span class="line">  )</span><br><span class="line">],</span><br></pre></td></tr></table></figure><h3 id="使用binding"><a href="#使用binding" class="headerlink" title="使用binding"></a>使用binding</h3><p>有了<code>binging</code>之后，我们就可以直接去使用，不用手动初始化了</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法一</span></span><br><span class="line"><span class="comment">// 干掉 final controller = Get.put(ConnectDemoController());</span></span><br><span class="line"><span class="keyword">final</span> controller = Get.find&lt;ConnectDemoController&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法二</span></span><br><span class="line"><span class="comment">// 直接继承 GetView, 它会自动帮我们注入一个controller</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConnectDemoView</span> <span class="keyword">extends</span> <span class="title">GetView</span>&lt;<span class="title">ConnectDemoController</span>&gt; </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="创建Provider-GetConnect"><a href="#创建Provider-GetConnect" class="headerlink" title="创建Provider(GetConnect)"></a>创建Provider(GetConnect)</h2><p>通过命令<code>get create provider:ConnectDemo</code></p><p>会在<code>app/data</code>中创建一个<code>ConnectDemoProvider</code></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:get/get.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConnectDemoProvider</span> <span class="keyword">extends</span> <span class="title">GetConnect</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> onInit() &#123;</span><br><span class="line">    httpClient.baseUrl = <span class="string">&#x27;YOUR-API-URL&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们这里使用假数据进行模拟</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:dio/dio.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter_demo/app/entity/news.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:get/get.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConnectDemoProvider</span> <span class="keyword">extends</span> <span class="title">GetConnect</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> onInit() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 新闻分页</span></span><br><span class="line">  <span class="keyword">static</span> Future&lt;NewsPageListResponseEntity&gt; getNews() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> response = <span class="keyword">await</span> Dio(</span><br><span class="line">      BaseOptions(</span><br><span class="line">        baseUrl: <span class="string">&quot;https://yapi.ducafecat.tech/mock/11&quot;</span>,</span><br><span class="line">      ),</span><br><span class="line">    ).<span class="keyword">get</span>(<span class="string">&quot;/news&quot;</span>);</span><br><span class="line">    <span class="keyword">await</span> Future.delayed(<span class="built_in">Duration</span>(seconds: <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">return</span> NewsPageListResponseEntity.fromJson(response.data);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对controller进行改造"><a href="#对controller进行改造" class="headerlink" title="对controller进行改造"></a>对<code>controller</code>进行改造</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConnectDemoController</span> <span class="keyword">extends</span> <span class="title">GetxController</span> <span class="title">with</span> <span class="title">StateMixin</span>&lt;<span class="title">NewsPageListResponseEntity</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> count = <span class="number">0.</span>obs;</span><br><span class="line">  <span class="keyword">var</span> countManual = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> onInit() &#123;</span><br><span class="line">    <span class="keyword">super</span>.onInit();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.getNewsPageList();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 拉取新闻列表</span></span><br><span class="line">  Future&lt;<span class="keyword">void</span>&gt; getNewsPageList() <span class="keyword">async</span> &#123;</span><br><span class="line">    ConnectDemoProvider.getNews().then((value) &#123;</span><br><span class="line">      <span class="built_in">print</span>(value);</span><br><span class="line">      change(</span><br><span class="line">        value,</span><br><span class="line">        status: RxStatus.success(),</span><br><span class="line">      );</span><br><span class="line">    &#125;, onError: (err) &#123;</span><br><span class="line">      <span class="comment">// 错误的时候传递的数据</span></span><br><span class="line">      change(</span><br><span class="line">        <span class="keyword">null</span>,</span><br><span class="line">        status: RxStatus.error(err.toString()),</span><br><span class="line">      );</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> onReady() &#123;</span><br><span class="line">    <span class="keyword">super</span>.onReady();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> onClose() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 自动更新</span></span><br><span class="line">  <span class="keyword">void</span> increment() =&gt; count.value++;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 手动更新</span></span><br><span class="line">  <span class="keyword">void</span> decrement() &#123;</span><br><span class="line">    countManual--;</span><br><span class="line">    update();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对视图进行改造"><a href="#对视图进行改造" class="headerlink" title="对视图进行改造"></a>对视图进行改造</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">Scaffold(</span><br><span class="line">  appBar: AppBar(</span><br><span class="line">    title: Text(<span class="string">&#x27;GetMaterial App Bar&#x27;</span>),</span><br><span class="line">  ),</span><br><span class="line">  body: controller.obx((state) &#123;</span><br><span class="line">    <span class="keyword">return</span> Column(</span><br><span class="line">      mainAxisSize: MainAxisSize.min,</span><br><span class="line">      children: [</span><br><span class="line">        Text(<span class="string">&quot;有很多数据&quot;</span>),</span><br><span class="line">        Expanded(</span><br><span class="line">          child: ListView.separated(</span><br><span class="line">            itemCount: state != <span class="keyword">null</span> ? state.items!.length : <span class="number">0</span>,</span><br><span class="line">            itemBuilder: (context, index) &#123;</span><br><span class="line">              <span class="keyword">final</span> item = state!.items![index];</span><br><span class="line">              <span class="keyword">return</span> ListTile(</span><br><span class="line">                onTap: () =&gt; <span class="keyword">null</span>,</span><br><span class="line">                leading: Image.network(</span><br><span class="line">                  item.thumbnail,</span><br><span class="line">                  fit: BoxFit.cover,</span><br><span class="line">                ),</span><br><span class="line">                title: Text(item.title),</span><br><span class="line">                trailing: Text(<span class="string">&quot;分类 <span class="subst">$&#123;item.category&#125;</span>&quot;</span>),</span><br><span class="line">              );</span><br><span class="line">            &#125;,</span><br><span class="line">            separatorBuilder: (BuildContext context, <span class="built_in">int</span> index) &#123;</span><br><span class="line">              <span class="keyword">return</span> Divider();</span><br><span class="line">            &#125;,</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;),</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="对应的实体类"><a href="#对应的实体类" class="headerlink" title="对应的实体类"></a>对应的实体类</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// <span class="language-markdown">新闻分页 response</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewsPageListResponseEntity</span> </span>&#123;</span><br><span class="line">  <span class="built_in">int?</span> counts;</span><br><span class="line">  <span class="built_in">int?</span> pagesize;</span><br><span class="line">  <span class="built_in">int?</span> pages;</span><br><span class="line">  <span class="built_in">int?</span> page;</span><br><span class="line">  <span class="built_in">List</span>&lt;NewsItem&gt;? items;</span><br><span class="line"></span><br><span class="line">  NewsPageListResponseEntity(&#123;</span><br><span class="line">    <span class="keyword">this</span>.counts,</span><br><span class="line">    <span class="keyword">this</span>.pagesize,</span><br><span class="line">    <span class="keyword">this</span>.pages,</span><br><span class="line">    <span class="keyword">this</span>.page,</span><br><span class="line">    <span class="keyword">this</span>.items,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">factory</span> NewsPageListResponseEntity.fromJson(<span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; json) =&gt;</span><br><span class="line">      NewsPageListResponseEntity(</span><br><span class="line">        counts: json[<span class="string">&quot;counts&quot;</span>],</span><br><span class="line">        pagesize: json[<span class="string">&quot;pagesize&quot;</span>],</span><br><span class="line">        pages: json[<span class="string">&quot;pages&quot;</span>],</span><br><span class="line">        page: json[<span class="string">&quot;page&quot;</span>],</span><br><span class="line">        items:</span><br><span class="line">            <span class="built_in">List</span>&lt;NewsItem&gt;.from(json[<span class="string">&quot;items&quot;</span>].map((x) =&gt; NewsItem.fromJson(x))),</span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; toJson() =&gt; &#123;</span><br><span class="line">        <span class="string">&quot;counts&quot;</span>: counts,</span><br><span class="line">        <span class="string">&quot;pagesize&quot;</span>: pagesize,</span><br><span class="line">        <span class="string">&quot;pages&quot;</span>: pages,</span><br><span class="line">        <span class="string">&quot;page&quot;</span>: page,</span><br><span class="line">        <span class="string">&quot;items&quot;</span>: items != <span class="keyword">null</span></span><br><span class="line">            ? <span class="built_in">List</span>&lt;<span class="built_in">dynamic</span>&gt;.from(items!.map((x) =&gt; x.toJson()))</span><br><span class="line">            : [],</span><br><span class="line">      &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewsItem</span> </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> id;</span><br><span class="line">  <span class="built_in">String</span> title;</span><br><span class="line">  <span class="built_in">String</span> category;</span><br><span class="line">  <span class="built_in">String</span> thumbnail;</span><br><span class="line">  <span class="built_in">String</span> author;</span><br><span class="line">  <span class="built_in">DateTime</span> addtime;</span><br><span class="line">  <span class="built_in">String</span> url;</span><br><span class="line"></span><br><span class="line">  NewsItem(&#123;</span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">this</span>.id,</span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">this</span>.title,</span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">this</span>.category,</span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">this</span>.thumbnail,</span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">this</span>.author,</span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">this</span>.addtime,</span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">this</span>.url,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">factory</span> NewsItem.fromJson(<span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; json) =&gt; NewsItem(</span><br><span class="line">        id: json[<span class="string">&quot;id&quot;</span>],</span><br><span class="line">        title: json[<span class="string">&quot;title&quot;</span>],</span><br><span class="line">        category: json[<span class="string">&quot;category&quot;</span>],</span><br><span class="line">        thumbnail: json[<span class="string">&quot;thumbnail&quot;</span>],</span><br><span class="line">        author: json[<span class="string">&quot;author&quot;</span>],</span><br><span class="line">        addtime: <span class="built_in">DateTime</span>.parse(json[<span class="string">&quot;addtime&quot;</span>]),</span><br><span class="line">        url: json[<span class="string">&quot;url&quot;</span>],</span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; toJson() =&gt; &#123;</span><br><span class="line">        <span class="string">&quot;id&quot;</span>: id,</span><br><span class="line">        <span class="string">&quot;title&quot;</span>: title,</span><br><span class="line">        <span class="string">&quot;category&quot;</span>: category,</span><br><span class="line">        <span class="string">&quot;thumbnail&quot;</span>: thumbnail,</span><br><span class="line">        <span class="string">&quot;author&quot;</span>: author,</span><br><span class="line">        <span class="string">&quot;addtime&quot;</span>: addtime.toIso8601String(),</span><br><span class="line">        <span class="string">&quot;url&quot;</span>: url,</span><br><span class="line">      &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// <span class="language-markdown">新闻推荐 request</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewsRecommendRequestEntity</span> </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> categoryCode;</span><br><span class="line">  <span class="built_in">String</span> channelCode;</span><br><span class="line">  <span class="built_in">String</span> tag;</span><br><span class="line">  <span class="built_in">String</span> keyword;</span><br><span class="line"></span><br><span class="line">  NewsRecommendRequestEntity(&#123;</span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">this</span>.categoryCode,</span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">this</span>.channelCode,</span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">this</span>.tag,</span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">this</span>.keyword,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; toJson() =&gt; &#123;</span><br><span class="line">        <span class="string">&quot;categoryCode&quot;</span>: categoryCode,</span><br><span class="line">        <span class="string">&quot;channelCode&quot;</span>: channelCode,</span><br><span class="line">        <span class="string">&quot;tag&quot;</span>: tag,</span><br><span class="line">        <span class="string">&quot;keyword&quot;</span>: keyword,</span><br><span class="line">      &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><p>编写命名路由</p><blockquote><p>404可以使用 unknownRoute 进行设定</p></blockquote><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter_getx_example/NavigationForNamedExample/NavigationForNamedExample.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:get/get.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(MyApp());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> GetMaterialApp(</span><br><span class="line">      title: <span class="string">&quot;GetX&quot;</span>,</span><br><span class="line">      initialRoute: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">      unknownRoute: AppPages.unknownRoute,</span><br><span class="line">      defaultTransition: Transition.zoom,</span><br><span class="line">      getPages: [</span><br><span class="line">        GetPage(name: <span class="string">&quot;/&quot;</span>, page: () =&gt; MyApp()),</span><br><span class="line">        GetPage(name: <span class="string">&quot;/home&quot;</span>, page: () =&gt; Home()),</span><br><span class="line">        GetPage(name: <span class="string">&quot;/my&quot;</span>, page: () =&gt; My(), transition: Transition.rightToLeft)</span><br><span class="line">      ],</span><br><span class="line">      home: NavigationForNamedExample(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="跳转路由"><a href="#跳转路由" class="headerlink" title="跳转路由"></a>跳转路由</h3><ul><li>Get.toNamed</li><li>Get.to</li><li>Get.off 清除上一个</li><li>Get.offNamed</li><li>Get.offAll 清除所有</li><li>Get.offAllNamed</li><li>Get.back 返回上一级 <code>Get.back(result: &#123;&quot;success&quot;: true&#125;)</code> 还可以传参</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 命名路由</span></span><br><span class="line">ElevatedButton(</span><br><span class="line">  onPressed: () &#123;</span><br><span class="line">    Get.toNamed(<span class="string">&quot;/my&quot;</span>);</span><br><span class="line">    <span class="comment">// 传参</span></span><br><span class="line">    <span class="comment">// Get.toNamed(&quot;/home/list/detail&quot;,arguments: &#123;&quot;id&quot;: 999&#125;)</span></span><br><span class="line">    <span class="comment">// 这样接受参数 final details = Get.arguments as Map;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  child: Text(<span class="string">&quot;跳转到首页&quot;</span>),</span><br><span class="line">)</span><br><span class="line"><span class="comment">// 普通路由</span></span><br><span class="line">ElevatedButton(</span><br><span class="line">  onPressed: () <span class="keyword">async</span> &#123;</span><br><span class="line">    Get.to(Home());</span><br><span class="line">  &#125;,</span><br><span class="line">  child: Text(<span class="string">&quot;跳转到首页&quot;</span>),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="路由中间件"><a href="#路由中间件" class="headerlink" title="路由中间件"></a>路由中间件</h3><ul><li>redirect</li><li>onPageCalled 在创建任何内容之前调用此页面时将调用此函数</li><li>OnBindingsStart</li><li>OnPageBuildStart binding初始化完成后调用</li><li>OnPageBuilt 该函数将在调用 GetPage.page 函数后立即调用，并为您提供函数的结果。并获取将显示的小部件</li><li>OnPageDispose</li></ul><p>通过继承<code>GetMiddleware</code>可以实现路由中间件</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RouteAuthMiddleware</span> <span class="keyword">extends</span> <span class="title">GetMiddleware</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">int</span> priority = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  RouteAuthMiddleware(&#123;<span class="keyword">required</span> <span class="keyword">this</span>.priority&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  RouteSettings? redirect(<span class="built_in">String</span> route) &#123;</span><br><span class="line">    Future.delayed(<span class="built_in">Duration</span>(seconds: <span class="number">1</span>), () =&gt; Get.snackbar(<span class="string">&quot;提示&quot;</span>, <span class="string">&quot;请先登录APP&quot;</span>));</span><br><span class="line">    <span class="keyword">return</span> RouteSettings(name: AppRoutes.Login);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后再需要的路由上设置</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">GetPage(</span><br><span class="line">  name: AppRoutes.My,</span><br><span class="line">  page: () =&gt; MyView(),</span><br><span class="line">  middlewares: [</span><br><span class="line">    RouteAuthMiddleware(priority: <span class="number">1</span>),</span><br><span class="line">  ],</span><br><span class="line">),</span><br></pre></td></tr></table></figure><h4 id="指定优先级"><a href="#指定优先级" class="headerlink" title="指定优先级"></a>指定优先级</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> middlewares = [</span><br><span class="line">  GetMiddleware(priority: <span class="number">2</span>),</span><br><span class="line">  GetMiddleware(priority: <span class="number">5</span>),</span><br><span class="line">  GetMiddleware(priority: <span class="number">4</span>),</span><br><span class="line">  GetMiddleware(priority: <span class="number">-8</span>),</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h2 id="国际化"><a href="#国际化" class="headerlink" title="国际化"></a>国际化</h2><p><code>Getx</code>中进行国际化是非常简单的</p><p>首先在<code>GetMaterialApp</code>中定义三个属性</p><ul><li>translations 语言包</li><li>locale 默认的语言</li><li>fallbackLocale 配置失败使用的语言</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> GetMaterialApp(</span><br><span class="line">      title: <span class="string">&#x27;Material App&#x27;</span>,</span><br><span class="line">      <span class="comment">// 国际化</span></span><br><span class="line">      translations: TranslateDemo(),</span><br><span class="line">      locale: Locale(<span class="string">&#x27;zh&#x27;</span>, <span class="string">&#x27;CN&#x27;</span>),</span><br><span class="line">      fallbackLocale: Locale(<span class="string">&#x27;zh&#x27;</span>, <span class="string">&#x27;CN&#x27;</span>),</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        appBar: AppBar(</span><br><span class="line">          title: Text(<span class="string">&#x27;GetMaterial App Bar&#x27;</span>),</span><br><span class="line">        ),</span><br><span class="line">        body: Home(),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>语言包的定义, 只需要定义一个继承<code>Translations</code>的类即可</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:get/get.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TranslateDemo</span> <span class="keyword">extends</span> <span class="title">Translations</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt;&gt; <span class="keyword">get</span> keys =&gt; &#123;</span><br><span class="line">        <span class="string">&quot;zh_Cn&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;你好&quot;</span>: <span class="string">&quot;你好&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;en_Us&quot;</span>: &#123;</span><br><span class="line">          <span class="string">&quot;你好&quot;</span>: <span class="string">&quot;hello&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>动态切换语言也是非常简单的, 调用<code>Get.updateLocale</code>方法即可</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ElevatedButton(</span><br><span class="line">  onPressed: () &#123;</span><br><span class="line">    <span class="keyword">if</span> (Get.locale?.languageCode == <span class="string">&#x27;en&#x27;</span>) &#123;</span><br><span class="line">      Get.updateLocale(Locale(<span class="string">&#x27;zh&#x27;</span>, <span class="string">&#x27;CN&#x27;</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      Get.updateLocale(Locale(<span class="string">&#x27;en&#x27;</span>, <span class="string">&#x27;US&#x27;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">print</span>(Get.locale?.languageCode);</span><br><span class="line">  &#125;,</span><br><span class="line">  child: Text(<span class="string">&#x27;你好&#x27;</span>.tr),</span><br><span class="line">),</span><br></pre></td></tr></table></figure><h2 id="Snackbar，Dialog，BottomSheet"><a href="#Snackbar，Dialog，BottomSheet" class="headerlink" title="Snackbar，Dialog，BottomSheet"></a>Snackbar，Dialog，BottomSheet</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ElevatedButton(</span><br><span class="line">  onPressed: () &#123;</span><br><span class="line">    Get.snackbar(<span class="string">&quot;Snackbar 标题&quot;</span>, <span class="string">&quot;欢迎使用Snackbar&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  child: Text(<span class="string">&quot;显示 Snackbar&quot;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ElevatedButton(</span><br><span class="line">  onPressed: () &#123;</span><br><span class="line">    Get.defaultDialog();</span><br><span class="line">  &#125;,</span><br><span class="line">  child: Text(<span class="string">&quot;显示 Dialog&quot;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">ElevatedButton(onPressed: () &#123;</span><br><span class="line">  Get.bottomSheet(</span><br><span class="line">    Container(</span><br><span class="line">      child: Wrap(</span><br><span class="line">        children: [</span><br><span class="line">          ListTile(</span><br><span class="line">            leading: Icon(Icons.wb_sunny_outlined),</span><br><span class="line">            title: Text(<span class="string">&quot;白天模式&quot;</span>),</span><br><span class="line">            onTap: () &#123;</span><br><span class="line">              Get.changeTheme(ThemeData.light());</span><br><span class="line">            &#125;,</span><br><span class="line">          ),</span><br><span class="line">          ListTile(</span><br><span class="line">            leading: Icon(Icons.wb_sunny),</span><br><span class="line">            title: Text(<span class="string">&quot;黑夜模式&quot;</span>),</span><br><span class="line">            onTap: () &#123;</span><br><span class="line">              Get.changeTheme(ThemeData.dark());</span><br><span class="line">            &#125;,</span><br><span class="line">          )</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    )</span><br><span class="line">  );</span><br><span class="line">&#125;, child: Text(<span class="string">&quot;Bottom Sheet&quot;</span>))</span><br></pre></td></tr></table></figure><h2 id="主题切换"><a href="#主题切换" class="headerlink" title="主题切换"></a>主题切换</h2><p>首先需要指定不同<code>themeMode</code>下的主题</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">GetMaterialApp(</span><br><span class="line">  <span class="comment">// 一定要指定下面两个，否则在真机上不会生效</span></span><br><span class="line">  <span class="comment">// 下面两个表示在不同的`themeMode`下，使用不同的主题</span></span><br><span class="line">  theme: ThemeData.light(),</span><br><span class="line">  darkTheme: ThemeData.dark(),</span><br><span class="line">  home: Scaffold(</span><br><span class="line">    appBar: AppBar(</span><br><span class="line">      title: Text(<span class="string">&#x27;GetMaterial App Bar&#x27;</span>),</span><br><span class="line">    ),</span><br><span class="line">    body: Home(),</span><br><span class="line">  ),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>切换主题的时候，需要注意, 切换的时候有两种方法</p><ul><li>Get.changeThemeMode 切换当前的主题模式（light, dart, system）</li><li>Get.changeTheme 这个方法需要注意，切换的是light模式下的主题</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">ElevatedButton(</span><br><span class="line">  onPressed: () &#123;</span><br><span class="line">    <span class="comment">// Get.changeTheme(</span></span><br><span class="line">    <span class="comment">//   isDark ? ThemeData.dark() : ThemeData.light(),</span></span><br><span class="line">    <span class="comment">// );</span></span><br><span class="line">    <span class="comment">// Get.changeThemeMode(ThemeMode.light);</span></span><br><span class="line">    <span class="keyword">if</span> (Get.isDarkMode)</span><br><span class="line">      Get.changeThemeMode(ThemeMode.light);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      Get.changeThemeMode(ThemeMode.dark);</span><br><span class="line">    isDark = !isDark;</span><br><span class="line">    <span class="built_in">print</span>(isDark);</span><br><span class="line">  &#125;,</span><br><span class="line">  child: Text(</span><br><span class="line">    <span class="string">&#x27;Change theme&#x27;</span>,</span><br><span class="line">    style: TextStyle(),</span><br><span class="line">  ),</span><br><span class="line">),</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://zhoujunxiong.gitee.com/categories/flutter/">flutter</category>
      
      <category domain="http://zhoujunxiong.gitee.com/categories/flutter/GetX/">GetX</category>
      
      
      <category domain="http://zhoujunxiong.gitee.com/tags/flutter/">flutter</category>
      
      <category domain="http://zhoujunxiong.gitee.com/tags/dart/">dart</category>
      
      <category domain="http://zhoujunxiong.gitee.com/tags/GetX/">GetX</category>
      
      
      <comments>http://zhoujunxiong.gitee.com/2022/01/28/flutter/flutter%E4%B9%8BGetX/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Typescript之泛型工具</title>
      <link>http://zhoujunxiong.gitee.com/2021/12/25/%E5%89%8D%E7%AB%AF/Typescript/Typescript%E4%B9%8B%E6%B3%9B%E5%9E%8B%E5%B7%A5%E5%85%B7/</link>
      <guid>http://zhoujunxiong.gitee.com/2021/12/25/%E5%89%8D%E7%AB%AF/Typescript/Typescript%E4%B9%8B%E6%B3%9B%E5%9E%8B%E5%B7%A5%E5%85%B7/</guid>
      <pubDate>Sat, 25 Dec 2021 10:53:49 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;内置泛型工具&quot;&gt;&lt;a href=&quot;#内置泛型工具&quot; class=&quot;headerlink&quot; title=&quot;内置泛型工具&quot;&gt;&lt;/a&gt;内置泛型工具&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="内置泛型工具"><a href="#内置泛型工具" class="headerlink" title="内置泛型工具"></a>内置泛型工具</h2><p><a href="https://www.typescriptlang.org/docs/handbook/utility-types.html">官网文档</a></p><h3 id="Partial"><a href="#Partial" class="headerlink" title="Partial"></a>Partial</h3><p><code>Partial</code>将所有属性设置为可选。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Make all properties in T optional</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Partial</span>&lt;T&gt; = &#123;</span><br><span class="line">    [P <span class="keyword">in</span> keyof T]?: T[P];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> user &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">b</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">c</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PartialUser</span> = <span class="title class_">Partial</span>&lt;user&gt;</span><br><span class="line"><span class="comment">// type PartialUser = &#123;</span></span><br><span class="line"><span class="comment">//     a?: string;</span></span><br><span class="line"><span class="comment">//     b?: string;</span></span><br><span class="line"><span class="comment">//     c?: string;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><h3 id="Required"><a href="#Required" class="headerlink" title="Required"></a>Required</h3><p><code>Required</code>与<code>Partial</code>相反，将所有属性设置为必选。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Make all properties in T required</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Required</span>&lt;T&gt; = &#123;</span><br><span class="line">    [P <span class="keyword">in</span> keyof T]-?: T[P];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> user &#123;</span><br><span class="line">    a?: <span class="built_in">string</span>;</span><br><span class="line">    b?: <span class="built_in">string</span>;</span><br><span class="line">    c?: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">RequiredUser</span> = <span class="title class_">Required</span>&lt;user&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">RequiredUser</span> = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">b</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">c</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Readonly"><a href="#Readonly" class="headerlink" title="Readonly"></a>Readonly</h3><p>将所有属性变为只读</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Make all properties in T readonly</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Readonly</span>&lt;T&gt; = &#123;</span><br><span class="line">    <span class="keyword">readonly</span> [P <span class="keyword">in</span> keyof T]: T[P];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> user &#123;</span><br><span class="line">    a?: <span class="built_in">string</span>;</span><br><span class="line">    b?: <span class="built_in">string</span>;</span><br><span class="line">    c?: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ReadonlyUser</span> = <span class="title class_">Readonly</span>&lt;user&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type ReadonlyUser = &#123;</span></span><br><span class="line"><span class="comment">//     readonly a?: string;</span></span><br><span class="line"><span class="comment">//     readonly b?: string;</span></span><br><span class="line"><span class="comment">//     readonly c?: string;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><h3 id="Pick"><a href="#Pick" class="headerlink" title="Pick"></a>Pick</h3><p>Pick 传入两个泛型，将第一个泛型中的属性提取出来，返回一个新的类型。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * From T, pick a set of properties whose keys are in the union K</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Pick</span>&lt;T, K <span class="keyword">extends</span> keyof T&gt; = &#123;</span><br><span class="line">    [P <span class="keyword">in</span> K]: T[P];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">interface</span> user3 &#123;</span><br><span class="line">  a?: <span class="built_in">string</span></span><br><span class="line">  b?: <span class="built_in">string</span></span><br><span class="line">  c?: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PickUser</span> = <span class="title class_">Pick</span>&lt;user3, <span class="string">&quot;a&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type PickUser = &#123;</span></span><br><span class="line"><span class="comment">//     a?: string;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><h3 id="Record"><a href="#Record" class="headerlink" title="Record"></a>Record</h3><p>Record 将一个对象转换为指定的类型。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Construct a type with a set of properties K of type T</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Record</span>&lt;K <span class="keyword">extends</span> keyof <span class="built_in">any</span>, T&gt; = &#123;</span><br><span class="line">    [P <span class="keyword">in</span> K]: T;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> user4 = <span class="string">&quot;a&quot;</span> | <span class="string">&quot;b&quot;</span> | <span class="string">&quot;c&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">RecordUser</span> = <span class="title class_">Record</span>&lt;user4, <span class="built_in">number</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">RecordUser</span> = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="built_in">number</span>;</span><br><span class="line">    <span class="attr">b</span>: <span class="built_in">number</span>;</span><br><span class="line">    <span class="attr">c</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Exclude"><a href="#Exclude" class="headerlink" title="Exclude"></a>Exclude</h3><p>在A类型中，排除B类型中的属性。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Exclude from T those types that are assignable to U</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Exclude</span>&lt;T, U&gt; = T <span class="keyword">extends</span> U ? <span class="built_in">never</span> : T;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">AB</span> = <span class="string">&#x27;a&#x27;</span> | <span class="string">&#x27;b&#x27;</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">BC</span> = <span class="string">&#x27;b&#x27;</span> | <span class="string">&#x27;c&#x27;</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Demo</span> = <span class="title class_">Exclude</span>&lt;<span class="variable constant_">AB</span>, <span class="variable constant_">BC</span>&gt; <span class="comment">// =&gt; type Demo = &#x27;a&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Extract"><a href="#Extract" class="headerlink" title="Extract"></a>Extract</h3><p>与Exclude有相反的作用</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Extract from T those types that are assignable to U</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Extract</span>&lt;T, U&gt; = T <span class="keyword">extends</span> U ? T : <span class="built_in">never</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">AB</span> = <span class="string">&#x27;a&#x27;</span> | <span class="string">&#x27;b&#x27;</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">BC</span> = <span class="string">&#x27;b&#x27;</span> | <span class="string">&#x27;c&#x27;</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Demo</span> = <span class="title class_">Extract</span>&lt;<span class="variable constant_">AB</span>, <span class="variable constant_">BC</span>&gt; <span class="comment">// =&gt; type Demo = &quot;b&quot;</span></span><br></pre></td></tr></table></figure><h3 id="Omit"><a href="#Omit" class="headerlink" title="Omit"></a>Omit</h3><p>与Pick有相反的作用，排除B类型中的属性。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Construct a type with the properties of T except for those in type K.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Omit</span>&lt;T, K <span class="keyword">extends</span> keyof <span class="built_in">any</span>&gt; = <span class="title class_">Pick</span>&lt;T, <span class="title class_">Exclude</span>&lt;keyof T, K&gt;&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Foo</span> = <span class="title class_">Omit</span>&lt;&#123;<span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">age</span>: <span class="built_in">number</span>&#125;, <span class="string">&#x27;name&#x27;</span>&gt; <span class="comment">// -&gt; &#123; age: number &#125;</span></span><br></pre></td></tr></table></figure><h3 id="NonNullable"><a href="#NonNullable" class="headerlink" title="NonNullable"></a>NonNullable</h3><p>排除 null和undefined</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Exclude null and undefined from T</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">NonNullable</span>&lt;T&gt; = T <span class="keyword">extends</span> <span class="literal">null</span> | <span class="literal">undefined</span> ? <span class="built_in">never</span> : T;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Demo</span> = <span class="title class_">NonNullable</span>&lt;<span class="built_in">string</span> | <span class="literal">null</span> | <span class="literal">undefined</span>&gt; <span class="comment">// =&gt; type Demo = string</span></span><br></pre></td></tr></table></figure><h3 id="Parameters"><a href="#Parameters" class="headerlink" title="Parameters"></a>Parameters</h3><p>Parameters可以返回函数的参数类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Obtain the parameters of a function type in a tuple</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Parameters</span>&lt;T <span class="keyword">extends</span> (...<span class="attr">args</span>: <span class="built_in">any</span>) =&gt; <span class="built_in">any</span>&gt; = T <span class="keyword">extends</span> (...<span class="attr">args</span>: infer P) =&gt; <span class="built_in">any</span> ? P : <span class="built_in">never</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Fn</span> = <span class="function">(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">number</span></span><br><span class="line"><span class="keyword">type</span> func = <span class="title class_">Parameters</span>&lt;<span class="title class_">Fn</span>&gt;</span><br><span class="line"><span class="comment">// type func = [a: number, b: string]</span></span><br></pre></td></tr></table></figure><h3 id="ReturnType"><a href="#ReturnType" class="headerlink" title="ReturnType"></a>ReturnType</h3><p>获取函数的返回类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Obtain the return type of a function type</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ReturnType</span>&lt;T <span class="keyword">extends</span> (...<span class="attr">args</span>: <span class="built_in">any</span>) =&gt; <span class="built_in">any</span>&gt; = T <span class="keyword">extends</span> (...<span class="attr">args</span>: <span class="built_in">any</span>) =&gt; infer R ? R : <span class="built_in">any</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Fn</span> = <span class="function">(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">number</span></span><br><span class="line"><span class="keyword">type</span> func = <span class="title class_">ReturnType</span>&lt;<span class="title class_">Fn</span>&gt;</span><br><span class="line"><span class="comment">// =&gt; type func = number</span></span><br></pre></td></tr></table></figure><h3 id="ConstructorParameters"><a href="#ConstructorParameters" class="headerlink" title="ConstructorParameters"></a>ConstructorParameters</h3><p>获取类的<code>构造函数</code>的参数类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Obtain the parameters of a constructor function type in a tuple</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ConstructorParameters</span>&lt;T <span class="keyword">extends</span> <span class="keyword">abstract</span> <span class="keyword">new</span> (...<span class="attr">args</span>: <span class="built_in">any</span>) =&gt; <span class="built_in">any</span>&gt; = T <span class="keyword">extends</span> <span class="keyword">abstract</span> <span class="keyword">new</span> (...<span class="attr">args</span>: infer P) =&gt; <span class="built_in">any</span> ? P : <span class="built_in">never</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">UserConstruct</span> = <span class="title class_">ConstructorParameters</span>&lt;<span class="keyword">typeof</span> <span class="title class_">User</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// =&gt; type UserConstruct = [name: string, age: number]</span></span><br></pre></td></tr></table></figure><h3 id="InstanceType"><a href="#InstanceType" class="headerlink" title="InstanceType"></a>InstanceType</h3><p>获取的类的实例类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Obtain the return type of a constructor function type</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">InstanceType</span>&lt;T <span class="keyword">extends</span> <span class="keyword">abstract</span> <span class="keyword">new</span> (...<span class="attr">args</span>: <span class="built_in">any</span>) =&gt; <span class="built_in">any</span>&gt; = T <span class="keyword">extends</span> <span class="keyword">abstract</span> <span class="keyword">new</span> (...<span class="attr">args</span>: <span class="built_in">any</span>) =&gt; infer R ? R : <span class="built_in">any</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">UserInstance</span>= <span class="title class_">InstanceType</span>&lt;<span class="keyword">typeof</span> <span class="title class_">User</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// =&gt; type UserInstance = User</span></span><br></pre></td></tr></table></figure><h3 id="ThisParameterType"><a href="#ThisParameterType" class="headerlink" title="ThisParameterType"></a>ThisParameterType</h3><p>获取this的参数类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Extracts the type of the &#x27;this&#x27; parameter of a function type, or &#x27;unknown&#x27; if the function type has no &#x27;this&#x27; parameter.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ThisParameterType</span>&lt;T&gt; = T <span class="keyword">extends</span> (<span class="attr">this</span>: infer U, ...<span class="attr">args</span>: <span class="built_in">any</span>[]) =&gt; <span class="built_in">any</span> ? U : <span class="built_in">unknown</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">toHex</span>(<span class="params"><span class="variable language_">this</span>: <span class="built_in">Number</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">toString</span>(<span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">numberToString</span>(<span class="params">n: ThisParameterType&lt;<span class="keyword">typeof</span> toHex&gt;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> toHex.<span class="title function_">apply</span>(n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// n: number</span></span><br></pre></td></tr></table></figure><h3 id="OmitThisParameter"><a href="#OmitThisParameter" class="headerlink" title="OmitThisParameter"></a>OmitThisParameter</h3><p>移除this参数里的类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Removes the &#x27;this&#x27; parameter from a function type.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">OmitThisParameter</span>&lt;T&gt; = <span class="built_in">unknown</span> <span class="keyword">extends</span> <span class="title class_">ThisParameterType</span>&lt;T&gt; ? T : T <span class="keyword">extends</span> (...<span class="attr">args</span>: infer A) =&gt; infer R ? <span class="function">(<span class="params">...args: A</span>) =&gt;</span> R : T;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">toHex</span>(<span class="params"><span class="variable language_">this</span>: <span class="built_in">Number</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">toString</span>(<span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="attr">fiveToHex</span>: <span class="title class_">OmitThisParameter</span>&lt;<span class="keyword">typeof</span> toHex&gt; = toHex.<span class="title function_">bind</span>(<span class="number">5</span>);</span><br><span class="line"> </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fiveToHex</span>());</span><br><span class="line"><span class="comment">// const fiveToHex: () =&gt; string</span></span><br></pre></td></tr></table></figure><h3 id="ThisType"><a href="#ThisType" class="headerlink" title="ThisType"></a>ThisType</h3><p>ThisType不会对类型做任何改变，只是为了语义的t设置this类型。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Marker for contextual &#x27;this&#x27; type</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ThisType</span>&lt;T&gt; &#123; &#125;</span><br></pre></td></tr></table></figure><h3 id="Uppercase，Lowercase…-为字符串模板而生的泛型"><a href="#Uppercase，Lowercase…-为字符串模板而生的泛型" class="headerlink" title="Uppercase，Lowercase… 为字符串模板而生的泛型"></a>Uppercase，Lowercase… 为字符串模板而生的泛型</h3><p>intrinsic表示在ts内部实现的，我们无法看到细节</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Convert string literal type to uppercase</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Uppercase</span>&lt;S <span class="keyword">extends</span> <span class="built_in">string</span>&gt; = intrinsic;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Convert string literal type to lowercase</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Lowercase</span>&lt;S <span class="keyword">extends</span> <span class="built_in">string</span>&gt; = intrinsic;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Convert first character of string literal type to uppercase</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Capitalize</span>&lt;S <span class="keyword">extends</span> <span class="built_in">string</span>&gt; = intrinsic;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Convert first character of string literal type to lowercase</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Uncapitalize</span>&lt;S <span class="keyword">extends</span> <span class="built_in">string</span>&gt; = intrinsic;</span><br></pre></td></tr></table></figure><h2 id="自定义工具类型"><a href="#自定义工具类型" class="headerlink" title="自定义工具类型"></a>自定义工具类型</h2><h3 id="setOptions"><a href="#setOptions" class="headerlink" title="setOptions"></a>setOptions</h3><p>将某些属性设置为可选的</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> flattening&lt;T&gt; = &#123;</span><br><span class="line">  [P <span class="keyword">in</span> keyof T]: T[P]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">SetOptional</span>&lt;T, K <span class="keyword">extends</span> keyof T&gt; = flattening&lt;</span><br><span class="line">  &#123;</span><br><span class="line">    [p <span class="keyword">in</span> keyof <span class="title class_">Omit</span>&lt;T, K&gt;]: T[p]</span><br><span class="line">  &#125; &amp; &#123;</span><br><span class="line">    [i <span class="keyword">in</span> K]?: T[i]</span><br><span class="line">  &#125;</span><br><span class="line">&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Foo</span> = &#123;</span><br><span class="line"> <span class="attr">a</span>: <span class="built_in">number</span>;</span><br><span class="line"> b?: <span class="built_in">string</span>;</span><br><span class="line"> <span class="attr">c</span>: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">SomeOptional</span> = <span class="title class_">SetOptional</span>&lt;<span class="title class_">Foo</span>, <span class="string">&#x27;a&#x27;</span> | <span class="string">&#x27;b&#x27;</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type SomeOptional = &#123;</span></span><br><span class="line"><span class="comment">//  a?: number; // 该属性已变成可选的</span></span><br><span class="line"><span class="comment">//  b?: string; // 保持不变</span></span><br><span class="line"><span class="comment">//  c: boolean; </span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><h3 id="ConditionalPick"><a href="#ConditionalPick" class="headerlink" title="ConditionalPick"></a>ConditionalPick</h3><p>前面是根据key保留，这个是根据类型保留</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Example</span> &#123;</span><br><span class="line"> <span class="attr">a</span>: <span class="built_in">string</span>;</span><br><span class="line"> <span class="attr">b</span>: <span class="built_in">string</span> | <span class="built_in">number</span>;</span><br><span class="line"> <span class="attr">c</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line"> <span class="attr">d</span>: &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ConditionalPick</span>&lt;T, K&gt; = <span class="title class_">Pick</span>&lt;</span><br><span class="line">  T,</span><br><span class="line">  &#123;</span><br><span class="line">    [P <span class="keyword">in</span> keyof T]: T[P] <span class="keyword">extends</span> K ? P : <span class="built_in">never</span></span><br><span class="line">  &#125;[keyof T]</span><br><span class="line">&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例：</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">StringKeysOnly</span> = <span class="title class_">ConditionalPick</span>&lt;<span class="title class_">Example</span>, <span class="built_in">string</span>&gt;;</span><br><span class="line"><span class="comment">//=&gt; &#123;a: string&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="DeepFlat"><a href="#DeepFlat" class="headerlink" title="DeepFlat"></a>DeepFlat</h3><p>将数组类型展开</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">DeepFlat</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[]&gt; = &#123;</span><br><span class="line">[P <span class="keyword">in</span> keyof T ] : T[P] <span class="keyword">extends</span> <span class="built_in">any</span>[] ? <span class="title class_">DeepFlat</span>&lt;T[P]&gt;: T[P]</span><br><span class="line">&#125;[<span class="built_in">number</span>]</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">DeepFlatResult</span> = <span class="title class_">DeepFlat</span>&lt;[[<span class="string">&#x27;a&#x27;</span>], [<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>], [[<span class="string">&#x27;d&#x27;</span>]], [[[[<span class="string">&#x27;e&#x27;</span>]]]]]&gt;</span><br><span class="line"><span class="comment">// type DeepFlatResult = &quot;a&quot; | &quot;b&quot; | &quot;c&quot; | &quot;d&quot; | &quot;e&quot;</span></span><br></pre></td></tr></table></figure><h3 id="EmptyObject"><a href="#EmptyObject" class="headerlink" title="EmptyObject"></a>EmptyObject</h3><p>是对象只能为一个空对象</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">EmptyObject</span> = &#123;</span><br><span class="line">  <span class="comment">// type PropertyKey = string | number | symbol</span></span><br><span class="line">  [K <span class="keyword">in</span> <span class="title class_">PropertyKey</span>]: <span class="built_in">never</span> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">shouldPass</span>: <span class="title class_">EmptyObject</span> = &#123;&#125;; <span class="comment">// 可以正常赋值</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">shouldFail</span>: <span class="title class_">EmptyObject</span> = &#123; <span class="comment">// 将出现编译错误</span></span><br><span class="line">  <span class="attr">prop</span>: <span class="string">&quot;TS&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="NonEmptyArray"><a href="#NonEmptyArray" class="headerlink" title="NonEmptyArray"></a>NonEmptyArray</h3><p>非空数组</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">NonEmptyArray</span>&lt;T&gt; = [T, ...T[]]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">a</span>: <span class="title class_">NonEmptyArray</span>&lt;<span class="built_in">string</span>&gt; = [] <span class="comment">// 将出现编译错误</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">b</span>: <span class="title class_">NonEmptyArray</span>&lt;<span class="built_in">string</span>&gt; = [<span class="string">&#x27;Hello TS&#x27;</span>] <span class="comment">// 非空数据，正常使用</span></span><br></pre></td></tr></table></figure><h3 id="JoinStrArray"><a href="#JoinStrArray" class="headerlink" title="JoinStrArray"></a>JoinStrArray</h3><p>用于根据指定的 Separator 分隔符，对字符串数组类型进行拼接</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">JoinStrArray</span>&lt;<span class="title class_">Arr</span> <span class="keyword">extends</span> <span class="built_in">string</span>[], <span class="title class_">Separator</span> <span class="keyword">extends</span> <span class="built_in">string</span>, <span class="title class_">Result</span> <span class="keyword">extends</span> <span class="built_in">string</span> = <span class="string">&quot;&quot;</span>&gt; =</span><br><span class="line">  <span class="comment">//第一步，使用infer 分离出 当前元素和剩余参数</span></span><br><span class="line">  <span class="title class_">Arr</span> <span class="keyword">extends</span> [infer <span class="title class_">El</span>, ...infer <span class="title class_">Rest</span>]</span><br><span class="line">    ? <span class="comment">//第二部判断是否有剩余参数</span></span><br><span class="line">      <span class="title class_">Rest</span> <span class="keyword">extends</span> <span class="built_in">string</span>[]</span><br><span class="line">      ? <span class="comment">//第二部判断是否为空数组</span></span><br><span class="line">        <span class="title class_">El</span> <span class="keyword">extends</span> <span class="built_in">string</span></span><br><span class="line">        ? <span class="comment">//第三步判断是否第一次</span></span><br><span class="line">          <span class="title class_">Result</span> <span class="keyword">extends</span> <span class="string">&quot;&quot;</span></span><br><span class="line">          ? <span class="title class_">JoinStrArray</span>&lt;<span class="title class_">Rest</span>, <span class="title class_">Separator</span>, <span class="string">`<span class="subst">$&#123;El&#125;</span>`</span>&gt;</span><br><span class="line">          : <span class="title class_">JoinStrArray</span>&lt;<span class="title class_">Rest</span>, <span class="title class_">Separator</span>, <span class="string">`<span class="subst">$&#123;Result&#125;</span><span class="subst">$&#123;Separator&#125;</span><span class="subst">$&#123;El&#125;</span>`</span>&gt;</span><br><span class="line">        : <span class="string">`<span class="subst">$&#123;Result&#125;</span>`</span></span><br><span class="line">      : <span class="string">`<span class="subst">$&#123;Result&#125;</span>`</span></span><br><span class="line">    : <span class="string">`<span class="subst">$&#123;Result&#125;</span>`</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Names</span> = [<span class="string">&quot;Sem&quot;</span>, <span class="string">&quot;Lolo&quot;</span>, <span class="string">&quot;Kaquko&quot;</span>]</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">NamesComma</span> = <span class="title class_">JoinStrArray</span>&lt;<span class="title class_">Names</span>, <span class="string">&quot;,&quot;</span>&gt; <span class="comment">// &quot;Sem,Lolo,Kaquko&quot;</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">NamesSpace</span> = <span class="title class_">JoinStrArray</span>&lt;<span class="title class_">Names</span>, <span class="string">&quot; &quot;</span>&gt; <span class="comment">// &quot;Sem Lolo Kaquko&quot;</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">NamesStars</span> = <span class="title class_">JoinStrArray</span>&lt;<span class="title class_">Names</span>, <span class="string">&quot;⭐️&quot;</span>&gt; <span class="comment">// &quot;Sem⭐️Lolo⭐️Kaquko&quot;</span></span><br></pre></td></tr></table></figure><h3 id="Trim"><a href="#Trim" class="headerlink" title="Trim"></a>Trim</h3><p>去除空格</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> clearLeft&lt;V <span class="keyword">extends</span> <span class="built_in">string</span>&gt; = V <span class="keyword">extends</span> <span class="string">` <span class="subst">$&#123;infer R&#125;</span>`</span> ?clearLeft&lt;R&gt;:V</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> clearRight&lt;V <span class="keyword">extends</span> <span class="built_in">string</span>&gt; = V <span class="keyword">extends</span> <span class="string">`<span class="subst">$&#123;infer R&#125;</span> `</span> ?clearRight&lt;R&gt;:V</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Trim</span>&lt;V <span class="keyword">extends</span> <span class="built_in">string</span>&gt; = clearRight&lt;clearLeft&lt;V&gt;&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="title class_">Trim</span>&lt;<span class="string">&#x27; coolFish &#x27;</span>&gt;</span><br><span class="line"><span class="comment">//=&gt; &#x27;coolFish&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="Head"><a href="#Head" class="headerlink" title="Head"></a>Head</h3><p>获取第一个</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Head</span>&lt;T <span class="keyword">extends</span> <span class="title class_">Array</span>&lt;<span class="built_in">any</span>&gt;&gt; =</span><br><span class="line">T <span class="keyword">extends</span> [ <span class="attr">first</span>: infer R , ...<span class="attr">rest</span>: <span class="built_in">any</span>[]  ] ?  R : <span class="built_in">never</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">H0</span> = <span class="title class_">Head</span>&lt;[]&gt; <span class="comment">// never</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">H1</span> = <span class="title class_">Head</span>&lt;[<span class="number">1</span>]&gt; <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">H2</span> = <span class="title class_">Head</span>&lt;[<span class="number">3</span>, <span class="number">2</span>]&gt; <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">H0</span> = <span class="title class_">Head</span>&lt;[]&gt; <span class="comment">// never</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">H1</span> = <span class="title class_">Head</span>&lt;[<span class="number">1</span>]&gt; <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">H2</span> = <span class="title class_">Head</span>&lt;[<span class="number">3</span>, <span class="number">2</span>]&gt; <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h3 id="Push"><a href="#Push" class="headerlink" title="Push"></a>Push</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Push</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[], V&gt; = [...T,V]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Arr0</span> = <span class="title class_">Push</span>&lt;[], <span class="number">1</span>&gt; <span class="comment">// [1]</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Arr1</span> = <span class="title class_">Push</span>&lt;[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">4</span>&gt; <span class="comment">// [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure><h3 id="UnionToIntersection"><a href="#UnionToIntersection" class="headerlink" title="UnionToIntersection"></a>UnionToIntersection</h3><p>联合类型转换为交叉类型</p><p>该类型工具利用了，infer在函数中逆变，可以把类型组合成一个交叉类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">UnionToIntersection</span>&lt;U&gt; = (U <span class="keyword">extends</span> <span class="built_in">any</span> ? <span class="function">(<span class="params">k: U</span>) =&gt;</span> <span class="built_in">void</span> : <span class="built_in">never</span>) <span class="keyword">extends</span> (<span class="attr">k</span>: infer I) =&gt; <span class="built_in">void</span> ? I : <span class="built_in">never</span><span class="comment">// 你的实现代码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">U0</span> = <span class="title class_">UnionToIntersection</span>&lt;<span class="built_in">string</span> | <span class="built_in">number</span>&gt; <span class="comment">// never</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">U1</span> = <span class="title class_">UnionToIntersection</span>&lt;&#123; <span class="attr">name</span>: <span class="built_in">string</span> &#125; | &#123; <span class="attr">age</span>: <span class="built_in">number</span> &#125;&gt; <span class="comment">// &#123; name: string; &#125; &amp; &#123; age: number; &#125;</span></span><br></pre></td></tr></table></figure><h3 id="OptionalKeys"><a href="#OptionalKeys" class="headerlink" title="OptionalKeys"></a>OptionalKeys</h3><p>选出是可选的字段，主要利用 可选 不是 require 的子类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Person</span> = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">  <span class="keyword">from</span>?: <span class="built_in">string</span></span><br><span class="line">  speak?: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">OptionalKeys</span>&lt;T&gt; = &#123;</span><br><span class="line">  [P <span class="keyword">in</span> keyof T]: <span class="title class_">Pick</span>&lt;T, P&gt; <span class="keyword">extends</span> <span class="title class_">Required</span>&lt;<span class="title class_">Pick</span>&lt;T, P&gt;&gt; ? <span class="built_in">never</span> : P</span><br><span class="line">&#125;[keyof T]</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PersonOptionalKeys</span> = <span class="title class_">OptionalKeys</span>&lt;<span class="title class_">Person</span>&gt; <span class="comment">// &quot;from&quot; | &quot;speak&quot;</span></span><br></pre></td></tr></table></figure><h3 id="TupleToUnion"><a href="#TupleToUnion" class="headerlink" title="TupleToUnion"></a>TupleToUnion</h3><p>元组类型转联合类型</p><p>有两种思路，一种是使用extends类型分发配合infer，另一种是使用Array[number]</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一种解法，infer</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TupleToUnion</span>&lt;T&gt; = T <span class="keyword">extends</span> <span class="title class_">Array</span>&lt;infer <span class="variable constant_">ITEMS</span>&gt; ? <span class="variable constant_">ITEMS</span> : <span class="built_in">never</span></span><br><span class="line"><span class="keyword">type</span> k1 = <span class="title class_">TupleToUnion</span>&lt;[<span class="built_in">string</span>, <span class="built_in">number</span>]&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种解法，Array[number]</span></span><br><span class="line"><span class="keyword">type</span> k2 = <span class="title class_">TupleToUnion2</span>&lt;[<span class="built_in">string</span>, <span class="built_in">number</span>]&gt;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TupleToUnion2</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[]&gt; = T[<span class="built_in">number</span>]</span><br></pre></td></tr></table></figure><h3 id="TupleToObject"><a href="#TupleToObject" class="headerlink" title="TupleToObject"></a>TupleToObject</h3><p>Tuple转Object，注意readonly与<code>keyof any[]</code>获得的是<code>0,1,2...</code>，需要先使用T[number]获得key</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">TupleToObject</span>&lt;T <span class="keyword">extends</span> <span class="keyword">readonly</span> <span class="built_in">any</span>[]&gt; = &#123;</span><br><span class="line">  [P <span class="keyword">in</span> T[<span class="built_in">number</span>]]: T[P]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> tuple = [<span class="string">&quot;tesla&quot;</span>, <span class="string">&quot;model 3&quot;</span>, <span class="string">&quot;model X&quot;</span>, <span class="string">&quot;model Y&quot;</span>] <span class="keyword">as</span> <span class="keyword">const</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> result = <span class="title class_">TupleToObject</span>&lt;<span class="keyword">typeof</span> tuple&gt; <span class="comment">// expected &#123; tesla: &#x27;tesla&#x27;, &#x27;model 3&#x27;: &#x27;model 3&#x27;, &#x27;model X&#x27;: &#x27;model X&#x27;, &#x27;model Y&#x27;: &#x27;model Y&#x27;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Awaited"><a href="#Awaited" class="headerlink" title="Awaited"></a>Awaited</h3><p>获取<code>Promise</code>的返回类型</p><p>这个主要需要考虑嵌套Promise的情况</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 非嵌套的情况</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Awaited</span>&lt;T&gt; = T <span class="keyword">extends</span> <span class="title class_">Promise</span>&lt;infer K&gt; ? K : <span class="built_in">never</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> cn = <span class="title class_">Awaited</span>&lt;<span class="title class_">Promise</span>&lt;&#123; <span class="attr">name</span>: <span class="number">1</span> &#125;&gt;&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 嵌套的情况</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Awaited</span>&lt;T&gt; = T <span class="keyword">extends</span> <span class="title class_">Promise</span>&lt;infer K&gt; ? <span class="title class_">Awaited</span>&lt;K&gt; : T</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> cn = <span class="title class_">Awaited</span>&lt;<span class="title class_">Promise</span>&lt;<span class="title class_">Promise</span>&lt;<span class="title class_">Promise</span>&lt;&#123; <span class="attr">name</span>: <span class="number">1</span> &#125;&gt;&gt;&gt;&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 官方的完整实现，还判断了null, undefined, 是不是类Promise</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Awaited</span>&lt;T&gt; =</span><br><span class="line">    T <span class="keyword">extends</span> <span class="literal">null</span> | <span class="literal">undefined</span> ? T : <span class="comment">// special case for `null | undefined` when not in `--strictNullChecks` mode</span></span><br><span class="line">        T <span class="keyword">extends</span> <span class="built_in">object</span> &amp; &#123; <span class="title function_">then</span>(<span class="attr">onfulfilled</span>: infer F): <span class="built_in">any</span> &#125; ? <span class="comment">// `await` only unwraps object types with a callable `then`. Non-object types are not unwrapped</span></span><br><span class="line">            F <span class="keyword">extends</span> (<span class="function">(<span class="params">value: infer V, ...args: <span class="built_in">any</span></span>) =&gt;</span> <span class="built_in">any</span>) ? <span class="comment">// if the argument to `then` is callable, extracts the first argument</span></span><br><span class="line">                <span class="title class_">Awaited</span>&lt;V&gt; : <span class="comment">// recursively unwrap the value</span></span><br><span class="line">                <span class="built_in">never</span> : <span class="comment">// the argument to `then` was not callable</span></span><br><span class="line">        T; <span class="comment">// non-object or non-thenable</span></span><br></pre></td></tr></table></figure><h3 id="DeepReadonly"><a href="#DeepReadonly" class="headerlink" title="DeepReadonly"></a>DeepReadonly</h3><p>深度deep, 通过keyof解构</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> X = &#123;</span><br><span class="line">  <span class="attr">x</span>: &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">1</span></span><br><span class="line">    <span class="attr">b</span>: <span class="string">&quot;hi&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="attr">y</span>: <span class="string">&quot;hey&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">DeepReadonly</span>&lt;T&gt; = keyof T <span class="keyword">extends</span> <span class="built_in">never</span> ? T : &#123; <span class="keyword">readonly</span> [P <span class="keyword">in</span> keyof T]: <span class="title class_">DeepReadonly</span>&lt;T[P]&gt; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type Expected = &#123;</span></span><br><span class="line"><span class="comment">//   readonly x: &#123;</span></span><br><span class="line"><span class="comment">//     readonly a: 1</span></span><br><span class="line"><span class="comment">//     readonly b: &quot;hi&quot;</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">//   readonly y: &quot;hey&quot;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><h3 id="Chainable（很有魅力的一个泛型）"><a href="#Chainable（很有魅力的一个泛型）" class="headerlink" title="Chainable（很有魅力的一个泛型）"></a>Chainable（很有魅力的一个泛型）</h3><p>这个泛型展现了ts非常灵活的特性，返回的结构可以动态生成</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Chainable</span>&lt;T = &#123;&#125;&gt; &#123;</span><br><span class="line">  option&lt;K <span class="keyword">extends</span> <span class="built_in">string</span>, V&gt;(<span class="attr">key</span>: K, <span class="attr">value</span>: V): <span class="title class_">Chainable</span>&lt;T &amp; &#123; [key <span class="keyword">in</span> K]: V &#125;&gt;</span><br><span class="line">  <span class="title function_">get</span>(): &#123; [K <span class="keyword">in</span> keyof T]: T[K] &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">const</span> <span class="attr">config</span>: <span class="title class_">Chainable</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = config.<span class="title function_">option</span>(<span class="string">&quot;foo&quot;</span>, <span class="number">123</span>).<span class="title function_">option</span>(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;type-challenges&quot;</span>).<span class="title function_">option</span>(<span class="string">&quot;bar&quot;</span>, &#123; <span class="attr">value</span>: <span class="string">&quot;Hello World&quot;</span> &#125;).<span class="title function_">get</span>()</span><br></pre></td></tr></table></figure><h3 id="Replace"><a href="#Replace" class="headerlink" title="Replace"></a>Replace</h3><p><code>Replace</code>将指定字符串进行查找和替换</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Replace</span>&lt;T <span class="keyword">extends</span> <span class="built_in">string</span>, U <span class="keyword">extends</span> <span class="built_in">string</span>, Z <span class="keyword">extends</span> <span class="built_in">string</span>&gt; = T <span class="keyword">extends</span> <span class="string">`<span class="subst">$&#123;infer strart&#125;</span><span class="subst">$&#123;U&#125;</span><span class="subst">$&#123;infer end&#125;</span>`</span></span><br><span class="line">  ? <span class="string">`<span class="subst">$&#123;strart&#125;</span><span class="subst">$&#123;Z&#125;</span><span class="subst">$&#123;end&#125;</span>`</span></span><br><span class="line">  : T</span><br></pre></td></tr></table></figure><h3 id="ReplaceAll"><a href="#ReplaceAll" class="headerlink" title="ReplaceAll"></a>ReplaceAll</h3><p>增加一个递归就好</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">ReplaceAll</span>&lt;T <span class="keyword">extends</span> <span class="built_in">string</span>, U <span class="keyword">extends</span> <span class="built_in">string</span>, Z <span class="keyword">extends</span> <span class="built_in">string</span>&gt; = T <span class="keyword">extends</span> <span class="string">`<span class="subst">$&#123;infer strart&#125;</span><span class="subst">$&#123;U&#125;</span><span class="subst">$&#123;infer end&#125;</span>`</span></span><br><span class="line">  ? <span class="title class_">ReplaceAll</span>&lt;<span class="string">`<span class="subst">$&#123;strart&#125;</span><span class="subst">$&#123;Z&#125;</span><span class="subst">$&#123;end&#125;</span>`</span>, U, Z&gt;</span><br><span class="line">  : T</span><br></pre></td></tr></table></figure><h3 id="Permutation"><a href="#Permutation" class="headerlink" title="Permutation"></a>Permutation</h3><p>类型的排列组合</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Exclude&lt;P, T&gt; 每一次都会排除A B C中的一个</span></span><br><span class="line"><span class="comment">// [T] extends [never] 的作用是递归终止条件</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Permutation</span>&lt;T, P = T&gt; = [T] <span class="keyword">extends</span> [<span class="built_in">never</span>] ? [] : T <span class="keyword">extends</span> <span class="built_in">any</span> ? [T, ...<span class="title class_">Permutation</span>&lt;<span class="title class_">Exclude</span>&lt;P, T&gt;&gt;] : P</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> perm = <span class="title class_">Permutation</span>&lt;<span class="string">&quot;A&quot;</span> | <span class="string">&quot;B&quot;</span> | <span class="string">&quot;C&quot;</span>&gt;</span><br><span class="line"><span class="comment">// type perm = [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;] | [&quot;A&quot;, &quot;C&quot;, &quot;B&quot;] | [&quot;B&quot;, &quot;A&quot;, &quot;C&quot;] | [&quot;B&quot;, &quot;C&quot;, &quot;A&quot;] | [&quot;C&quot;, &quot;A&quot;, &quot;B&quot;] | [&quot;C&quot;, &quot;B&quot;, &quot;A&quot;]</span></span><br></pre></td></tr></table></figure><h3 id="LengthOfString"><a href="#LengthOfString" class="headerlink" title="LengthOfString"></a>LengthOfString</h3><p>计算string的长度，通过将字符串转化为数组，取length获取长度</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">LengthOfString</span>&lt;T <span class="keyword">extends</span> <span class="built_in">string</span>, S <span class="keyword">extends</span> <span class="built_in">any</span>[] = []&gt; = T <span class="keyword">extends</span> <span class="string">`<span class="subst">$&#123;infer first&#125;</span><span class="subst">$&#123;infer end&#125;</span>`</span></span><br><span class="line">  ? <span class="title class_">LengthOfString</span>&lt;end, [first, ...S]&gt;</span><br><span class="line">  : S[<span class="string">&quot;length&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> x2 = <span class="title class_">LengthOfString</span>&lt;<span class="string">&quot;123456789&quot;</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="Flatten"><a href="#Flatten" class="headerlink" title="Flatten"></a>Flatten</h3><p>将嵌套数组打平</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Flatten</span>&lt;T&gt; = T <span class="keyword">extends</span> [infer first, ...infer end]</span><br><span class="line">  ? first <span class="keyword">extends</span> <span class="built_in">any</span>[]</span><br><span class="line">    ? <span class="title class_">Flatten</span>&lt;[...first, ...end]&gt;</span><br><span class="line">    : [first, ...<span class="title class_">Flatten</span>&lt;end&gt;]</span><br><span class="line">  : T</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> flatten = <span class="title class_">Flatten</span>&lt;[<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>], [[[<span class="number">5</span>]]]]&gt; <span class="comment">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><h3 id="AppendToObject"><a href="#AppendToObject" class="headerlink" title="AppendToObject"></a>AppendToObject</h3><p>追加属性到数组中</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">AppendToObject</span>&lt;T, key <span class="keyword">extends</span> <span class="built_in">string</span>, value&gt; = &#123;</span><br><span class="line">  [k <span class="keyword">in</span> keyof T | key]: k <span class="keyword">extends</span> keyof T ? T[k] : value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Test1</span> = &#123; <span class="attr">id</span>: <span class="string">&quot;1&quot;</span> &#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Result1</span> = <span class="title class_">AppendToObject</span>&lt;<span class="title class_">Test1</span>, <span class="string">&quot;value&quot;</span>, <span class="number">4</span>&gt; <span class="comment">// expected to be &#123; id: &#x27;1&#x27;, value: 4 &#125;</span></span><br></pre></td></tr></table></figure><h3 id="Absolute"><a href="#Absolute" class="headerlink" title="Absolute"></a>Absolute</h3><p>绝对值，主要通过字符串模板去解决</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Absolute</span>&lt;T <span class="keyword">extends</span> <span class="built_in">number</span> | <span class="built_in">string</span> | <span class="built_in">bigint</span>&gt; = <span class="string">`<span class="subst">$&#123;T&#125;</span>`</span> <span class="keyword">extends</span> <span class="string">`-<span class="subst">$&#123;infer Abs&#125;</span>`</span> ? <span class="title class_">Abs</span> : <span class="string">`<span class="subst">$&#123;T&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> x = <span class="title class_">Absolute</span>&lt;-<span class="number">100</span>&gt;</span><br><span class="line"><span class="comment">// type x = &quot;100&quot;</span></span><br></pre></td></tr></table></figure><h3 id="StringToUnion"><a href="#StringToUnion" class="headerlink" title="StringToUnion"></a>StringToUnion</h3><p>string转换为union</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Test2</span> = <span class="string">&quot;123&quot;</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Result2</span> = <span class="title class_">StringToUnion</span>&lt;<span class="title class_">Test2</span>&gt; <span class="comment">// expected to be &quot;1&quot; | &quot;2&quot; | &quot;3&quot;</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://zhoujunxiong.gitee.com/categories/Typescript/">Typescript</category>
      
      
      <category domain="http://zhoujunxiong.gitee.com/tags/%E5%89%8D%E7%AB%AF/">前端</category>
      
      <category domain="http://zhoujunxiong.gitee.com/tags/Typescript/">Typescript</category>
      
      
      <comments>http://zhoujunxiong.gitee.com/2021/12/25/%E5%89%8D%E7%AB%AF/Typescript/Typescript%E4%B9%8B%E6%B3%9B%E5%9E%8B%E5%B7%A5%E5%85%B7/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Typescript之依赖注入</title>
      <link>http://zhoujunxiong.gitee.com/2021/11/21/GO/go%E4%B9%8B%E5%8E%9F%E7%94%9Fhttp/</link>
      <guid>http://zhoujunxiong.gitee.com/2021/11/21/GO/go%E4%B9%8B%E5%8E%9F%E7%94%9Fhttp/</guid>
      <pubDate>Sun, 21 Nov 2021 02:11:18 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;http之client&quot;&gt;&lt;a href=&quot;#http之client&quot; class=&quot;headerlink&quot; title=&quot;http之client&quot;&gt;&lt;/a&gt;http之client&lt;/h2&gt;&lt;p&gt;其实原生的http用的很久了，感觉还是有必要做一个总结&lt;/p&gt;
&lt;h</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="http之client"><a href="#http之client" class="headerlink" title="http之client"></a>http之client</h2><p>其实原生的http用的很久了，感觉还是有必要做一个总结</p><h3 id="简单的发送请求"><a href="#简单的发送请求" class="headerlink" title="简单的发送请求"></a>简单的发送请求</h3><p>通过go的http模块，我们可以快速的发送请求<code>get</code>,<code>post</code>,<code>postForm</code></p><p>定义一个错误处理函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">checkError</span><span class="params">(err <span class="type">error</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先演示一下发送一个<code>get</code>请求</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">resp, err := http.Get(<span class="string">&quot;http://127.0.0.1:1001/ping&quot;</span>)</span><br><span class="line">checkError(err)</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">resp.Body.Close()</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">log.Println(resp.ContentLength)</span><br><span class="line">  <span class="comment">// 为了放下返回的内容，我们需要开辟一个足够的空间</span></span><br><span class="line">body := <span class="built_in">make</span>([]<span class="type">byte</span>, resp.ContentLength)</span><br><span class="line">  <span class="comment">// 将内容读取到我们定义好的变量中</span></span><br><span class="line">resp.Body.Read(body)</span><br><span class="line">  <span class="comment">// 将字节转化为string</span></span><br><span class="line">log.Println(<span class="type">string</span>(body))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后是<code>post</code>请求, post请求是可以携带请求体的，so, post会有三个参数，<code>url</code>, <code>content-type</code>, <code>body</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Post</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="comment">// body必须是一个 io.Reader, 所以用strings.NewReader转化一下</span></span><br><span class="line">resp, err := http.Post(<span class="string">&quot;http://127.0.0.1:1001/ping&quot;</span>, <span class="string">&quot;application/json&quot;</span>, strings.NewReader(<span class="string">&quot;&#123;\&quot;name\&quot;: \&quot;sky\&quot;&#125;&quot;</span>))</span><br><span class="line">checkError(err)</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">resp.Body.Close()</span><br><span class="line">&#125;()</span><br><span class="line">log.Println(resp.ContentLength)</span><br><span class="line">body := <span class="built_in">make</span>([]<span class="type">byte</span>, resp.ContentLength)</span><br><span class="line">resp.Body.Read(body)</span><br><span class="line">log.Println(<span class="type">string</span>(body))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就是<code>postForm</code>了，go还是很方便的，可以直接发送<code>application/x-www-form-urlencoded</code>, 类似<code>name=sky&amp;name=sniper</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">func <span class="title class_">PostForm</span>() &#123;</span><br><span class="line">resp, err := http.<span class="title class_">PostForm</span>(<span class="string">&quot;http://127.0.0.1:1001/ping&quot;</span>, url.<span class="property">Values</span>&#123;</span><br><span class="line"><span class="string">&quot;name&quot;</span>: []string&#123;<span class="string">&quot;sky&quot;</span>, <span class="string">&quot;sniper&quot;</span>&#125;,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="title function_">checkError</span>(err)</span><br><span class="line">defer <span class="title function_">func</span>(<span class="params"></span>) &#123;</span><br><span class="line">resp.<span class="property">Body</span>.<span class="title class_">Close</span>()</span><br><span class="line">&#125;()</span><br><span class="line">log.<span class="title class_">Println</span>(resp.<span class="property">ContentLength</span>)</span><br><span class="line">body := <span class="title function_">make</span>([]byte, resp.<span class="property">ContentLength</span>)</span><br><span class="line">resp.<span class="property">Body</span>.<span class="title class_">Read</span>(body)</span><br><span class="line">log.<span class="title class_">Println</span>(<span class="title function_">string</span>(body))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="复杂请求"><a href="#复杂请求" class="headerlink" title="复杂请求"></a>复杂请求</h3><p>上面的简单请求都是基于<code>http.NewRequest</code>进行的封装</p><p>如果我们需要设置<code>cookie</code>使用返回的cookie，<code>https</code>设置证书, <code>CheckRedirect</code> 是否跟随重定向，</p><p>还有底层的传输配置<code>Transport</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">client</span><span class="params">()</span></span> &#123;</span><br><span class="line">req, err := http.NewRequest(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;http://test01.com01:1001/redirect&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">checkError(err)</span><br><span class="line">  <span class="comment">// net/http/cookiejar 官方实现会根据域名发送</span></span><br><span class="line">cookie, _ := cookiejar.New(<span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line">  transport := &amp;http.Transport&#123;</span><br><span class="line"><span class="comment">// 使用系统代理</span></span><br><span class="line"><span class="comment">// Proxy:               http.ProxyFromEnvironment,</span></span><br><span class="line">Proxy: <span class="function"><span class="keyword">func</span><span class="params">(_ *http.Request)</span></span> (*url.URL, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> url.Parse(<span class="string">&quot;http://127.0.0.1:7890&quot;</span>)</span><br><span class="line">&#125;,</span><br><span class="line">    <span class="comment">// 或者这样</span></span><br><span class="line">    <span class="comment">// uri, _ := url.Parse(&quot;http://127.0.0.1:8888&quot;)</span></span><br><span class="line"><span class="comment">// client := &amp;http.Client&#123;</span></span><br><span class="line"><span class="comment">// Transport: &amp;http.Transport&#123;</span></span><br><span class="line"><span class="comment">// Proxy: http.ProxyURL(uri),</span></span><br><span class="line"><span class="comment">// &#125;,</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line">DisableCompression:  <span class="literal">true</span>,</span><br><span class="line">TLSHandshakeTimeout: <span class="number">10</span> * time.Second,</span><br><span class="line"><span class="comment">// 跳过证书验证</span></span><br><span class="line">TLSClientConfig: &amp;tls.Config&#123;InsecureSkipVerify: <span class="literal">true</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">client := http.Client&#123;</span><br><span class="line">    <span class="comment">// 底层的传输配置</span></span><br><span class="line">    Transport: transport,</span><br><span class="line">CheckRedirect: <span class="function"><span class="keyword">func</span><span class="params">(req *http.Request, via []*http.Request)</span></span> <span class="type">error</span> &#123;</span><br><span class="line"><span class="comment">// log.Println(len(via))</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line"><span class="comment">// 可以通过返回这个禁止重定向</span></span><br><span class="line"><span class="comment">// return http.ErrUseLastResponse</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 设置这个，就可以记录下请求的cookie</span></span><br><span class="line">Jar: cookie,</span><br><span class="line">    <span class="comment">// 设置超时时间</span></span><br><span class="line">    Timeout: time.Second * <span class="number">10</span>,</span><br><span class="line">&#125;</span><br><span class="line">resp, err := client.Do(req)</span><br><span class="line">checkError(err)</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">resp.Body.Close()</span><br><span class="line">&#125;()</span><br><span class="line">log.Println(resp.ContentLength)</span><br><span class="line">body := <span class="built_in">make</span>([]<span class="type">byte</span>, resp.ContentLength)</span><br><span class="line">resp.Body.Read(body)</span><br><span class="line">log.Println(<span class="type">string</span>(body))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="http之server"><a href="#http之server" class="headerlink" title="http之server"></a>http之server</h2><h3 id="静态文件"><a href="#静态文件" class="headerlink" title="静态文件"></a>静态文件</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  http.Handle(<span class="string">&quot;/&quot;</span>, http.FileServer(http.Dir(<span class="string">&quot;./http2&quot;</span>)))</span><br><span class="line">  http.ListenAndServe(<span class="string">&quot;:1001&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="起一个服务与接收参数"><a href="#起一个服务与接收参数" class="headerlink" title="起一个服务与接收参数"></a>起一个服务与接收参数</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  http.HandleFunc(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(res http.ResponseWriter, req *http.Request)</span></span> &#123;</span><br><span class="line"><span class="comment">// body, _ := ioutil.ReadAll(req.Body)</span></span><br><span class="line">    <span class="comment">// 解析body里的数据，例如 x-www-form-urlencoded 这种格式</span></span><br><span class="line">req.ParseForm() <span class="comment">// 只有调用了该函数 PostForm 才会有值</span></span><br><span class="line">    <span class="comment">// 将body解析为 multipart/form-data，参数为最大body大小</span></span><br><span class="line">req.ParseMultipartForm(<span class="number">128</span>)</span><br><span class="line"><span class="comment">// fmt.Println(string(body))</span></span><br><span class="line">fmt.Println(req.Form) <span class="comment">// 包含 PostForm 与 req.URL.Query</span></span><br><span class="line">fmt.Println(req.PostForm)</span><br><span class="line">fmt.Println(req.URL.Query())</span><br><span class="line">fmt.Println(req.Header)</span><br><span class="line">res.Write([]<span class="type">byte</span>(<span class="string">&quot;success&quot;</span>))</span><br><span class="line">&#125;)</span><br><span class="line">  http.ListenAndServe(<span class="string">&quot;:1001&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有另一种传入结构体的方式来启动服务</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Sky <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(sky *Sky)</span></span> ServeHTTP(res http.ResponseWriter, req *http.Request) &#123;</span><br><span class="line">res.Write([]<span class="type">byte</span>(<span class="string">&quot;success\n&quot;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http.ListenAndServe(<span class="string">&quot;:1001&quot;</span>, &amp;Sky&#123;&#125;)</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://zhoujunxiong.gitee.com/categories/Go/">Go</category>
      
      
      <category domain="http://zhoujunxiong.gitee.com/tags/Go/">Go</category>
      
      
      <comments>http://zhoujunxiong.gitee.com/2021/11/21/GO/go%E4%B9%8B%E5%8E%9F%E7%94%9Fhttp/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>一个域名出现其它域名cookie</title>
      <link>http://zhoujunxiong.gitee.com/2021/11/13/%E5%89%8D%E7%AB%AF/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%AB%AF/%E4%B8%80%E4%B8%AA%E5%9F%9F%E5%90%8D%E5%87%BA%E7%8E%B0%E5%85%B6%E5%AE%83%E5%9F%9F%E5%90%8Dcookie/</link>
      <guid>http://zhoujunxiong.gitee.com/2021/11/13/%E5%89%8D%E7%AB%AF/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%AB%AF/%E4%B8%80%E4%B8%AA%E5%9F%9F%E5%90%8D%E5%87%BA%E7%8E%B0%E5%85%B6%E5%AE%83%E5%9F%9F%E5%90%8Dcookie/</guid>
      <pubDate>Sat, 13 Nov 2021 04:33:54 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;一个域名出现其它完全不同域名cookie&quot;&gt;&lt;a href=&quot;#一个域名出现其它完全不同域名cookie&quot; class=&quot;headerlink&quot; title=&quot;一个域名出现其它完全不同域名cookie&quot;&gt;&lt;/a&gt;一个域名出现其它完全不同域名cookie&lt;/h2&gt;&lt;</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="一个域名出现其它完全不同域名cookie"><a href="#一个域名出现其它完全不同域名cookie" class="headerlink" title="一个域名出现其它完全不同域名cookie"></a>一个域名出现其它完全不同域名cookie</h2><p>最近遇到一个非常之奇怪的问题，就是标题这个问题（不是二级域名与三级域名的问题）</p><p><img src= "/img/loading.svg" data-lazy-src="https://gitee.com/zhoujunxiong/BlogImg/raw/master/blog/20211113130158.png"></p><p>首先可以明确一点<code>只能访问同域名或者定级域名的cookie</code>，这个是没有问题</p><p>那么为什么会出现这种情况呢？</p><h3 id="第一种情况，访问了其它域名的资源"><a href="#第一种情况，访问了其它域名的资源" class="headerlink" title="第一种情况，访问了其它域名的资源"></a>第一种情况，访问了其它域名的资源</h3><p>例如你有一个<code>img</code>标签去访问其它域的，然后又会有设置cookie</p><p>这个时候就会看到三方域名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=<span class="string">&quot;http://test03.com03:1003/ping&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/redirect&#x27;</span>, <span class="function">(<span class="params">req, res</span>)=&gt;</span>&#123;</span><br><span class="line">  res.<span class="title function_">cookie</span>(<span class="string">&#x27;03key-redirect&#x27;</span>,<span class="string">&#x27;03&#x27;</span>)</span><br><span class="line">  res.<span class="title function_">redirect</span>(<span class="string">&#x27;http://test01.com01:1001/ping&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/ping&#x27;</span>, <span class="function">(<span class="params">req, res</span>)=&gt;</span>&#123;</span><br><span class="line">  res.<span class="title function_">cookie</span>(<span class="string">&#x27;03key-ping&#x27;</span>,<span class="string">&#x27;03&#x27;</span>)</span><br><span class="line">  res.<span class="title function_">send</span>(&#123;</span><br><span class="line">    <span class="attr">success</span>: <span class="string">&#x27;03&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">1003</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;监听成功&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="第二种情况，使用了iframe"><a href="#第二种情况，使用了iframe" class="headerlink" title="第二种情况，使用了iframe"></a>第二种情况，使用了iframe</h3><p>但是使用iframe，左边会有三方域名的显示</p><p><img src= "/img/loading.svg" data-lazy-src="https://gitee.com/zhoujunxiong/BlogImg/raw/master/blog/20211113133457.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe src=<span class="string">&quot;http://www.baidu.com&quot;</span>&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure><h3 id="第三种情况，重定向之后设置了cookie跳转使用了"><a href="#第三种情况，重定向之后设置了cookie跳转使用了" class="headerlink" title="第三种情况，重定向之后设置了cookie跳转使用了"></a>第三种情况，重定向之后设置了cookie跳转使用了</h3><p>这种情况也是我遇到的问题</p><p>a域名重定向到b域名，然后b域名设置了cookie，这个时候在b域名并不会看到cookie</p><p>当你重定向会到a域名，你会发现a域名下，会有b域名的cookie</p><p>服务器<code>A</code>的代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/redirect&#x27;</span>, <span class="function">(<span class="params">req, res</span>)=&gt;</span>&#123;</span><br><span class="line">  res.<span class="title function_">cookie</span>(<span class="string">&#x27;01key-redirect&#x27;</span>,<span class="string">&#x27;01&#x27;</span>)</span><br><span class="line">  res.<span class="title function_">redirect</span>(<span class="string">&#x27;http://test02.com02:1002/redirect&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/ping&#x27;</span>, <span class="function">(<span class="params">req, res</span>)=&gt;</span>&#123;</span><br><span class="line">  res.<span class="title function_">cookie</span>(<span class="string">&#x27;01key-ping&#x27;</span>,<span class="string">&#x27;01&#x27;</span>)</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">`</span></span><br><span class="line"><span class="string">  &lt;script src=&quot;http://test02.com02:1002/ping&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">  `</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">1001</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;监听成功&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>当<code>http://test01.com01:1001/redirect</code>这个网址之后，你可以发现并没有<code>b</code>域名的cookie</p><p>然后使用代码跳回<code>A</code>域名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = <span class="string">&#x27;http://test01.com01:1001/ping&#x27;</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://zhoujunxiong.gitee.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%AB%AF/">浏览器端</category>
      
      
      <category domain="http://zhoujunxiong.gitee.com/tags/%E5%89%8D%E7%AB%AF/">前端</category>
      
      <category domain="http://zhoujunxiong.gitee.com/tags/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%AB%AF/">浏览器端</category>
      
      
      <comments>http://zhoujunxiong.gitee.com/2021/11/13/%E5%89%8D%E7%AB%AF/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%AB%AF/%E4%B8%80%E4%B8%AA%E5%9F%9F%E5%90%8D%E5%87%BA%E7%8E%B0%E5%85%B6%E5%AE%83%E5%9F%9F%E5%90%8Dcookie/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>RX.JS</title>
      <link>http://zhoujunxiong.gitee.com/2021/10/21/%E5%89%8D%E7%AB%AF/%E6%A1%86%E6%9E%B6/rxjs/</link>
      <guid>http://zhoujunxiong.gitee.com/2021/10/21/%E5%89%8D%E7%AB%AF/%E6%A1%86%E6%9E%B6/rxjs/</guid>
      <pubDate>Thu, 21 Oct 2021 14:00:30 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;Observable&quot;&gt;&lt;a href=&quot;#Observable&quot; class=&quot;headerlink&quot; title=&quot;Observable&quot;&gt;&lt;/a&gt;Observable&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Observable&lt;/code&gt;在rxjs中表示观察者，一般通</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="Observable"><a href="#Observable" class="headerlink" title="Observable"></a>Observable</h2><p><code>Observable</code>在rxjs中表示观察者，一般通过<code>subscribe</code>方法订阅。(想一对多可以使用<code>Subject</code>)</p><p><code>Observable</code> 默认都是 <code>clod</code> 启动（就是每一次订阅都是一次新的流产生）</p><h3 id="自定义的Observable"><a href="#自定义的Observable" class="headerlink" title="自定义的Observable"></a>自定义的Observable</h3><p>下面这个会输出数据，1，2，3，隔一秒后输出4</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> observable = <span class="keyword">new</span> <span class="title class_">Observable</span>(<span class="function"><span class="params">subscriber</span> =&gt;</span> &#123;</span><br><span class="line">  subscriber.<span class="title function_">next</span>(<span class="number">1</span>)</span><br><span class="line">  subscriber.<span class="title function_">next</span>(<span class="number">2</span>)</span><br><span class="line">  subscriber.<span class="title function_">next</span>(<span class="number">3</span>)</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    subscriber.<span class="title function_">next</span>(<span class="number">4</span>)</span><br><span class="line">    subscriber.<span class="title function_">complete</span>()</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line">observable.<span class="title function_">subscribe</span>(<span class="function"><span class="params">v</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`observerA: <span class="subst">$&#123;v&#125;</span>`</span>))</span><br></pre></td></tr></table></figure><p>还可以通过<code>defer</code> 进行创建</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defer &#125; <span class="keyword">from</span> <span class="string">&quot;rxjs&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 因此在此 function 被呼叫前，都不會執行 Promise 內的程式</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">promiseFactory</span> = (<span class="params"></span>) =&gt;</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Promise 內被執行了&quot;</span>)</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="number">100</span>)</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="keyword">const</span> deferSource$ = <span class="title function_">defer</span>(promiseFactory)</span><br><span class="line"><span class="comment">// 此時 Promise 內程式依然不會被呼叫</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;示範用 defer 解決 Promise 的問題:&quot;</span>)</span><br><span class="line"><span class="comment">// 直到被訂閱了，才會呼叫裡面的 Promise 內的程式</span></span><br><span class="line">deferSource$.<span class="title function_">subscribe</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Promise 結果: <span class="subst">$&#123;result&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="通过of创建"><a href="#通过of创建" class="headerlink" title="通过of创建"></a>通过of创建</h3><p><code>of</code>可以传入多个数据，自动组装为一个<code>Observable</code>, of在函数式编程中表示创建一个实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">of</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">  .<span class="title function_">pipe</span>(<span class="title function_">take</span>(<span class="number">3</span>), <span class="title function_">observeOn</span>(asyncScheduler)) <span class="comment">// observeOn可以指定观察者在哪个调度器上执行</span></span><br><span class="line">  .<span class="title function_">subscribe</span>(<span class="function"><span class="params">v</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`observerB: <span class="subst">$&#123;v&#125;</span>`</span>))</span><br><span class="line">  <span class="comment">// 1,2,3</span></span><br></pre></td></tr></table></figure><h3 id="from"><a href="#from" class="headerlink" title="from"></a>from</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="keyword">from</span> &#125; <span class="keyword">from</span> <span class="string">&quot;rxjs&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">from</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]).<span class="title function_">subscribe</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`from: <span class="subst">$&#123;data&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="fromEvent"><a href="#fromEvent" class="headerlink" title="fromEvent"></a>fromEvent</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fromEvent</span>(<span class="variable language_">document</span>, <span class="string">&#x27;click&#x27;</span>).<span class="title function_">subscribe</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fromEvent 示範: 滑鼠事件觸發了&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="通过range创建"><a href="#通过range创建" class="headerlink" title="通过range创建"></a>通过range创建</h3><p><code>range</code>可以创建一个<code>Observable</code>，可以指定起始值和数量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; range &#125; <span class="keyword">from</span> <span class="string">&quot;rxjs&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从 3 开始，一共4个数（3，4，5，6）</span></span><br><span class="line"><span class="title function_">range</span>(<span class="number">3</span>, <span class="number">4</span>).<span class="title function_">subscribe</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`range: <span class="subst">$&#123;data&#125;</span>`</span>));</span><br></pre></td></tr></table></figure><h3 id="通过scheduled创建"><a href="#通过scheduled创建" class="headerlink" title="通过scheduled创建"></a>通过scheduled创建</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">scheduled</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],  queueScheduler)</span><br><span class="line">  .<span class="title function_">subscribe</span>(<span class="function"><span class="params">v</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`observerC: <span class="subst">$&#123;v&#125;</span>`</span>))</span><br></pre></td></tr></table></figure><h3 id="interval"><a href="#interval" class="headerlink" title="interval"></a>interval</h3><p><code>interval</code>可以创建一个每隔一段时间就会发射一个数据的Observable</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">interval</span>(<span class="number">500</span>)</span><br><span class="line">  .<span class="title function_">subscribe</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`interval : <span class="subst">$&#123;data&#125;</span>`</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="comment">// 1,2,3,.... 每隔500ms发射一个数据</span></span><br></pre></td></tr></table></figure><h3 id="timer"><a href="#timer" class="headerlink" title="timer"></a>timer</h3><p><code>timer</code>类似<code>settimeout</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">timer</span>(<span class="number">500</span>)</span><br><span class="line">  .<span class="title function_">subscribe</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`timer : <span class="subst">$&#123;data&#125;</span>`</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><h3 id="fromEventPattern"><a href="#fromEventPattern" class="headerlink" title="fromEventPattern"></a>fromEventPattern</h3><p><code>fromEventPattern</code>稍微比较复杂，它可以设置订阅和取消订阅的时间</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; fromEventPattern &#125; <span class="keyword">from</span> <span class="string">&quot;rxjs&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">addClickHandler</span> = (<span class="params">handler</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fromEventPattern 示範: 自定義註冊滑鼠事件&#x27;</span>)</span><br><span class="line">  <span class="title function_">handler</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">removeClickHandler</span> = (<span class="params">handler</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fromEventPattern 示範: 自定義取消滑鼠事件&#x27;</span>)</span><br><span class="line">  <span class="title function_">handler</span>()</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 自定义，注册事件的时候与移除事件的时候的动作</span></span><br><span class="line"><span class="keyword">const</span> source$ = <span class="title function_">fromEventPattern</span>(</span><br><span class="line">  addClickHandler,</span><br><span class="line">  removeClickHandler</span><br><span class="line">);</span><br><span class="line">  </span><br><span class="line"><span class="keyword">const</span> subscription = source$</span><br><span class="line">  .<span class="title function_">subscribe</span>(<span class="function"><span class="params">event</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fromEventPattern 示範: 滑鼠事件發生了&#x27;</span>, event));</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  subscription.<span class="title function_">unsubscribe</span>();</span><br><span class="line">&#125;, <span class="number">3000</span>);</span><br></pre></td></tr></table></figure><h3 id="EMPTY"><a href="#EMPTY" class="headerlink" title="EMPTY"></a>EMPTY</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">EMPTY</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"><span class="comment">// 啥都没有，只是一个空的 Observable，不会打印任何事件</span></span><br><span class="line"><span class="variable constant_">EMPTY</span>.<span class="title function_">subscribe</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`empty 範例: <span class="subst">$&#123;data&#125;</span>`</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// empty只会发生complete事件</span></span><br><span class="line"><span class="variable constant_">EMPTY</span>.<span class="title function_">subscribe</span>(&#123;</span><br><span class="line">  <span class="attr">next</span>: <span class="function"><span class="params">data</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`empty 範例: <span class="subst">$&#123;data&#125;</span>`</span>),</span><br><span class="line">  <span class="attr">complete</span>: <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;empty 結束&#x27;</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Scheduler"><a href="#Scheduler" class="headerlink" title="Scheduler"></a>Scheduler</h2><p><code>Scheduler</code>在rxjs中表示调度策略</p><ul><li>asyncScheduler 类似settimeout</li><li>queueScheduler 就是同步的（嵌套使用时会有一些特别）</li><li>animationFrameScheduler 就是requestAnimationFrame</li><li>asapScheduler 就是setImmediate, promise</li></ul><h3 id="queueScheduler"><a href="#queueScheduler" class="headerlink" title="queueScheduler"></a>queueScheduler</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当立即使用时，它会同步安排给定的任务</span></span><br><span class="line"><span class="comment">// 然而，当递归调用时，该任务将被放入队列并等待当前任务执行</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; queueScheduler &#125; <span class="keyword">from</span> <span class="string">&quot;rxjs&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;start&#x27;</span>);</span><br><span class="line">queueScheduler.<span class="title function_">schedule</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  queueScheduler.<span class="title function_">schedule</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;second&quot;</span>)) <span class="comment">// will not happen now, but will be put on a queue</span></span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;first&quot;</span>)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;end&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// start</span></span><br><span class="line"><span class="comment">// first</span></span><br><span class="line"><span class="comment">// second</span></span><br><span class="line"><span class="comment">// end</span></span><br></pre></td></tr></table></figure><h3 id="asyncScheduler"><a href="#asyncScheduler" class="headerlink" title="asyncScheduler"></a>asyncScheduler</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Observable</span>, asyncScheduler &#125; <span class="keyword">from</span> <span class="string">&quot;rxjs&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; observeOn &#125; <span class="keyword">from</span> <span class="string">&quot;rxjs/operators&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> observable = <span class="keyword">new</span> <span class="title class_">Observable</span>(<span class="function"><span class="params">observer</span> =&gt;</span> &#123;</span><br><span class="line">  observer.<span class="title function_">next</span>(<span class="number">1</span>)</span><br><span class="line">  observer.<span class="title function_">next</span>(<span class="number">2</span>)</span><br><span class="line">  observer.<span class="title function_">next</span>(<span class="number">3</span>)</span><br><span class="line">  observer.<span class="title function_">complete</span>()</span><br><span class="line">&#125;).<span class="title function_">pipe</span>(<span class="title function_">observeOn</span>(asyncScheduler))</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;just before subscribe&quot;</span>)</span><br><span class="line">observable.<span class="title function_">subscribe</span>(&#123;</span><br><span class="line">  <span class="title function_">next</span>(<span class="params">x</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;got value &quot;</span> + x)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">error</span>(<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;something wrong occurred: &quot;</span> + err)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">complete</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;done&quot;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;just after subscribe&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Subject"><a href="#Subject" class="headerlink" title="Subject"></a>Subject</h2><p><code>Observer</code>可以通过<code>Subject</code>进行分发</p><h3 id="Subject-1"><a href="#Subject-1" class="headerlink" title="Subject"></a>Subject</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; count, interval, <span class="title class_">Subject</span>, take &#125; <span class="keyword">from</span> <span class="string">&quot;rxjs&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Subject 天生是hot Observable(就是新订阅的不会重头开始)</span></span><br><span class="line"><span class="keyword">const</span> source$ = <span class="keyword">new</span> <span class="title class_">Subject</span>()</span><br><span class="line"></span><br><span class="line"><span class="title function_">interval</span>(<span class="number">500</span>).<span class="title function_">pipe</span>(<span class="title function_">take</span>(<span class="number">10</span>)).<span class="title function_">subscribe</span>(source$)</span><br><span class="line"></span><br><span class="line">source$.<span class="title function_">subscribe</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Subject 第一次訂閱: <span class="subst">$&#123;data&#125;</span>`</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  source$.<span class="title function_">subscribe</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Subject 第二次訂閱: <span class="subst">$&#123;data&#125;</span>`</span>))</span><br><span class="line">&#125;, <span class="number">2000</span>)</span><br><span class="line"></span><br><span class="line">source$.<span class="title function_">pipe</span>(<span class="title function_">count</span>()).<span class="title function_">subscribe</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`总数: <span class="subst">$&#123;data&#125;</span>`</span>))</span><br></pre></td></tr></table></figure><h3 id="AsyncSubject"><a href="#AsyncSubject" class="headerlink" title="AsyncSubject"></a>AsyncSubject</h3><p><code>AsyncSubject</code>是在<code>subject</code>执行了complete方法后才会发射最后一个值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AsyncSubject</span> &#125; <span class="keyword">from</span> <span class="string">&quot;rxjs&quot;</span></span><br><span class="line"><span class="keyword">const</span> subject = <span class="keyword">new</span> <span class="title class_">AsyncSubject</span>()</span><br><span class="line"></span><br><span class="line">subject.<span class="title function_">subscribe</span>(&#123;</span><br><span class="line">  <span class="attr">next</span>: <span class="function"><span class="params">v</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`observerA: <span class="subst">$&#123;v&#125;</span>`</span>),</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">subject.<span class="title function_">next</span>(<span class="number">1</span>)</span><br><span class="line">subject.<span class="title function_">next</span>(<span class="number">2</span>)</span><br><span class="line">subject.<span class="title function_">next</span>(<span class="number">3</span>)</span><br><span class="line"><span class="comment">// 当complete之后的上一次的才会发给订阅者</span></span><br><span class="line">subject.<span class="title function_">complete</span>()</span><br><span class="line">subject.<span class="title function_">next</span>(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">subject.<span class="title function_">subscribe</span>(&#123;</span><br><span class="line">  <span class="attr">next</span>: <span class="function"><span class="params">v</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`observerB: <span class="subst">$&#123;v&#125;</span>`</span>),</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">subject.<span class="title function_">next</span>(<span class="number">5</span>)</span><br><span class="line">subject.<span class="title function_">complete</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Logs:</span></span><br><span class="line"><span class="comment">// observerA: 3</span></span><br><span class="line"><span class="comment">// observerB: 3</span></span><br></pre></td></tr></table></figure><h3 id="ReplaySubject"><a href="#ReplaySubject" class="headerlink" title="ReplaySubject"></a>ReplaySubject</h3><p><code>ReplaySubject</code>是被订阅的时候，可以指定缓存的数据数量, 还可以指定缓存时间</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ReplaySubject</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"><span class="comment">// 保留的次数，第二个参数还可以指定缓存时间</span></span><br><span class="line"><span class="keyword">const</span> subject = <span class="keyword">new</span> <span class="title class_">ReplaySubject</span>(<span class="number">3</span>); <span class="comment">// buffer 3 values for new subscribers</span></span><br><span class="line"></span><br><span class="line">subject.<span class="title function_">subscribe</span>(&#123;</span><br><span class="line">  <span class="attr">next</span>: <span class="function">(<span class="params">v</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`observerA: <span class="subst">$&#123;v&#125;</span>`</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">subject.<span class="title function_">next</span>(<span class="number">1</span>);</span><br><span class="line">subject.<span class="title function_">next</span>(<span class="number">2</span>);</span><br><span class="line">subject.<span class="title function_">next</span>(<span class="number">3</span>);</span><br><span class="line">subject.<span class="title function_">next</span>(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新的订阅进来之后，会将缓存的几个数据进行发送</span></span><br><span class="line">subject.<span class="title function_">subscribe</span>(&#123;</span><br><span class="line">  <span class="attr">next</span>: <span class="function">(<span class="params">v</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`observerB: <span class="subst">$&#123;v&#125;</span>`</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">subject.<span class="title function_">next</span>(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Logs:</span></span><br><span class="line"><span class="comment">// observerA: 1</span></span><br><span class="line"><span class="comment">// observerA: 2</span></span><br><span class="line"><span class="comment">// observerA: 3</span></span><br><span class="line"><span class="comment">// observerA: 4</span></span><br><span class="line"><span class="comment">// observerB: 2</span></span><br><span class="line"><span class="comment">// observerB: 3</span></span><br><span class="line"><span class="comment">// observerB: 4</span></span><br><span class="line"><span class="comment">// observerA: 5</span></span><br><span class="line"><span class="comment">// observerB: 5</span></span><br></pre></td></tr></table></figure><h3 id="BehaviorSubject"><a href="#BehaviorSubject" class="headerlink" title="BehaviorSubject"></a>BehaviorSubject</h3><p><code>BehaviorSubject</code>是被订阅的时候，会发射上一次的值，是一种特殊的<code>ReplaySubject</code>(buffer为1)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BehaviorSubject</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;rxjs&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> subject = <span class="keyword">new</span> <span class="title class_">BehaviorSubject</span>(<span class="number">0</span>); <span class="comment">// 0 is the initial value</span></span><br><span class="line"> </span><br><span class="line">subject.<span class="title function_">subscribe</span>(&#123;</span><br><span class="line">  <span class="attr">next</span>: <span class="function">(<span class="params">v</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`observerA: <span class="subst">$&#123;v&#125;</span>`</span>)</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">subject.<span class="title function_">next</span>(<span class="number">1</span>);</span><br><span class="line">subject.<span class="title function_">next</span>(<span class="number">2</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 刚订阅时，会返回上一次的消息，比如上一次是2，那么这一次也是2</span></span><br><span class="line"><span class="comment">// 重复上一次行为</span></span><br><span class="line">subject.<span class="title function_">subscribe</span>(&#123;</span><br><span class="line">  <span class="attr">next</span>: <span class="function">(<span class="params">v</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`observerB: <span class="subst">$&#123;v&#125;</span>`</span>)</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// observerA: 0</span></span><br><span class="line"><span class="comment">// observerA: 1</span></span><br><span class="line"><span class="comment">// observerA: 2</span></span><br><span class="line"><span class="comment">// observerB: 2</span></span><br></pre></td></tr></table></figure><h2 id="operators"><a href="#operators" class="headerlink" title="operators"></a>operators</h2><p><code>operators</code>算是<code>rxjs</code>中最重要的部分，也是api最多的部分了</p><h3 id="share（冷启动切换）"><a href="#share（冷启动切换）" class="headerlink" title="share（冷启动切换）"></a>share（冷启动切换）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; interval, share, take &#125; <span class="keyword">from</span> <span class="string">&quot;rxjs&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> source$ = <span class="title function_">interval</span>(<span class="number">500</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// share 可以让 clod Observable 变成一个 hot Observable</span></span><br><span class="line"><span class="keyword">const</span> hotSource$ = source$.<span class="title function_">pipe</span>(<span class="title function_">share</span>(), <span class="title function_">take</span>(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  hotSource$.<span class="title function_">subscribe</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Observable 第二次訂閱: <span class="subst">$&#123;data&#125;</span>`</span>))</span><br><span class="line">&#125;, <span class="number">2000</span>)</span><br><span class="line"></span><br><span class="line">hotSource$.<span class="title function_">subscribe</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Observable 第一次訂閱: <span class="subst">$&#123;data&#125;</span>`</span>))</span><br><span class="line"><span class="comment">// Observable 第一次訂閱: 0</span></span><br><span class="line"><span class="comment">// Observable 第一次訂閱: 1</span></span><br><span class="line"><span class="comment">// Observable 第一次訂閱: 2</span></span><br><span class="line"><span class="comment">// Observable 第一次訂閱: 3</span></span><br><span class="line"><span class="comment">// Observable 第二次訂閱: 3</span></span><br><span class="line"><span class="comment">// Observable 第一次訂閱: 4</span></span><br><span class="line"><span class="comment">// Observable 第二次訂閱: 4</span></span><br><span class="line"><span class="comment">// Observable 第一次訂閱: 5</span></span><br><span class="line"><span class="comment">// Observable 第二次訂閱: 5</span></span><br><span class="line"><span class="comment">// Observable 第一次訂閱: 6</span></span><br><span class="line"><span class="comment">// Observable 第二次訂閱: 6</span></span><br><span class="line"><span class="comment">// Observable 第一次訂閱: 7</span></span><br><span class="line"><span class="comment">// Observable 第二次訂閱: 7</span></span><br><span class="line"><span class="comment">// Observable 第一次訂閱: 8</span></span><br><span class="line"><span class="comment">// Observable 第二次訂閱: 8</span></span><br><span class="line"><span class="comment">// Observable 第一次訂閱: 9</span></span><br><span class="line"><span class="comment">// Observable 第二次訂閱: 9</span></span><br><span class="line"><span class="comment">// Observable 第二次訂閱: 10</span></span><br><span class="line"><span class="comment">// Observable 第二次訂閱: 11</span></span><br><span class="line"><span class="comment">// Observable 第二次訂閱: 12</span></span><br></pre></td></tr></table></figure><h3 id="shareReplay"><a href="#shareReplay" class="headerlink" title="shareReplay"></a>shareReplay</h3><p><code>shareReplay</code>与<code>share</code>相似，不同的是，<code>shareReplay</code>会缓存更多，而share只会缓存最新的数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; interval, shareReplay, take &#125; <span class="keyword">from</span> <span class="string">&quot;rxjs&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// shareReplay(2)还可以指定只缓存两个数据</span></span><br><span class="line"><span class="keyword">const</span> source$ = <span class="title function_">interval</span>(<span class="number">1000</span>).<span class="title function_">pipe</span>(<span class="title function_">shareReplay</span>(), <span class="title function_">take</span>(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line">source$.<span class="title function_">subscribe</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`shareReplay 第一次订阅: <span class="subst">$&#123;data&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  source$.<span class="title function_">subscribe</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`shareReplay 第二次订阅: <span class="subst">$&#123;data&#125;</span>`</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;, <span class="number">5000</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="组合型operators"><a href="#组合型operators" class="headerlink" title="组合型operators"></a>组合型operators</h2><h3 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h3><p>将多个 Observables 进行组合，顺序执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// concat 可以將數個 Observables 組合成一個新的 Observable，並且在每個 Observable 結束後才接續執行下一個 Observable</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; concat, interval, map, range, take &#125; <span class="keyword">from</span> <span class="string">&quot;rxjs&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">concat</span>(</span><br><span class="line">  <span class="title function_">interval</span>(<span class="number">1000</span>).<span class="title function_">pipe</span>(</span><br><span class="line">    <span class="title function_">map</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="string">`A<span class="subst">$&#123;data&#125;</span>`</span>),</span><br><span class="line">    <span class="title function_">take</span>(<span class="number">3</span>),</span><br><span class="line">  ),</span><br><span class="line">  <span class="title function_">interval</span>(<span class="number">1000</span>).<span class="title function_">pipe</span>(</span><br><span class="line">    <span class="title function_">map</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="string">`B<span class="subst">$&#123;data&#125;</span>`</span>),</span><br><span class="line">    <span class="title function_">take</span>(<span class="number">3</span>),</span><br><span class="line">  ),</span><br><span class="line">  <span class="title function_">interval</span>(<span class="number">1000</span>).<span class="title function_">pipe</span>(</span><br><span class="line">    <span class="title function_">map</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="string">`C<span class="subst">$&#123;data&#125;</span>`</span>),</span><br><span class="line">    <span class="title function_">take</span>(<span class="number">3</span>),</span><br><span class="line">  ),</span><br><span class="line">).<span class="title function_">subscribe</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// A0</span></span><br><span class="line"><span class="comment">// A1</span></span><br><span class="line"><span class="comment">// A2</span></span><br><span class="line"><span class="comment">// B0</span></span><br><span class="line"><span class="comment">// B1</span></span><br><span class="line"><span class="comment">// B2</span></span><br><span class="line"><span class="comment">// C0</span></span><br><span class="line"><span class="comment">// C1</span></span><br><span class="line"><span class="comment">// C2</span></span><br></pre></td></tr></table></figure><h3 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h3><p><code>merge</code>与<code>concat</code>类似, 但是后者是顺序执行，merge会三个同时执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; interval, map, merge, take &#125; <span class="keyword">from</span> <span class="string">&quot;rxjs&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sourceA$ = <span class="title function_">interval</span>(<span class="number">1000</span>).<span class="title function_">pipe</span>(</span><br><span class="line">  <span class="title function_">map</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="string">`A<span class="subst">$&#123;data&#125;</span>`</span>),</span><br><span class="line">  <span class="title function_">take</span>(<span class="number">3</span>),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sourceB$ = <span class="title function_">interval</span>(<span class="number">1000</span>).<span class="title function_">pipe</span>(</span><br><span class="line">  <span class="title function_">map</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="string">`B<span class="subst">$&#123;data&#125;</span>`</span>),</span><br><span class="line">  <span class="title function_">take</span>(<span class="number">3</span>),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sourceC$ = <span class="title function_">interval</span>(<span class="number">1000</span>).<span class="title function_">pipe</span>(</span><br><span class="line">  <span class="title function_">map</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="string">`C<span class="subst">$&#123;data&#125;</span>`</span>),</span><br><span class="line">  <span class="title function_">take</span>(<span class="number">3</span>),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 三个obervable 会一起执行,执行结果都会传到subscribe</span></span><br><span class="line"><span class="title function_">merge</span>(sourceA$, sourceB$, sourceC$).<span class="title function_">subscribe</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`merge ： <span class="subst">$&#123;data&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// merge ： A0</span></span><br><span class="line"><span class="comment">// merge ： B0</span></span><br><span class="line"><span class="comment">// merge ： C0</span></span><br><span class="line"><span class="comment">// merge ： A1</span></span><br><span class="line"><span class="comment">// merge ： B1</span></span><br><span class="line"><span class="comment">// merge ： C1</span></span><br><span class="line"><span class="comment">// merge ： A2</span></span><br><span class="line"><span class="comment">// merge ： B2</span></span><br><span class="line"><span class="comment">// merge ： C2</span></span><br></pre></td></tr></table></figure><h3 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h3><p><code>zip</code>有拉链的意思，就是将一组拼在一起返回</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; interval, map, zip &#125; <span class="keyword">from</span> <span class="string">&quot;rxjs&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sourceA$ = <span class="title function_">interval</span>(<span class="number">1000</span>).<span class="title function_">pipe</span>(<span class="title function_">map</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="string">`A<span class="subst">$&#123;data + <span class="number">1</span>&#125;</span>`</span>))</span><br><span class="line"><span class="keyword">const</span> sourceB$ = <span class="title function_">interval</span>(<span class="number">2000</span>).<span class="title function_">pipe</span>(<span class="title function_">map</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="string">`B<span class="subst">$&#123;data + <span class="number">1</span>&#125;</span>`</span>))</span><br><span class="line"><span class="keyword">const</span> sourceC$ = <span class="title function_">interval</span>(<span class="number">3000</span>).<span class="title function_">pipe</span>(<span class="title function_">map</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="string">`C<span class="subst">$&#123;data + <span class="number">1</span>&#125;</span>`</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也是一起执行，但是会等待最慢的一个，只有每一个都有值了，才会调用一次subscribe</span></span><br><span class="line"><span class="title function_">zip</span>(sourceA$, sourceB$, sourceC$).<span class="title function_">subscribe</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`zip : <span class="subst">$&#123;data&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// zip : [A1, B1, C1]</span></span><br><span class="line"><span class="comment">// zip : [A2, B2, C2]</span></span><br><span class="line"><span class="comment">// zip : [A3, B3, C3]</span></span><br></pre></td></tr></table></figure><h3 id="combineLatest"><a href="#combineLatest" class="headerlink" title="combineLatest"></a>combineLatest</h3><p><code>combineLatest</code>与<code>zip</code>有一些相似，但是字面意思 <code>组合最后一个</code></p><p>也就是说，只有第一次会等待所有，后面只有任意一个发出值，就会触发订阅，值都是Observable当前的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; combineLatest, interval, take &#125; <span class="keyword">from</span> <span class="string">&quot;rxjs&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 联合多个 Observable</span></span><br><span class="line"><span class="comment">// 当所有的 Observable 发出值后，才会开始显示（显示的是每个 Observable 当前的值）</span></span><br><span class="line"><span class="comment">// 每一个 Observable 有值了都会触发，取当前所有 Observable 的最新值</span></span><br><span class="line"><span class="title function_">combineLatest</span>([<span class="title function_">interval</span>(<span class="number">1000</span>), <span class="title function_">interval</span>(<span class="number">2000</span>), <span class="title function_">interval</span>(<span class="number">3000</span>)])</span><br><span class="line">  .<span class="title function_">pipe</span>(<span class="title function_">take</span>(<span class="number">10</span>))</span><br><span class="line">  .<span class="title function_">subscribe</span>(<span class="function"><span class="params">all</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(all))</span><br><span class="line"><span class="comment">// [ 1, 0, 0 ]</span></span><br><span class="line"><span class="comment">// [ 2, 0, 0 ]</span></span><br><span class="line"><span class="comment">// [ 2, 1, 0 ]</span></span><br><span class="line"><span class="comment">// [ 3, 1, 0 ]</span></span><br><span class="line"><span class="comment">// [ 4, 1, 0 ]</span></span><br><span class="line"><span class="comment">// [ 4, 1, 1 ]</span></span><br><span class="line"><span class="comment">// [ 4, 2, 1 ]</span></span><br><span class="line"><span class="comment">// [ 5, 2, 1 ]</span></span><br><span class="line"><span class="comment">// [ 6, 2, 1 ]</span></span><br><span class="line"><span class="comment">// [ 6, 3, 1 ]</span></span><br></pre></td></tr></table></figure><h2 id="拆分型operators"><a href="#拆分型operators" class="headerlink" title="拆分型operators"></a>拆分型operators</h2><h3 id="partition"><a href="#partition" class="headerlink" title="partition"></a>partition</h3><p><code>partition</code>有分割的意思，意思是将一个<code>Observable</code>根据条件拆分为多个</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="keyword">of</span>, partition &#125; <span class="keyword">from</span> <span class="string">&quot;rxjs&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> source$ = <span class="title function_">of</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// artition 則是將 Observable 依照規則拆成兩條 Observable。partition 需要兩個參數</span></span><br><span class="line"><span class="comment">// 第一个参数是数据源，第二个参数是判断条件</span></span><br><span class="line"><span class="comment">// 返回的第一个oberservable 就是返回true的，第二个是返回false的</span></span><br><span class="line"><span class="keyword">const</span> [sourceEven$, sourceOdd$] = <span class="title function_">partition</span>(source$, <span class="function"><span class="params">data</span> =&gt;</span> data % <span class="number">2</span> === <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">sourceEven$.<span class="title function_">subscribe</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`partition (偶數): <span class="subst">$&#123;data&#125;</span>`</span>))</span><br><span class="line">sourceOdd$.<span class="title function_">subscribe</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`partition (奇數): <span class="subst">$&#123;data&#125;</span>`</span>))</span><br><span class="line"><span class="comment">// partition (偶數): 2</span></span><br><span class="line"><span class="comment">// partition (偶數): 4</span></span><br><span class="line"><span class="comment">// partition (偶數): 6</span></span><br><span class="line"><span class="comment">// partition (奇數): 1</span></span><br><span class="line"><span class="comment">// partition (奇數): 3</span></span><br><span class="line"><span class="comment">// partition (奇數): 5</span></span><br></pre></td></tr></table></figure><h2 id="类Promise"><a href="#类Promise" class="headerlink" title="类Promise"></a>类Promise</h2><h3 id="forkJoin-类似Promise-all"><a href="#forkJoin-类似Promise-all" class="headerlink" title="forkJoin(类似Promise.all)"></a>forkJoin(类似Promise.all)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; forkJoin &#125; <span class="keyword">from</span> <span class="string">&quot;rxjs&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sleep</span>(<span class="params">val</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(val)</span><br><span class="line">    &#125;, val),</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 与promise.all类似，但是可以指定并发数量</span></span><br><span class="line"><span class="title function_">forkJoin</span>([<span class="title function_">sleep</span>(<span class="number">1000</span>), <span class="title function_">sleep</span>(<span class="number">2000</span>)]).<span class="title function_">subscribe</span>(&#123;</span><br><span class="line">  <span class="attr">next</span>: <span class="function"><span class="params">val</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(val),</span><br><span class="line">  <span class="attr">complete</span>: <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;end&quot;</span>),</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// [ 1000, 2000 ]</span></span><br><span class="line"><span class="comment">// end</span></span><br></pre></td></tr></table></figure><h3 id="race-类似Promise-race"><a href="#race-类似Promise-race" class="headerlink" title="race(类似Promise.race)"></a>race(类似Promise.race)</h3><p>多个数据源，优先使用最先到达的，然后退订其它源</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; interval, map, race &#125; <span class="keyword">from</span> <span class="string">&quot;rxjs&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sourceA$ = <span class="title function_">interval</span>(<span class="number">1000</span>).<span class="title function_">pipe</span>(<span class="title function_">map</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="string">`A<span class="subst">$&#123;data + <span class="number">1</span>&#125;</span>`</span>))</span><br><span class="line"><span class="keyword">const</span> sourceB$ = <span class="title function_">interval</span>(<span class="number">2000</span>).<span class="title function_">pipe</span>(<span class="title function_">map</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="string">`B<span class="subst">$&#123;data + <span class="number">1</span>&#125;</span>`</span>))</span><br><span class="line"><span class="keyword">const</span> sourceC$ = <span class="title function_">interval</span>(<span class="number">3000</span>).<span class="title function_">pipe</span>(<span class="title function_">map</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="string">`C<span class="subst">$&#123;data + <span class="number">1</span>&#125;</span>`</span>))</span><br><span class="line"></span><br><span class="line"><span class="title function_">race</span>([sourceA$, sourceB$, sourceC$]).<span class="title function_">subscribe</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`race : <span class="subst">$&#123;data&#125;</span>`</span>))</span><br><span class="line"><span class="comment">// race : A1</span></span><br><span class="line"><span class="comment">// race : A2</span></span><br><span class="line"><span class="comment">// race : A3</span></span><br><span class="line"><span class="comment">// ... (因為 sourceA$ 已經先到了，其他 Observables 就退訂不處理</span></span><br></pre></td></tr></table></figure><h2 id="转化型operators"><a href="#转化型operators" class="headerlink" title="转化型operators"></a>转化型operators</h2><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p>前面已经用到过了，见名知意</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sourceA$ = <span class="title function_">interval</span>(<span class="number">1000</span>).<span class="title function_">pipe</span>(<span class="title function_">map</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="string">`A<span class="subst">$&#123;data + <span class="number">1</span>&#125;</span>`</span>))</span><br></pre></td></tr></table></figure><h3 id="scan-类似reduce"><a href="#scan-类似reduce" class="headerlink" title="scan(类似reduce)"></a>scan(类似reduce)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; interval, <span class="keyword">of</span>, scan &#125; <span class="keyword">from</span> <span class="string">&quot;rxjs&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 和 reduce 差不多，异步reduce</span></span><br><span class="line"><span class="title function_">interval</span>(<span class="number">500</span>)</span><br><span class="line">  .<span class="title function_">pipe</span>(</span><br><span class="line">    <span class="title function_">scan</span>(</span><br><span class="line">      <span class="function">(<span class="params">pre, value</span>) =&gt;</span> pre + value, <span class="comment">// 累加函數</span></span><br><span class="line">      <span class="number">0</span>, <span class="comment">// 初始值</span></span><br><span class="line">    ),</span><br><span class="line">  )</span><br><span class="line">  .<span class="title function_">subscribe</span>(<span class="function"><span class="params">amount</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`目前 donate 金额累计: <span class="subst">$&#123;amount&#125;</span>`</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="comment">// 目前 donate 金额累计: 100</span></span><br><span class="line"><span class="comment">// 目前 donate 金额累计: 600</span></span><br><span class="line"><span class="comment">// 目前 donate 金额累计: 900</span></span><br><span class="line"><span class="comment">// 目前 donate 金额累计: 1150</span></span><br></pre></td></tr></table></figure><h3 id="pairwise"><a href="#pairwise" class="headerlink" title="pairwise"></a>pairwise</h3><p><code>pairwise</code>会把数据两个两个组合起来，中文<code>成对的</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 会经过两秒才会发出第一个值</span></span><br><span class="line"><span class="title function_">interval</span>(<span class="number">1000</span>)</span><br><span class="line">  .<span class="title function_">pipe</span>(<span class="title function_">pairwise</span>())</span><br><span class="line">  .<span class="title function_">subscribe</span>(<span class="function"><span class="params">pair</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(pair)</span><br><span class="line">  &#125;) <span class="comment">// pair[1] - pair[0]</span></span><br><span class="line"><span class="comment">// [ 0, 1 ]</span></span><br><span class="line"><span class="comment">// [ 1, 2 ]</span></span><br><span class="line"><span class="comment">// [ 2, 3 ]</span></span><br><span class="line"><span class="comment">// [ 3, 4 ]</span></span><br><span class="line"><span class="comment">// [ 4, 5 ]</span></span><br><span class="line"><span class="comment">// [ 5, 6 ]</span></span><br></pre></td></tr></table></figure><h3 id="concatMap"><a href="#concatMap" class="headerlink" title="concatMap"></a>concatMap</h3><p><code>concatMap</code>顾名思义，联合了<code>concat</code>与<code>map</code>，第一个发出通知后，第二个根据获取的数据进行map后送到订阅者，是有顺序的，连续的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; concatMap, interval, map, take, timer &#125; <span class="keyword">from</span> <span class="string">&quot;rxjs&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一个observable发出值后，第二个observable开始发出值</span></span><br><span class="line"><span class="comment">// 第二个observable发出值后，等待第一个observable，然后循环</span></span><br><span class="line"><span class="title function_">interval</span>(<span class="number">5000</span>)</span><br><span class="line">  .<span class="title function_">pipe</span>(</span><br><span class="line">    <span class="title function_">concatMap</span>(<span class="function">(<span class="params">val</span>) =&gt;</span></span><br><span class="line">      <span class="title function_">timer</span>(<span class="number">0</span>, <span class="number">1000</span>).<span class="title function_">pipe</span>(</span><br><span class="line">        <span class="title function_">take</span>(<span class="number">3</span>),</span><br><span class="line">        <span class="title function_">map</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="string">`A: <span class="subst">$&#123;val&#125;</span>, B: <span class="subst">$&#123;data&#125;</span>`</span>),</span><br><span class="line">      ),</span><br><span class="line">    ),</span><br><span class="line">  )</span><br><span class="line">  .<span class="title function_">subscribe</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="attr">B</span>: <span class="number">0</span></span><br><span class="line"><span class="comment">// B: 1</span></span><br><span class="line"><span class="comment">// B: 2</span></span><br><span class="line"><span class="comment">// B: 0</span></span><br><span class="line"><span class="comment">// B: 1</span></span><br><span class="line"><span class="comment">// B: 2</span></span><br><span class="line"><span class="comment">// B: 0</span></span><br><span class="line"><span class="comment">// B: 1</span></span><br><span class="line"><span class="comment">// B: 2</span></span><br><span class="line"><span class="comment">// B: 0</span></span><br></pre></td></tr></table></figure><h3 id="switchMap"><a href="#switchMap" class="headerlink" title="switchMap"></a>switchMap</h3><p><code>switchMap</code>会中断之前的流，之前的流不会继续运行，每个都是连续的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; interval, switchMap &#125; <span class="keyword">from</span> <span class="string">&quot;rxjs&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> inner = <span class="title function_">interval</span>(<span class="number">300</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sleep</span>(<span class="params">val</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> inner</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> source = <span class="title function_">interval</span>(<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 外部 Observable(source) 发出值后，会重启内部的Observable（sleep, inner）</span></span><br><span class="line">source</span><br><span class="line">  .<span class="title function_">pipe</span>(<span class="title function_">switchMap</span>(sleep))</span><br><span class="line">  .<span class="title function_">subscribe</span>(<span class="function"><span class="params">val</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(val))</span><br></pre></td></tr></table></figure><h3 id="mergeMap"><a href="#mergeMap" class="headerlink" title="mergeMap"></a>mergeMap</h3><p><code>mergeMap</code>会将两个进行并发执行，效率最高，但是就不能保证顺序了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="keyword">from</span>, map, mergeMap &#125; <span class="keyword">from</span> <span class="string">&quot;rxjs&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sleep</span>(<span class="params">val</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;🚀 ~ file: mergeMap.js ~ line 4 ~ sleep ~ val&quot;</span>, val)</span><br><span class="line">  <span class="keyword">const</span> time = <span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">5000</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(val)</span><br><span class="line">    &#125;, time),</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将第一个Observable的传入返回一个Observable的函数，进行合并</span></span><br><span class="line"><span class="comment">// 第二个参数可以设置并发数量</span></span><br><span class="line"><span class="title function_">from</span>(<span class="title class_">Array</span>.<span class="title function_">from</span>(&#123; <span class="attr">length</span>: <span class="number">100</span> &#125;).<span class="title function_">map</span>(<span class="function">(<span class="params">_, index</span>) =&gt;</span> <span class="string">`A: <span class="subst">$&#123;index&#125;</span>`</span>))</span><br><span class="line">  .<span class="title function_">pipe</span>(</span><br><span class="line">    <span class="title function_">mergeMap</span>(sleep, <span class="number">2</span>),</span><br><span class="line">    <span class="title function_">map</span>(<span class="function"><span class="params">val</span> =&gt;</span> <span class="string">`B: <span class="subst">$&#123;val&#125;</span>`</span>),</span><br><span class="line">  )</span><br><span class="line">  .<span class="title function_">subscribe</span>(<span class="function"><span class="params">val</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ding&quot;</span>, val))</span><br></pre></td></tr></table></figure><h3 id="exhaustMap"><a href="#exhaustMap" class="headerlink" title="exhaustMap"></a>exhaustMap</h3><p><code>exhaustMap</code>有力竭，用尽，用完的意思</p><p>可以把它理解成，來源 Observable 有新事件發生時，它是沒有力氣產生新的 Observable 的,也就是说当來源事件發生時，如果上一次转化的 Observable 尚未結束，就不會产生新的 Observable</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; exhaustMap, interval, take &#125; <span class="keyword">from</span> <span class="string">&quot;rxjs&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 内部的observable发出值后，外部的observable会进行等待（concatMap不会进行等待，会一直运行）</span></span><br><span class="line"><span class="title function_">interval</span>(<span class="number">2000</span>)</span><br><span class="line">  .<span class="title function_">pipe</span>(<span class="title function_">exhaustMap</span>(<span class="function"><span class="params">x</span> =&gt;</span> <span class="title function_">interval</span>(<span class="number">1000</span>).<span class="title function_">pipe</span>(<span class="title function_">take</span>(<span class="number">3</span>))))</span><br><span class="line">  .<span class="title function_">subscribe</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="几个map总结"><a href="#几个map总结" class="headerlink" title="几个map总结"></a>几个map总结</h3><ul><li>switchMap：「切換」的概念，退訂閱上次未完成的資料流，訂閱新的資料流；若有新事件時過去的資料就不重要了，可以使用此 operator。</li><li>mergeMap：上次資料流若未完成，不會退訂閱，且繼續訂閱新的資料流；若資料流順序相對不重要，可以使用此 operator，整體效率會比較快。</li><li>concatMap：持續等到上次資料流完成，才繼續訂閱新的資料流；若執行順序非常重要，可以使用此 opereator；不過要注意每次轉換的 Observable 都需要有完成，否則永遠不會進入下一個 Observable。</li><li>exhaustMap：若上次資料流未完成，則忽略訂閱這次的資料流；若希望避免產生太多資料流，可以考慮使用此 operator。</li></ul><h3 id="switchAll-mergeAll-concatAll-combineAll"><a href="#switchAll-mergeAll-concatAll-combineAll" class="headerlink" title="switchAll, mergeAll, concatAll, combineAll"></a>switchAll, mergeAll, concatAll, combineAll</h3><p><code>switchAll</code>与<code>switchMap</code>的区别在于，前者直接传一个 observable, 后者通过一个callback传入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; interval, map, <span class="keyword">of</span>, switchAll, take &#125; <span class="keyword">from</span> <span class="string">&quot;rxjs&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> source = <span class="title function_">interval</span>(<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// switchAll只能接受一个observable，所以需要用of包裹一下</span></span><br><span class="line"><span class="comment">// switchAll与switchMap的区别就在于，switchAll接受的是一个observable，而switchMap接受的是一个observable内的值</span></span><br><span class="line">source</span><br><span class="line">  .<span class="title function_">pipe</span>(</span><br><span class="line">    <span class="title function_">map</span>(<span class="function">() =&gt;</span> <span class="title function_">interval</span>(<span class="number">300</span>).<span class="title function_">pipe</span>(<span class="title function_">take</span>(<span class="number">3</span>))),</span><br><span class="line">    <span class="title function_">switchAll</span>(),</span><br><span class="line">  )</span><br><span class="line">  .<span class="title function_">subscribe</span>(<span class="function"><span class="params">val</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(val))</span><br></pre></td></tr></table></figure><h2 id="过滤型operators"><a href="#过滤型operators" class="headerlink" title="过滤型operators"></a>过滤型operators</h2><h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> source$ = <span class="title function_">timer</span>(<span class="number">0</span>, <span class="number">1000</span>).<span class="title function_">pipe</span>(<span class="title function_">take</span>(<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line">source$.<span class="title function_">pipe</span>(</span><br><span class="line">  <span class="title function_">filter</span>(<span class="function"><span class="params">data</span> =&gt;</span> data &gt; <span class="number">3</span>)</span><br><span class="line">)</span><br><span class="line">.<span class="title function_">subscribe</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`filter 範例 (1): <span class="subst">$&#123;data&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// filter 範例 (1): 4</span></span><br><span class="line"><span class="comment">// filter 範例 (1): 5</span></span><br><span class="line"><span class="comment">// filter 範例 (1): 6</span></span><br><span class="line"><span class="comment">// filter 範例 (1): 7</span></span><br><span class="line"><span class="comment">// filter 範例 (1): 8</span></span><br><span class="line"><span class="comment">// filter 範例 (1): 9</span></span><br></pre></td></tr></table></figure><h3 id="first"><a href="#first" class="headerlink" title="first"></a>first</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> source$ = <span class="title function_">timer</span>(<span class="number">0</span>, <span class="number">1000</span>).<span class="title function_">pipe</span>(<span class="title function_">take</span>(<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line">source$.<span class="title function_">pipe</span>(</span><br><span class="line">  <span class="title function_">first</span>()</span><br><span class="line">)</span><br><span class="line">.<span class="title function_">subscribe</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`filter (1): <span class="subst">$&#123;data&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// filter (1): 0</span></span><br></pre></td></tr></table></figure><h3 id="last"><a href="#last" class="headerlink" title="last"></a>last</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> source$ = <span class="title function_">timer</span>(<span class="number">0</span>, <span class="number">1000</span>).<span class="title function_">pipe</span>(<span class="title function_">take</span>(<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line">source$.<span class="title function_">pipe</span>(</span><br><span class="line">  <span class="title function_">last</span>()</span><br><span class="line">)</span><br><span class="line">.<span class="title function_">subscribe</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`last 範例 (1): <span class="subst">$&#123;data&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// last 範例 (1): 9</span></span><br></pre></td></tr></table></figure><h3 id="single"><a href="#single" class="headerlink" title="single"></a>single</h3><p>single 比較特殊，它可以幫助我們「限制」整個資料流只會有一次事件發生，當發生第二次事件時，就會發生錯誤</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">timer</span>(<span class="number">0</span>, <span class="number">1000</span>).<span class="title function_">pipe</span>(</span><br><span class="line">  <span class="title function_">take</span>(<span class="number">10</span>),</span><br><span class="line">  <span class="title function_">single</span>()</span><br><span class="line">)</span><br><span class="line">.<span class="title function_">subscribe</span>(&#123;</span><br><span class="line">  <span class="attr">next</span>: <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`single 範例 (1): <span class="subst">$&#123;data&#125;</span>`</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">error</span>: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`single 發生錯誤範例 (1): <span class="subst">$&#123;err&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// single 發生錯誤範例 (1): Sequence contains more than one element</span></span><br></pre></td></tr></table></figure><h3 id="take"><a href="#take" class="headerlink" title="take"></a>take</h3><p><code>take</code>用的很多了，可以限制事件源的数量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">timer</span>(<span class="number">0</span>, <span class="number">1000</span>).<span class="title function_">pipe</span>(</span><br><span class="line">  <span class="title function_">take</span>(<span class="number">6</span>)</span><br><span class="line">).<span class="title function_">subscribe</span>(&#123;</span><br><span class="line">  <span class="attr">next</span>: <span class="function"><span class="params">data</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`take : <span class="subst">$&#123;data&#125;</span>`</span>),</span><br><span class="line">  <span class="attr">complete</span>: <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`take 結束`</span>),</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// take : 0</span></span><br><span class="line"><span class="comment">// take : 1</span></span><br><span class="line"><span class="comment">// take : 2</span></span><br><span class="line"><span class="comment">// take : 3</span></span><br><span class="line"><span class="comment">// take : 4</span></span><br><span class="line"><span class="comment">// take : 5</span></span><br><span class="line"><span class="comment">// take 結束</span></span><br></pre></td></tr></table></figure><h3 id="takeLast"><a href="#takeLast" class="headerlink" title="takeLast"></a>takeLast</h3><p>获取最后几个，所以会等待数据全部发射完成</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">range</span>(<span class="number">1</span>, <span class="number">5</span>).<span class="title function_">pipe</span>(</span><br><span class="line">  <span class="title function_">takeLast</span>(<span class="number">3</span>)</span><br><span class="line">).<span class="title function_">subscribe</span>(</span><br><span class="line">  <span class="function"><span class="params">data</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`takeLast: <span class="subst">$&#123;data&#125;</span>`</span>)</span><br><span class="line">);</span><br><span class="line"><span class="comment">// takeLast: 3</span></span><br><span class="line"><span class="comment">// takeLast: 4</span></span><br><span class="line"><span class="comment">// takeLast: 5</span></span><br></pre></td></tr></table></figure><h3 id="takeUntil"><a href="#takeUntil" class="headerlink" title="takeUntil"></a>takeUntil</h3><p>takeUntil 會持续触发來源 Observable 的事件值，直到 (until) 指定的另外一個 Observable 发生新事件，才會結束</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; interval, map, takeUntil, timer &#125; <span class="keyword">from</span> <span class="string">&quot;rxjs&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> click$ = <span class="title function_">timer</span>(<span class="number">4000</span>)</span><br><span class="line"><span class="keyword">const</span> source$ = <span class="title function_">interval</span>(<span class="number">1000</span>).<span class="title function_">pipe</span>(<span class="title function_">map</span>(<span class="function"><span class="params">data</span> =&gt;</span> data + <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// takeUntil 会直到 click$ 发出值为止</span></span><br><span class="line">source$.<span class="title function_">pipe</span>(<span class="title function_">takeUntil</span>(click$)).<span class="title function_">subscribe</span>(&#123;</span><br><span class="line">  <span class="attr">next</span>: <span class="function"><span class="params">data</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`takeUntil 示範: <span class="subst">$&#123;data&#125;</span>`</span>),</span><br><span class="line">  <span class="attr">complete</span>: <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;takeUntil 結束&quot;</span>),</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="takeWhile"><a href="#takeWhile" class="headerlink" title="takeWhile"></a>takeWhile</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; interval, map, takeWhile &#125; <span class="keyword">from</span> <span class="string">&quot;rxjs&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以判斷資料是否符合條件，只要資料符合條件，事件就會持續發生，當資料不符合條件，目前的 Observable 就會結束</span></span><br><span class="line"><span class="keyword">const</span> source$ = <span class="title function_">interval</span>(<span class="number">1000</span>).<span class="title function_">pipe</span>(<span class="title function_">map</span>(<span class="function"><span class="params">data</span> =&gt;</span> data + <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">source$.<span class="title function_">pipe</span>(<span class="title function_">takeWhile</span>(<span class="function"><span class="params">data</span> =&gt;</span> data &lt; <span class="number">5</span>)).<span class="title function_">subscribe</span>(&#123;</span><br><span class="line">  <span class="attr">next</span>: <span class="function"><span class="params">data</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`takeWhile 示範 (1): <span class="subst">$&#123;data&#125;</span>`</span>),</span><br><span class="line">  <span class="attr">complete</span>: <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;takeWhile 結束 (1)&quot;</span>),</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="skip-同理有-skipLast-skipUtil-skipWhile"><a href="#skip-同理有-skipLast-skipUtil-skipWhile" class="headerlink" title="skip(同理有 skipLast skipUtil skipWhile)"></a>skip(同理有 skipLast skipUtil skipWhile)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">interval</span>(<span class="number">1000</span>).<span class="title function_">pipe</span>(</span><br><span class="line">  <span class="title function_">skip</span>(<span class="number">3</span>)</span><br><span class="line">).<span class="title function_">subscribe</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`skip: <span class="subst">$&#123;data&#125;</span>`</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// skip: 3</span></span><br><span class="line"><span class="comment">// skip: 4</span></span><br><span class="line"><span class="comment">// skip: 5</span></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><h3 id="distinct"><a href="#distinct" class="headerlink" title="distinct"></a>distinct</h3><p>主要用于过滤重复的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="keyword">from</span>, distinct, <span class="title class_">Subject</span> &#125; <span class="keyword">from</span> <span class="string">&quot;rxjs&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// distinct过滤所有的重复值</span></span><br><span class="line"><span class="title function_">from</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line">  .<span class="title function_">pipe</span>(<span class="title function_">distinct</span>())</span><br><span class="line">  .<span class="title function_">subscribe</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`distinct 示範 (1): <span class="subst">$&#123;data&#125;</span>`</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果通过 == 无法判断两个是否相同，我们可以传入一个函数来判断</span></span><br><span class="line"><span class="keyword">const</span> students = [</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">score</span>: <span class="number">70</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">score</span>: <span class="number">80</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">score</span>: <span class="number">90</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">score</span>: <span class="number">100</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">score</span>: <span class="number">100</span> &#125;,</span><br><span class="line">]</span><br><span class="line"><span class="title function_">from</span>(students)</span><br><span class="line">  .<span class="title function_">pipe</span>(<span class="title function_">distinct</span>(<span class="function"><span class="params">student</span> =&gt;</span> student.<span class="property">id</span>))</span><br><span class="line">  .<span class="title function_">subscribe</span>(<span class="function"><span class="params">student</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`distinct 示範 (2): <span class="subst">$&#123;student.id&#125;</span> - <span class="subst">$&#123;student.score&#125;</span>`</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 还可以手动清除缓存</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// distinct 內部會記錄所有發生過的事件值，我們也可以透過再多傳入一個 Observable 的方式(參數名稱為 flushes)來幫助我們判斷何時要清空紀錄事件值的內容</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> source$ = <span class="keyword">new</span> <span class="title class_">Subject</span>()</span><br><span class="line"><span class="keyword">const</span> sourceFlushes$ = <span class="keyword">new</span> <span class="title class_">Subject</span>()</span><br><span class="line">source$.<span class="title function_">pipe</span>(<span class="title function_">distinct</span>(<span class="function"><span class="params">student</span> =&gt;</span> student.<span class="property">id</span>, sourceFlushes$)).<span class="title function_">subscribe</span>(<span class="function"><span class="params">student</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`distinct 示範 (3): <span class="subst">$&#123;student.id&#125;</span> - <span class="subst">$&#123;student.score&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> source$.<span class="title function_">next</span>(&#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">score</span>: <span class="number">70</span> &#125;), <span class="number">1000</span>)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> source$.<span class="title function_">next</span>(&#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">score</span>: <span class="number">80</span> &#125;), <span class="number">2000</span>)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> source$.<span class="title function_">next</span>(&#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">score</span>: <span class="number">90</span> &#125;), <span class="number">3000</span>)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> source$.<span class="title function_">next</span>(&#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">score</span>: <span class="number">100</span> &#125;), <span class="number">4000</span>)</span><br><span class="line"><span class="comment">// 在這裡清掉 Observable distinct 內記錄資料重複的物件</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> sourceFlushes$.<span class="title function_">next</span>(), <span class="number">4500</span>)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> source$.<span class="title function_">next</span>(&#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">score</span>: <span class="number">100</span> &#125;), <span class="number">5000</span>)</span><br></pre></td></tr></table></figure><h3 id="distinctUntilChanged"><a href="#distinctUntilChanged" class="headerlink" title="distinctUntilChanged"></a>distinctUntilChanged</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="keyword">from</span>, distinctUntilChanged &#125; <span class="keyword">from</span> <span class="string">&quot;rxjs&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// distinctUntilChanged只判断与上一次是否重复</span></span><br><span class="line"><span class="title function_">from</span>([<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>])</span><br><span class="line">  .<span class="title function_">pipe</span>(<span class="title function_">distinctUntilChanged</span>())</span><br><span class="line">  .<span class="title function_">subscribe</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`distinctUntilChanged (1): <span class="subst">$&#123;data&#125;</span>`</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="comment">// distinctUntilChanged (1): 1</span></span><br><span class="line"><span class="comment">// distinctUntilChanged (1): 2</span></span><br><span class="line"><span class="comment">// distinctUntilChanged (1): 3</span></span><br><span class="line"><span class="comment">// distinctUntilChanged (1): 1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="distinctUntilKeyChanged"><a href="#distinctUntilKeyChanged" class="headerlink" title="distinctUntilKeyChanged"></a>distinctUntilKeyChanged</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="keyword">from</span>, distinctUntilKeyChanged &#125; <span class="keyword">from</span> <span class="string">&quot;rxjs&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> students = [</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">score</span>: <span class="number">70</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">score</span>: <span class="number">80</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">score</span>: <span class="number">90</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">score</span>: <span class="number">100</span> &#125;,</span><br><span class="line">]</span><br><span class="line"><span class="comment">// distinctUntilKeyChanged 可以理解为 distinctUntilChanged的快捷方法，直接通过对象的key判断</span></span><br><span class="line"><span class="title function_">from</span>(students)</span><br><span class="line">  .<span class="title function_">pipe</span>(<span class="title function_">distinctUntilKeyChanged</span>(<span class="string">&quot;score&quot;</span>))</span><br><span class="line">  .<span class="title function_">subscribe</span>(<span class="function"><span class="params">student</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`distinctUntilKeyChanged 示範 (1): <span class="subst">$&#123;student.id&#125;</span> - <span class="subst">$&#123;student.score&#125;</span>`</span>)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h3 id="sampleTime"><a href="#sampleTime" class="headerlink" title="sampleTime"></a>sampleTime</h3><p>定时取样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Subject</span>, sampleTime &#125; <span class="keyword">from</span> <span class="string">&quot;rxjs&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> source$ = <span class="keyword">new</span> <span class="title class_">Subject</span>()</span><br><span class="line"><span class="comment">// sampleTime 有定时取样的意思，下面这个 1500 毫秒内，取一次最新值</span></span><br><span class="line">source$.<span class="title function_">pipe</span>(<span class="title function_">sampleTime</span>(<span class="number">1500</span>)).<span class="title function_">subscribe</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`sampleTime 示例: <span class="subst">$&#123;data&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> source$.<span class="title function_">next</span>(<span class="number">1</span>), <span class="number">0</span>)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> source$.<span class="title function_">next</span>(<span class="number">2</span>), <span class="number">500</span>)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> source$.<span class="title function_">next</span>(<span class="number">3</span>), <span class="number">1000</span>)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> source$.<span class="title function_">next</span>(<span class="number">4</span>), <span class="number">4000</span>)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> source$.<span class="title function_">next</span>(<span class="number">5</span>), <span class="number">5000</span>)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> source$.<span class="title function_">next</span>(<span class="number">6</span>), <span class="number">5500</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// sampleTime 示例: 3</span></span><br><span class="line"><span class="comment">// sampleTime 示例: 4</span></span><br></pre></td></tr></table></figure><h3 id="sample"><a href="#sample" class="headerlink" title="sample"></a>sample</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Subject</span>, interval, sample &#125; <span class="keyword">from</span> <span class="string">&quot;rxjs&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> notifier$ = <span class="keyword">new</span> <span class="title class_">Subject</span>()</span><br><span class="line"><span class="keyword">const</span> source$ = <span class="title function_">interval</span>(<span class="number">1000</span>)</span><br><span class="line">source$.<span class="title function_">pipe</span>(<span class="title function_">sample</span>(notifier$)).<span class="title function_">subscribe</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`sample 示例: <span class="subst">$&#123;data&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// sample 只有当传入的observable发出值时, 才会去source$中取最新值</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> notifier$.<span class="title function_">next</span>(<span class="number">1</span>), <span class="number">1500</span>)</span><br><span class="line"><span class="comment">// sample 示例: 0</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> notifier$.<span class="title function_">next</span>(<span class="number">2</span>), <span class="number">1600</span>)</span><br><span class="line"><span class="comment">// (沒事)</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> notifier$.<span class="title function_">next</span>(<span class="number">3</span>), <span class="number">5000</span>)</span><br><span class="line"><span class="comment">// sample 示例: 3</span></span><br></pre></td></tr></table></figure><h3 id="auditTime"><a href="#auditTime" class="headerlink" title="auditTime"></a>auditTime</h3><p><code>audit</code>与<code>throttle</code>相似，但是是使用最后一个值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; interval, auditTime &#125; <span class="keyword">from</span> <span class="string">&quot;rxjs&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// auditTime 表示收到源数据后，等待对应时间，然后传递</span></span><br><span class="line"><span class="comment">// 然后循环，每次取当前最新值</span></span><br><span class="line"><span class="title function_">interval</span>(<span class="number">500</span>)</span><br><span class="line">  .<span class="title function_">pipe</span>(<span class="title function_">auditTime</span>(<span class="number">3000</span>))</span><br><span class="line">  .<span class="title function_">subscribe</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`auditTime: <span class="subst">$&#123;data&#125;</span>`</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="comment">// auditTime: 1</span></span><br><span class="line"><span class="comment">// auditTime: 3</span></span><br><span class="line"><span class="comment">// auditTime: 5</span></span><br><span class="line"><span class="comment">// auditTime: 7</span></span><br></pre></td></tr></table></figure><h3 id="audit"><a href="#audit" class="headerlink" title="audit"></a>audit</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; interval, audit, timer &#125; <span class="keyword">from</span> <span class="string">&quot;rxjs&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> source$ = <span class="title function_">interval</span>(<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">durationSelector</span> = (<span class="params"></span>) =&gt; <span class="title function_">timer</span>(<span class="number">3000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// audit 会等待传入的 observable 发出值，然后才会调用 subscribe</span></span><br><span class="line"><span class="comment">// audit有审计的意思，相当于source$需要等待audit的审计通过后</span></span><br><span class="line">source$.<span class="title function_">pipe</span>(<span class="title function_">audit</span>(durationSelector)).<span class="title function_">subscribe</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`audit: <span class="subst">$&#123;data&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// audit: 2</span></span><br><span class="line"><span class="comment">// audit: 5</span></span><br><span class="line"><span class="comment">// audit: 8</span></span><br><span class="line"><span class="comment">// audit: 11</span></span><br></pre></td></tr></table></figure><h3 id="debounceTime"><a href="#debounceTime" class="headerlink" title="debounceTime"></a>debounceTime</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Subject</span>, debounceTime, interval &#125; <span class="keyword">from</span> <span class="string">&quot;rxjs&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> source$ = <span class="keyword">new</span> <span class="title class_">Subject</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定时间内，没有新的事件发过来，就调用subscribe</span></span><br><span class="line">source$.<span class="title function_">pipe</span>(<span class="title function_">debounceTime</span>(<span class="number">500</span>)).<span class="title function_">subscribe</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`debounceTime 示範: <span class="subst">$&#123;data&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  source$.<span class="title function_">next</span>(<span class="number">1</span>)</span><br><span class="line">&#125;, <span class="number">100</span>)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  source$.<span class="title function_">next</span>(<span class="number">2</span>)</span><br><span class="line">&#125;, <span class="number">200</span>)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  source$.<span class="title function_">next</span>(<span class="number">3</span>)</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// debounceTime 示範: 2</span></span><br><span class="line"><span class="comment">// debounceTime 示範: 3</span></span><br></pre></td></tr></table></figure><h3 id="debounce"><a href="#debounce" class="headerlink" title="debounce"></a>debounce</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; interval, debounce &#125; <span class="keyword">from</span> <span class="string">&quot;rxjs&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> source$ = <span class="title function_">interval</span>(<span class="number">3000</span>)</span><br><span class="line"><span class="comment">// debounce 就需要自己传入定时器</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">durationSelector</span> = value =&gt; <span class="title function_">interval</span>(value * <span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">source$.<span class="title function_">pipe</span>(<span class="title function_">debounce</span>(durationSelector)).<span class="title function_">subscribe</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`debounce 示範: <span class="subst">$&#123;data&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// debounce 示範: 0</span></span><br><span class="line"><span class="comment">// debounce 示範: 1</span></span><br><span class="line"><span class="comment">// debounce 示範: 2</span></span><br></pre></td></tr></table></figure><h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">interval</span>(<span class="number">1000</span>)</span><br><span class="line">  .<span class="title function_">pipe</span>(<span class="title function_">find</span>(<span class="function"><span class="params">data</span> =&gt;</span> data === <span class="number">3</span>))</span><br><span class="line">  .<span class="title function_">subscribe</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`find: <span class="subst">$&#123;data&#125;</span>`</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="comment">// find : 3</span></span><br></pre></td></tr></table></figure><h3 id="findIndex"><a href="#findIndex" class="headerlink" title="findIndex"></a>findIndex</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">interval</span>(<span class="number">1000</span>)</span><br><span class="line">  .<span class="title function_">pipe</span>(</span><br><span class="line">    <span class="title function_">map</span>(<span class="function"><span class="params">data</span> =&gt;</span> data * <span class="number">2</span>),</span><br><span class="line">    <span class="title function_">findIndex</span>(<span class="function"><span class="params">data</span> =&gt;</span> data === <span class="number">6</span>)</span><br><span class="line">  )</span><br><span class="line">  .<span class="title function_">subscribe</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`findIndex: <span class="subst">$&#123;data&#125;</span>`</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="comment">// findIndex: 3</span></span><br></pre></td></tr></table></figure><h3 id="every"><a href="#every" class="headerlink" title="every"></a>every</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> source$ = <span class="title function_">interval</span>(<span class="number">1000</span>)</span><br><span class="line">  .<span class="title function_">pipe</span>(</span><br><span class="line">    <span class="title function_">map</span>(<span class="function"><span class="params">data</span> =&gt;</span> data * <span class="number">2</span>),</span><br><span class="line">    <span class="title function_">take</span>(<span class="number">3</span>)</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">source$</span><br><span class="line">  .<span class="title function_">pipe</span>(</span><br><span class="line">    <span class="title function_">every</span>(<span class="function"><span class="params">data</span> =&gt;</span> data % <span class="number">2</span> === <span class="number">0</span>)</span><br><span class="line">  )</span><br><span class="line">  .<span class="title function_">subscribe</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`every 示範 (1): <span class="subst">$&#123;data&#125;</span>`</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="comment">// every 示範 (1): true</span></span><br></pre></td></tr></table></figure><h3 id="min"><a href="#min" class="headerlink" title="min"></a>min</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">of</span>(<span class="number">5</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">8</span>)</span><br><span class="line">  .<span class="title function_">pipe</span>(<span class="title function_">min</span>())</span><br><span class="line">  .<span class="title function_">subscribe</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`min 示範 (1): <span class="subst">$&#123;data&#125;</span>`</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="comment">// min 示範 (1): 1</span></span><br></pre></td></tr></table></figure><h3 id="max"><a href="#max" class="headerlink" title="max"></a>max</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">of</span>(<span class="number">5</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">8</span>)</span><br><span class="line">  .<span class="title function_">pipe</span>(<span class="title function_">max</span>())</span><br><span class="line">  .<span class="title function_">subscribe</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`max 示範 (1): <span class="subst">$&#123;data&#125;</span>`</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="comment">// max 示範 (1): 9</span></span><br></pre></td></tr></table></figure><h2 id="默认值operators"><a href="#默认值operators" class="headerlink" title="默认值operators"></a>默认值operators</h2><h3 id="isEmpty"><a href="#isEmpty" class="headerlink" title="isEmpty"></a>isEmpty</h3><p>没有发生过事件，结束时就会给一个true, 否则给一个false</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">EMPTY</span></span><br><span class="line">  .<span class="title function_">pipe</span>(<span class="title function_">isEmpty</span>())</span><br><span class="line">  .<span class="title function_">subscribe</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`isEmpty 示範 (1): <span class="subst">$&#123;data&#125;</span>`</span>)</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="comment">// isEmpty 示範 (1): true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> emptySource$ = <span class="keyword">new</span> <span class="title class_">Subject</span>();</span><br><span class="line">emptySource$</span><br><span class="line">  .<span class="title function_">pipe</span>(<span class="title function_">isEmpty</span>())</span><br><span class="line">  .<span class="title function_">subscribe</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`isEmpty 示範 (2): <span class="subst">$&#123;data&#125;</span>`</span>)</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> emptySource$.<span class="title function_">complete</span>(), <span class="number">2000</span>);</span><br><span class="line"><span class="comment">// isEmpty 示範 (2): true</span></span><br></pre></td></tr></table></figure><h3 id="defaultIfEmpty"><a href="#defaultIfEmpty" class="headerlink" title="defaultIfEmpty"></a>defaultIfEmpty</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> emptySource$ = <span class="keyword">new</span> <span class="title class_">Subject</span>();</span><br><span class="line">emptySource$</span><br><span class="line">  .<span class="title function_">pipe</span>(<span class="title function_">defaultIfEmpty</span>(<span class="string">&#x27;a&#x27;</span>))</span><br><span class="line">  .<span class="title function_">subscribe</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`defaultIfEmpty 示範 (1): <span class="subst">$&#123;data&#125;</span>`</span>)</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> emptySource$.<span class="title function_">complete</span>(), <span class="number">2000</span>);</span><br><span class="line"><span class="comment">// defaultIfEmpty 示範 (1): a</span></span><br></pre></td></tr></table></figure><h2 id="聚合类型operators"><a href="#聚合类型operators" class="headerlink" title="聚合类型operators"></a>聚合类型operators</h2><h3 id="count"><a href="#count" class="headerlink" title="count"></a>count</h3><p>用来统计发生过多少次事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">of</span>(<span class="number">5</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">8</span>)</span><br><span class="line">  .<span class="title function_">pipe</span>(<span class="title function_">count</span>())</span><br><span class="line">  .<span class="title function_">subscribe</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`count 示範 (1): <span class="subst">$&#123;data&#125;</span>`</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="comment">// count 示範 (1): 4</span></span><br></pre></td></tr></table></figure><h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h3><p><code>reduce</code>只会算最后一次的值，<code>scan</code>每一个值来的时候都会算</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> donateAmount = [<span class="number">100</span>, <span class="number">500</span>, <span class="number">300</span>, <span class="number">250</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> accumDonate$ = <span class="title function_">of</span>(...donateAmount).<span class="title function_">pipe</span>(</span><br><span class="line">  <span class="title function_">reduce</span>(</span><br><span class="line">    <span class="function">(<span class="params">acc, value</span>) =&gt;</span> acc + value, <span class="comment">// 累加函數</span></span><br><span class="line">    <span class="number">0</span> <span class="comment">// 初始值</span></span><br><span class="line">  )</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">accumDonate$.<span class="title function_">subscribe</span>(<span class="function"><span class="params">amount</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`目前 donate 金額累計：<span class="subst">$&#123;amount&#125;</span>`</span>)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 目前 donate 金額累計：1150</span></span><br></pre></td></tr></table></figure><h2 id="工具型operators"><a href="#工具型operators" class="headerlink" title="工具型operators"></a>工具型operators</h2><h3 id="tap"><a href="#tap" class="headerlink" title="tap"></a>tap</h3><p><code>tap</code>用来调试，打日志之类的，不会影响流</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">interval</span>(<span class="number">1000</span>).<span class="title function_">pipe</span>(</span><br><span class="line">  <span class="title function_">map</span>(<span class="function"><span class="params">data</span> =&gt;</span> data * <span class="number">2</span>),</span><br><span class="line">  <span class="comment">// 使用 tap 來隔離 side effect</span></span><br><span class="line">  <span class="title function_">tap</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;目前資料&#x27;</span>, data)),</span><br><span class="line">  <span class="title function_">map</span>(<span class="function"><span class="params">data</span> =&gt;</span> data + <span class="number">1</span>),</span><br><span class="line">  <span class="title function_">tap</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;目前資料&#x27;</span>, data)),</span><br><span class="line">  <span class="title function_">take</span>(<span class="number">10</span>)</span><br><span class="line">).<span class="title function_">subscribe</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`tap 示範 (1): <span class="subst">$&#123;data&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="toArray"><a href="#toArray" class="headerlink" title="toArray"></a>toArray</h3><p>将事件流存起来放入数组中一起返回</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">interval</span>(<span class="number">1000</span>)</span><br><span class="line">  .<span class="title function_">pipe</span>(</span><br><span class="line">    <span class="title function_">take</span>(<span class="number">3</span>),</span><br><span class="line">    <span class="title function_">toArray</span>()</span><br><span class="line">  )</span><br><span class="line">  .<span class="title function_">subscribe</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`toArray 示範: <span class="subst">$&#123;data&#125;</span>`</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="comment">// toArray 示範: 0,1,2</span></span><br></pre></td></tr></table></figure><h3 id="delay"><a href="#delay" class="headerlink" title="delay"></a>delay</h3><p>delay让事件流延迟一定事件再开始</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">of</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>).<span class="title function_">pipe</span>(</span><br><span class="line">  <span class="title function_">delay</span>(<span class="number">1000</span>)</span><br><span class="line">).<span class="title function_">subscribe</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`delay 示範: <span class="subst">$&#123;data&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// (等候 1 秒鐘)</span></span><br><span class="line"><span class="comment">// delay 示範: 1</span></span><br><span class="line"><span class="comment">// delay 示範: 2</span></span><br><span class="line"><span class="comment">// delay 示範: 3</span></span><br></pre></td></tr></table></figure><h3 id="delayWhen"><a href="#delayWhen" class="headerlink" title="delayWhen"></a>delayWhen</h3><p>和<code>delay</code>类似，但是<code>delayWhen</code>是自己决定条件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">delayFn</span> = (<span class="params">value</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">of</span>(value).<span class="title function_">pipe</span>(<span class="title function_">delay</span>(value % <span class="number">2</span> * <span class="number">2000</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">interval</span>(<span class="number">1000</span>).<span class="title function_">pipe</span>(</span><br><span class="line">  <span class="title function_">take</span>(<span class="number">3</span>),</span><br><span class="line">  <span class="title function_">delayWhen</span>(<span class="function"><span class="params">value</span> =&gt;</span> <span class="title function_">delayFn</span>(value))</span><br><span class="line">).<span class="title function_">subscribe</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`delayWhen 示範 (1): <span class="subst">$&#123;data&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// delayWhen 示範 (1): 0</span></span><br><span class="line"><span class="comment">// (原本應該發生事件 1，但被延遲了)</span></span><br><span class="line"><span class="comment">// delayWhen 示範 (1): 2</span></span><br><span class="line"><span class="comment">// delayWhen 示範 (1): 1</span></span><br></pre></td></tr></table></figure><h2 id="错误处理型operators"><a href="#错误处理型operators" class="headerlink" title="错误处理型operators"></a>错误处理型operators</h2><h3 id="catchError"><a href="#catchError" class="headerlink" title="catchError"></a>catchError</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">interval</span>(<span class="number">1000</span>)</span><br><span class="line">  .<span class="title function_">pipe</span>(</span><br><span class="line">    <span class="title function_">map</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (data % <span class="number">2</span> === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;發生錯誤&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="title function_">catchError</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">interval</span>(<span class="number">1000</span>);</span><br><span class="line">    &#125;),</span><br><span class="line">  <span class="title function_">map</span>(<span class="function"><span class="params">data</span> =&gt;</span> data * <span class="number">2</span>)</span><br><span class="line">  )</span><br><span class="line">  .<span class="title function_">subscribe</span>(&#123;</span><br><span class="line">    <span class="attr">next</span>: <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`catchError 示範 (2): <span class="subst">$&#123;data&#125;</span>`</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">error</span>: <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`catchError 示範 (2): 錯誤 - <span class="subst">$&#123;error&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="comment">// catchError 示範 (2): 0</span></span><br><span class="line"><span class="comment">// (這時候來源 Observable 發生錯誤，用另一個 Observable 取代)</span></span><br><span class="line"><span class="comment">// (以下是錯誤處理後新的 Observable)</span></span><br><span class="line"><span class="comment">// catchError 示範 (2): 0</span></span><br><span class="line"><span class="comment">// catchError 示範 (2): 2</span></span><br><span class="line"><span class="comment">// catchError 示範 (2): 4</span></span><br></pre></td></tr></table></figure><h3 id="retry"><a href="#retry" class="headerlink" title="retry"></a>retry</h3><p>在发送错误的时候，可以进行重试</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">interval</span>(<span class="number">1000</span>)</span><br><span class="line">  .<span class="title function_">pipe</span>(</span><br><span class="line">    <span class="title function_">switchMap</span>(<span class="function"><span class="params">data</span> =&gt;</span> </span><br><span class="line">      <span class="title function_">iif</span>(<span class="function">() =&gt;</span> data % <span class="number">2</span> === <span class="number">0</span>, <span class="title function_">of</span>(data), <span class="title function_">throwError</span>(<span class="string">&#x27;發生錯誤&#x27;</span>))),</span><br><span class="line">    <span class="title function_">map</span>(<span class="function"><span class="params">data</span> =&gt;</span> data + <span class="number">1</span>),</span><br><span class="line">    <span class="title function_">retry</span>(<span class="number">3</span>),</span><br><span class="line">  )</span><br><span class="line">  .<span class="title function_">subscribe</span>(&#123;</span><br><span class="line">    <span class="attr">next</span>: <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`retry 示範 (1): <span class="subst">$&#123;data&#125;</span>`</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">error</span>: <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`retry 示範 (1): 錯誤 - <span class="subst">$&#123;error&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="comment">// retry 示範 (1): 1</span></span><br><span class="line"><span class="comment">// (發生錯誤，重試第 1 次)</span></span><br><span class="line"><span class="comment">// retry 示範 (1): 1</span></span><br><span class="line"><span class="comment">// (發生錯誤，重試第 2 次)</span></span><br><span class="line"><span class="comment">// retry 示範 (1): 1</span></span><br><span class="line"><span class="comment">// (發生錯誤，重試第 3 次)</span></span><br><span class="line"><span class="comment">// retry 示範 (1): 1</span></span><br><span class="line"><span class="comment">// (發生錯誤，已經重試 3 次了，不在重試，直接讓錯誤發生)</span></span><br><span class="line"><span class="comment">// retry 示範 (1): 錯誤 - 發生錯誤</span></span><br></pre></td></tr></table></figure><h3 id="retryWhen"><a href="#retryWhen" class="headerlink" title="retryWhen"></a>retryWhen</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">interval</span>(<span class="number">1000</span>)</span><br><span class="line">  .<span class="title function_">pipe</span>(</span><br><span class="line">    <span class="title function_">switchMap</span>(<span class="function"><span class="params">data</span> =&gt;</span> </span><br><span class="line">      <span class="title function_">iif</span>(<span class="function">() =&gt;</span> data % <span class="number">2</span> === <span class="number">0</span>, <span class="title function_">of</span>(data), <span class="title function_">throwError</span>(<span class="string">&#x27;發生錯誤&#x27;</span>))),</span><br><span class="line">    <span class="title function_">map</span>(<span class="function"><span class="params">data</span> =&gt;</span> data + <span class="number">1</span>),</span><br><span class="line">    <span class="title function_">retryWhen</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> <span class="title function_">interval</span>(<span class="number">3000</span>).<span class="title function_">pipe</span>(<span class="title function_">take</span>(<span class="number">3</span>)))</span><br><span class="line">  )</span><br><span class="line">  .<span class="title function_">subscribe</span>(&#123;</span><br><span class="line">    <span class="attr">next</span>: <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`retryWhen 示範 (1): <span class="subst">$&#123;data&#125;</span>`</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">error</span>: <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`retryWhen 示範 (1): 錯誤 - <span class="subst">$&#123;error&#125;</span>`</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">complete</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;retryWhen 示範 (1): 完成&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="comment">// retryWhen 示範 (1): 1</span></span><br><span class="line"><span class="comment">// retryWhen 示範 (1): 1</span></span><br><span class="line"><span class="comment">// retryWhen 示範 (1): 1</span></span><br><span class="line"><span class="comment">// (重試的 Observable 完成，因此整個 Observable 也完成)</span></span><br><span class="line"><span class="comment">// retryWhen 示範 (1): 完成</span></span><br></pre></td></tr></table></figure><h3 id="finalize"><a href="#finalize" class="headerlink" title="finalize"></a>finalize</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">interval</span>(<span class="number">1000</span>)</span><br><span class="line">  .<span class="title function_">pipe</span>(</span><br><span class="line">    <span class="title function_">take</span>(<span class="number">5</span>),</span><br><span class="line">    <span class="title function_">finalize</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;finalize 示範 (1): 在 pipe 內的 finalize 被呼叫了&#x27;</span>)</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="title function_">map</span>(<span class="function"><span class="params">data</span> =&gt;</span> data + <span class="number">1</span>),</span><br><span class="line">  )</span><br><span class="line">  .<span class="title function_">subscribe</span>(&#123;</span><br><span class="line">    <span class="attr">next</span>: <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`finalize 示範 (1): <span class="subst">$&#123;data&#125;</span>`</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">complete</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`finalize 示範 (1): 完成`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="comment">// finalize 示範 (1): 1</span></span><br><span class="line"><span class="comment">// finalize 示範 (1): 2</span></span><br><span class="line"><span class="comment">// finalize 示範 (1): 3</span></span><br><span class="line"><span class="comment">// finalize 示範 (1): 4</span></span><br><span class="line"><span class="comment">// finalize 示範 (1): 5</span></span><br><span class="line"><span class="comment">// finalize 示範 (1): 完成</span></span><br><span class="line"><span class="comment">// finalize 示範 (1): 在 pipe 內的 finalize 被呼叫了</span></span><br></pre></td></tr></table></figure><h2 id="类型转换operators"><a href="#类型转换operators" class="headerlink" title="类型转换operators"></a>类型转换operators</h2><h3 id="share"><a href="#share" class="headerlink" title="share"></a>share</h3><p><code>share</code> 基本上就是 <code>multicast(new Subject())</code> 與 <code>refCount()</code> 的組合</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; interval, share, take &#125; <span class="keyword">from</span> <span class="string">&quot;rxjs&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> source$ = <span class="title function_">interval</span>(<span class="number">500</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// share 可以让 clod Observable 变成一个 hot Observable</span></span><br><span class="line"><span class="keyword">const</span> hotSource$ = source$.<span class="title function_">pipe</span>(<span class="title function_">share</span>(), <span class="title function_">take</span>(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  hotSource$.<span class="title function_">subscribe</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Observable 第二次訂閱: <span class="subst">$&#123;data&#125;</span>`</span>))</span><br><span class="line">&#125;, <span class="number">2000</span>)</span><br><span class="line"></span><br><span class="line">hotSource$.<span class="title function_">subscribe</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Observable 第一次訂閱: <span class="subst">$&#123;data&#125;</span>`</span>))</span><br><span class="line"><span class="comment">// Observable 第一次訂閱: 0</span></span><br><span class="line"><span class="comment">// Observable 第一次訂閱: 1</span></span><br><span class="line"><span class="comment">// Observable 第一次訂閱: 2</span></span><br><span class="line"><span class="comment">// Observable 第一次訂閱: 3</span></span><br><span class="line"><span class="comment">// Observable 第二次訂閱: 3</span></span><br><span class="line"><span class="comment">// Observable 第一次訂閱: 4</span></span><br><span class="line"><span class="comment">// Observable 第二次訂閱: 4</span></span><br></pre></td></tr></table></figure><h3 id="shareReplay-1"><a href="#shareReplay-1" class="headerlink" title="shareReplay"></a>shareReplay</h3><p><code>shareReplay</code>還有重播的概念，也就是每次訂閱時，會重播過去 N 次發生的資料</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; interval, shareReplay, take &#125; <span class="keyword">from</span> <span class="string">&quot;rxjs&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> source$ = <span class="title function_">interval</span>(<span class="number">1000</span>).<span class="title function_">pipe</span>(<span class="title function_">shareReplay</span>(), <span class="title function_">take</span>(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line">source$.<span class="title function_">subscribe</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`shareReplay 第一次订阅: <span class="subst">$&#123;data&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  source$.<span class="title function_">subscribe</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`shareReplay 第二次订阅: <span class="subst">$&#123;data&#125;</span>`</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;, <span class="number">5000</span>)</span><br><span class="line"><span class="comment">// shareReplay 第一次订阅: 0</span></span><br><span class="line"><span class="comment">// shareReplay 第一次订阅: 1</span></span><br><span class="line"><span class="comment">// shareReplay 第一次订阅: 2</span></span><br><span class="line"><span class="comment">// shareReplay 第一次订阅: 3</span></span><br><span class="line"><span class="comment">// shareReplay 第二次订阅: 0</span></span><br><span class="line"><span class="comment">// shareReplay 第二次订阅: 1</span></span><br><span class="line"><span class="comment">// shareReplay 第二次订阅: 2</span></span><br><span class="line"><span class="comment">// shareReplay 第二次订阅: 3</span></span><br><span class="line"><span class="comment">// shareReplay 第一次订阅: 4</span></span><br><span class="line"><span class="comment">// shareReplay 第二次订阅: 4</span></span><br><span class="line"><span class="comment">// shareReplay 第一次订阅: 5</span></span><br><span class="line"><span class="comment">// shareReplay 第二次订阅: 5</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://zhoujunxiong.gitee.com/categories/%E6%A1%86%E6%9E%B6/">框架</category>
      
      
      <category domain="http://zhoujunxiong.gitee.com/tags/%E5%89%8D%E7%AB%AF/">前端</category>
      
      <category domain="http://zhoujunxiong.gitee.com/tags/%E6%A1%86%E6%9E%B6/">框架</category>
      
      
      <comments>http://zhoujunxiong.gitee.com/2021/10/21/%E5%89%8D%E7%AB%AF/%E6%A1%86%E6%9E%B6/rxjs/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>rollup</title>
      <link>http://zhoujunxiong.gitee.com/2021/10/04/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/vite/</link>
      <guid>http://zhoujunxiong.gitee.com/2021/10/04/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/vite/</guid>
      <pubDate>Mon, 04 Oct 2021 01:14:51 GMT</pubDate>
      
        
        
      <description>&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l</description>
        
      
      
      
      <content:encoded><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">envResolve</span> = (<span class="params">mode: string, env: string</span>) =&gt; <span class="title function_">loadEnv</span>(mode, process.<span class="title function_">cwd</span>())[env];</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (&#123; command, mode &#125;: <span class="title class_">ConfigEnv</span>): <span class="function"><span class="params">UserConfigExport</span> =&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">base</span>: <span class="title function_">envResolve</span>(mode, <span class="string">&#x27;VITE_PUBLIC&#x27;</span>),</span><br><span class="line">    <span class="attr">plugins</span>: [<span class="title function_">vue</span>()]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="title function_">configureServer</span>(<span class="params">server</span>) &#123;</span><br><span class="line">      <span class="comment">// server.middlewares.use((req, res, next) =&gt; &#123;</span></span><br><span class="line">      <span class="comment">//   // 自定义请求处理...</span></span><br><span class="line">      <span class="comment">// &#125;)</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">111</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">handleHotUpdate</span>(<span class="params">&#123; server, file, modules &#125;</span>) &#123;</span><br><span class="line">      server.<span class="property">ws</span>.<span class="title function_">send</span>(&#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;custom&quot;</span>,</span><br><span class="line">        <span class="attr">event</span>: <span class="string">&quot;special-update&quot;</span>,</span><br><span class="line">        <span class="attr">data</span>: &#123; <span class="attr">data</span>:&#123;file, modules &#125;&#125;,</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="comment">// console.log(modules)</span></span><br><span class="line">      <span class="comment">// return []</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当添加<code>url</code>查询参数时，资源就会被映射为路径</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> encoderPath <span class="keyword">from</span> <span class="string">&#x27;opus-recorder/dist/waveWorker.min.js?url&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(encoderPath)</span><br><span class="line"><span class="comment">// /node_modules/opus-recorder/dist/waveWorker.min.js</span></span><br></pre></td></tr></table></figure><p>当添加<code>raw</code>参数时，资源不会做任何处理，直接作为字符串引入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> encoderPath <span class="keyword">from</span> <span class="string">&#x27;opus-recorder/dist/waveWorker.min.js?raw&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(encoderPath)</span><br><span class="line"><span class="comment">// encoderPath的值为源代码</span></span><br></pre></td></tr></table></figure><p>脚本可以通过 ?worker 或 ?sharedworker 后缀导入为 web worker。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在生产构建中将会分离出 chunk</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Worker</span> <span class="keyword">from</span> <span class="string">&#x27;./shader.js?worker&#x27;</span></span><br><span class="line"><span class="keyword">const</span> worker = <span class="keyword">new</span> <span class="title class_">Worker</span>()</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://zhoujunxiong.gitee.com/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/">工具使用</category>
      
      <category domain="http://zhoujunxiong.gitee.com/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/rollup/">rollup</category>
      
      
      <category domain="http://zhoujunxiong.gitee.com/tags/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/">工具使用</category>
      
      
      <comments>http://zhoujunxiong.gitee.com/2021/10/04/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/vite/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>flutter之GirdView</title>
      <link>http://zhoujunxiong.gitee.com/2021/09/29/flutter/flutter%E4%B9%8BHero/</link>
      <guid>http://zhoujunxiong.gitee.com/2021/09/29/flutter/flutter%E4%B9%8BHero/</guid>
      <pubDate>Wed, 29 Sep 2021 06:21:12 GMT</pubDate>
      
        
        
      <description>&lt;figure class=&quot;highlight dart&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=</description>
        
      
      
      
      <content:encoded><![CDATA[<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeroDemo</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> HeroDemo(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Center(</span><br><span class="line">      child: PhotoHero(</span><br><span class="line">        photo: <span class="string">&#x27;http://img0.dili360.com/ga/M01/48/3C/wKgBy1kj49qAMVd7ADKmuZ9jug8377.tub.jpg&#x27;</span>,</span><br><span class="line">        width: <span class="number">300.0</span>,</span><br><span class="line">        onTap: () &#123;</span><br><span class="line">          Navigator.of(context).push(</span><br><span class="line">            MaterialPageRoute&lt;<span class="keyword">void</span>&gt;(</span><br><span class="line">              builder: (BuildContext context) &#123;</span><br><span class="line">                <span class="keyword">return</span> Scaffold(</span><br><span class="line">                  appBar: AppBar(</span><br><span class="line">                    title: <span class="keyword">const</span> Text(<span class="string">&#x27;Flippers Page&#x27;</span>),</span><br><span class="line">                  ),</span><br><span class="line">                  body: Container(</span><br><span class="line">                    padding: <span class="keyword">const</span> EdgeInsets.all(<span class="number">16.0</span>),</span><br><span class="line">                    alignment: Alignment.topLeft,</span><br><span class="line">                    child: PhotoHero(</span><br><span class="line">                      photo: <span class="string">&#x27;http://img0.dili360.com/ga/M01/48/3C/wKgBy1kj49qAMVd7ADKmuZ9jug8377.tub.jpg&#x27;</span>,</span><br><span class="line">                      width: <span class="number">100.0</span>,</span><br><span class="line">                      onTap: () &#123;</span><br><span class="line">                        Navigator.of(context).pop();</span><br><span class="line">                      &#125;,</span><br><span class="line">                    ),</span><br><span class="line">                  ),</span><br><span class="line">                );</span><br><span class="line">              &#125;,</span><br><span class="line">              fullscreenDialog: <span class="keyword">true</span>,</span><br><span class="line">            ),</span><br><span class="line">          );</span><br><span class="line">        &#125;,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PhotoHero</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> PhotoHero(&#123;Key? key, <span class="keyword">required</span> <span class="keyword">this</span>.photo, <span class="keyword">required</span> <span class="keyword">this</span>.onTap, <span class="keyword">required</span> <span class="keyword">this</span>.width&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> photo;</span><br><span class="line">  <span class="keyword">final</span> VoidCallback onTap;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">double</span> width;</span><br><span class="line"></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> SizedBox(</span><br><span class="line">      width: width,</span><br><span class="line">      child: Hero(</span><br><span class="line">        tag: photo,</span><br><span class="line">        child: Material(</span><br><span class="line">          color: Colors.transparent,</span><br><span class="line">          child: InkWell(</span><br><span class="line">            onTap: onTap,</span><br><span class="line">            child: Image.network(</span><br><span class="line">              photo,</span><br><span class="line">              fit: BoxFit.contain,</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://zhoujunxiong.gitee.com/categories/flutter/">flutter</category>
      
      
      <category domain="http://zhoujunxiong.gitee.com/tags/flutter/">flutter</category>
      
      <category domain="http://zhoujunxiong.gitee.com/tags/dart/">dart</category>
      
      
      <comments>http://zhoujunxiong.gitee.com/2021/09/29/flutter/flutter%E4%B9%8BHero/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>WebComponents</title>
      <link>http://zhoujunxiong.gitee.com/2021/09/22/%E5%89%8D%E7%AB%AF/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%AB%AF/WebComponents/</link>
      <guid>http://zhoujunxiong.gitee.com/2021/09/22/%E5%89%8D%E7%AB%AF/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%AB%AF/WebComponents/</guid>
      <pubDate>Wed, 22 Sep 2021 01:37:42 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;&lt;code&gt;WebComponents&lt;/code&gt;包含三个模块：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Custom elements（自定义元素）：</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><code>WebComponents</code>包含三个模块：</p><ul><li>Custom elements（自定义元素）：一组JavaScript API，允许您定义custom elements及其行为，然后可以在您的用户界面中按照需要使用它们。</li><li>Shadow DOM（影子DOM）：一组JavaScript API，用于将封装的“影子”DOM树附加到元素（与主文档DOM分开呈现）并控制其关联的功能。通过这种方式，您可以保持元素的功能私有，这样它们就可以被脚本化和样式化，而不用担心与文档的其他部分发生冲突。</li><li>HTML templates（HTML模板）： <template> 和 <slot> 元素使您可以编写不在呈现页面中显示的标记模板。然后它们可以作为自定义元素结构的基础被多次重用。</li></ul><h2 id="Custom-elements"><a href="#Custom-elements" class="headerlink" title="Custom elements"></a>Custom elements</h2><p>它允许我自定义元素，对组件进行封装</p><p>例如<code>&lt;user-card&gt;&lt;/user-card&gt;</code>表示一个用户卡片</p><p>通过继承<code>HTMLElement</code>, 自定义一个元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UserCard</span> <span class="keyword">extends</span> <span class="title class_ inherited__">HTMLElement</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册元素</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">customElements</span>.<span class="title function_">define</span>(<span class="string">&#x27;user-card&#x27;</span>, <span class="title class_">UserCard</span>);</span><br></pre></td></tr></table></figure><p>上面代码中，UserCard就是自定义元素的类。注意，这个类的父类是HTMLElement，因此继承了 HTML 元素的特性。</p><p>还有一些生命周期函数</p><ul><li>connectedCallback: 当自定义元素第一次被连接到文档DOM时被调用。</li><li>disconnectedCallback: 当自定义元素与文档DOM断开连接时被调用。</li><li>adoptedCallback: 当自定义元素被移动到新文档时被调用。</li><li>attributeChangedCallback: 当自定义元素的一个属性被增加、移除或更改时被调用。</li></ul><p><code>attributeChangedCallback</code>需要配合下面的方法使用，只有注册在其中的方法才可以</p><p><code>static get observedAttributes () &#123; return [ &#39;img&#39;, &#39;text&#39; ]; &#125; </code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UserCard2</span> <span class="keyword">extends</span> <span class="title class_ inherited__">HTMLElement</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>();</span><br><span class="line">    <span class="keyword">var</span> shadow = <span class="variable language_">this</span>.<span class="title function_">attachShadow</span>(&#123; <span class="attr">mode</span>: <span class="string">&#x27;open&#x27;</span> &#125;);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">shadow</span> = shadow;</span><br><span class="line">    <span class="keyword">var</span> templateElem = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;userCardTemplate&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> content = templateElem.<span class="property">content</span>.<span class="title function_">cloneNode</span>(<span class="literal">true</span>);</span><br><span class="line">    shadow.<span class="title function_">appendChild</span>(content);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">get</span> <span class="title function_">observedAttributes</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">attributeChangedCallback</span>(<span class="params">name, oldValue, newValue</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Custom square element attributes changed.&#x27;</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">shadow</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.name&#x27;</span>).<span class="property">innerText</span> = newValue;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">customElements</span>.<span class="title function_">define</span>(<span class="string">&#x27;user-card2&#x27;</span>, <span class="title class_">UserCard2</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;user-card2&#x27;</span>).<span class="title function_">setAttribute</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;sniper&#x27;</span>);</span><br></pre></td></tr></table></figure><p>接着，使用浏览器原生的<code>window.customElements.define()</code>方法，告诉浏览器<code>&lt;user-card&gt;</code>元素与这个类关联。</p><p>自定义元素<user-card>目前还是空的，下面在类里面给出这个元素的内容。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UserCard</span> <span class="keyword">extends</span> <span class="title class_ inherited__">HTMLElement</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> image = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;img&#x27;</span>);</span><br><span class="line">    image.<span class="property">src</span> = <span class="string">&#x27;https://semantic-ui.com/images/avatar2/large/kristy.png&#x27;</span>;</span><br><span class="line">    image.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;image&#x27;</span>);</span><br><span class="line">    image.<span class="property">style</span>.<span class="property">width</span> = <span class="string">&#x27;100px&#x27;</span>;</span><br><span class="line">    image.<span class="property">style</span>.<span class="property">height</span> = <span class="string">&#x27;100px&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> container = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">    container.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;container&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> name = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;p&#x27;</span>);</span><br><span class="line">    name.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;name&#x27;</span>);</span><br><span class="line">    name.<span class="property">innerText</span> = <span class="string">&#x27;User Name&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> email = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;p&#x27;</span>);</span><br><span class="line">    email.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;email&#x27;</span>);</span><br><span class="line">    email.<span class="property">innerText</span> = <span class="string">&#x27;yourmail@some-email.com&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> button = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line">    button.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line">    button.<span class="property">innerText</span> = <span class="string">&#x27;Follow&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    container.<span class="title function_">append</span>(name, email, button);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">append</span>(image, container);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码最后一行，this.append()的this表示自定义元素实例。</p><p>完成这一步以后，自定义元素内部的 DOM 结构就已经生成了。</p><blockquote><p>这样操作是很麻烦的，所以我们后面会使用 HTML templates 进行替换。</p></blockquote><p>还有与自定义元素特别相关的伪类：</p><ul><li>:defined: 匹配任何已定义的元素，包括内置元素和使用CustomElementRegistry.define()定义的自定义元素。</li><li>:host: 选择 shadow DOM 的 shadow host ，内容是它内部使用的 CSS（ containing the CSS it is used inside ）。</li><li>:host(): 选择 shadow DOM 的 shadow host ，内容是它内部使用的 CSS （这样您可以从 shadow DOM 内部选择自定义元素）— 但只匹配给定方法的选择器的 shadow host 元素。</li><li>:host-context(): 选择 shadow DOM 的 shadow host ，内容是它内部使用的 CSS （这样您可以从 shadow DOM 内部选择自定义元素）— 但只匹配给定方法的选择器匹配元素的子 shadow host 元素。</li></ul><h2 id="HTML-templates"><a href="#HTML-templates" class="headerlink" title="HTML templates"></a>HTML templates</h2><p>通过<code>template</code>我们可以简化上面的操作</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;userCardTemplate&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://semantic-ui.com/images/avatar2/large/kristy.png&quot;</span> <span class="attr">class</span>=<span class="string">&quot;image&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;name&quot;</span>&gt;</span>User Name<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;email&quot;</span>&gt;</span>yourmail@some-email.com<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;button&quot;</span>&gt;</span>Follow<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后修改一下元素的<code>class</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UserCard</span> <span class="keyword">extends</span> <span class="title class_ inherited__">HTMLElement</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> templateElem = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;userCardTemplate&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> content = templateElem.<span class="property">content</span>.<span class="title function_">cloneNode</span>(<span class="literal">true</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">appendChild</span>(content);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>样式可以写在<code>template</code>里面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;userCardTemplate&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://semantic-ui.com/images/avatar2/large/kristy.png&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100px&quot;</span> <span class="attr">class</span>=<span class="string">&quot;image&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;name&quot;</span>&gt;</span>User Name<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;email&quot;</span>&gt;</span>yourmail@some-email.com<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;button&quot;</span>&gt;</span>Follow<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Shadow-DOM"><a href="#Shadow-DOM" class="headerlink" title="Shadow DOM"></a>Shadow DOM</h2><p>为了和外界完全隔离，我们可以使用<code>Shadow DOM</code>(例如前面的样式有影响其它元素)</p><p>自定义元素的this.attachShadow()方法开启 Shadow DOM，详见下面的代码。</p><ul><li>open open 表示可以通过页面内的 JavaScript 方法来获取 Shadow DOM，例如使用 <code>Element.shadowRoot</code> 属性：<code>let myShadowDom = myCustomElem.shadowRoot</code></li><li>closed 完全与外界隔离<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UserCard</span> <span class="keyword">extends</span> <span class="title class_ inherited__">HTMLElement</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>();</span><br><span class="line">    <span class="keyword">var</span> shadow = <span class="variable language_">this</span>.<span class="title function_">attachShadow</span>( &#123; <span class="attr">mode</span>: <span class="string">&#x27;closed&#x27;</span> &#125; );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> templateElem = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;userCardTemplate&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> content = templateElem.<span class="property">content</span>.<span class="title function_">cloneNode</span>(<span class="literal">true</span>);</span><br><span class="line">    content.<span class="title function_">querySelector</span>(<span class="string">&#x27;img&#x27;</span>).<span class="title function_">setAttribute</span>(<span class="string">&#x27;src&#x27;</span>, <span class="variable language_">this</span>.<span class="title function_">getAttribute</span>(<span class="string">&#x27;image&#x27;</span>));</span><br><span class="line">    content.<span class="title function_">querySelector</span>(<span class="string">&#x27;.container&gt;.name&#x27;</span>).<span class="property">innerText</span> = <span class="variable language_">this</span>.<span class="title function_">getAttribute</span>(<span class="string">&#x27;name&#x27;</span>);</span><br><span class="line">    content.<span class="title function_">querySelector</span>(<span class="string">&#x27;.container&gt;.email&#x27;</span>).<span class="property">innerText</span> = <span class="variable language_">this</span>.<span class="title function_">getAttribute</span>(<span class="string">&#x27;email&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    shadow.<span class="title function_">appendChild</span>(content);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">customElements</span>.<span class="title function_">define</span>(<span class="string">&#x27;user-card&#x27;</span>, <span class="title class_">UserCard</span>);</span><br></pre></td></tr></table></figure></li></ul><p>这样<code>template</code>的样式就不会影响到外部样式，相反也是同理</p><p><code>this.attachShadow()</code>方法的参数{ mode: ‘closed’ }，表示<code>Shadow DOM</code>是封闭的，不允许外部访问。</p>]]></content:encoded>
      
      
      <category domain="http://zhoujunxiong.gitee.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%AB%AF/">浏览器端</category>
      
      
      <category domain="http://zhoujunxiong.gitee.com/tags/%E5%89%8D%E7%AB%AF/">前端</category>
      
      <category domain="http://zhoujunxiong.gitee.com/tags/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%AB%AF/">浏览器端</category>
      
      
      <comments>http://zhoujunxiong.gitee.com/2021/09/22/%E5%89%8D%E7%AB%AF/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%AB%AF/WebComponents/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>go之set, struct{}{}</title>
      <link>http://zhoujunxiong.gitee.com/2021/08/29/GO/go%E4%B9%8Bset/</link>
      <guid>http://zhoujunxiong.gitee.com/2021/08/29/GO/go%E4%B9%8Bset/</guid>
      <pubDate>Sun, 29 Aug 2021 04:28:39 GMT</pubDate>
      
        
        
      <description>&lt;h4 id=&quot;set&quot;&gt;&lt;a href=&quot;#set&quot; class=&quot;headerlink&quot; title=&quot;set&quot;&gt;&lt;/a&gt;set&lt;/h4&gt;&lt;p&gt;go语言并没有直接提供&lt;code&gt;set&lt;/code&gt;数据结构为我们使用，但是可以使用&lt;code&gt;map&lt;/code&gt;进行代替&lt;/p</description>
        
      
      
      
      <content:encoded><![CDATA[<h4 id="set"><a href="#set" class="headerlink" title="set"></a>set</h4><p>go语言并没有直接提供<code>set</code>数据结构为我们使用，但是可以使用<code>map</code>进行代替</p><blockquote><p>要替换集，您应该使用map[string]struct{}。这是有效的并且被认为是惯用的，“值”绝对不占空间。</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化集合：</span></span><br><span class="line">set := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 放入一个项目：</span></span><br><span class="line">set[<span class="string">&quot;item&quot;</span>]=<span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查是否有物品：</span></span><br><span class="line">_, isPresent := set[<span class="string">&quot;item&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除一个项目：</span></span><br><span class="line"><span class="built_in">delete</span>(set, <span class="string">&quot;item&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="struct"><a href="#struct" class="headerlink" title="struct{}{}"></a>struct{}{}</h4><p><code>struct&#123;&#125;&#123;&#125;</code>本身不占用内存空间，所以我们可以基于这个做一些优化</p><p>首先我们证明一下，使用go自带的<code>pprof</code>内存分析工具</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">log.Println(http.ListenAndServe(<span class="string">&quot;0.0.0.0:6060&quot;</span>, <span class="literal">nil</span>))</span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure><p>这样就可以启动一个http获取内存信息</p><p>然后我们编写测试用例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Sniper</span><span class="params">(num <span class="type">int</span>)</span></span> []<span class="keyword">struct</span>&#123;&#125; &#123;</span><br><span class="line">wordset := []<span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; num; i++ &#123;</span><br><span class="line">wordset = <span class="built_in">append</span>(wordset, <span class="keyword">struct</span>&#123;&#125;&#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> wordset</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Sniper2</span><span class="params">(num <span class="type">int</span>)</span></span> []<span class="type">bool</span> &#123;</span><br><span class="line">wordset := []<span class="type">bool</span>&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; num; i++ &#123;</span><br><span class="line">wordset = <span class="built_in">append</span>(wordset, <span class="literal">false</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> wordset</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Sniper3</span><span class="params">(num <span class="type">int</span>)</span></span> []<span class="type">int</span> &#123;</span><br><span class="line">wordset := []<span class="type">int</span>&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; num; i++ &#123;</span><br><span class="line">wordset = <span class="built_in">append</span>(wordset, <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> wordset</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := Sniper(<span class="number">100000000</span>)</span><br><span class="line"><span class="comment">// a := Sniper2(100000000)</span></span><br><span class="line"><span class="comment">// a := Sniper3(100000000)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">log.Println(http.ListenAndServe(<span class="string">&quot;0.0.0.0:6060&quot;</span>, <span class="literal">nil</span>))</span><br><span class="line">&#125;()</span><br><span class="line">fmt.Println(a, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后通过命令<code>go tool pprof http://127.0.0.1:6060/debug/pprof/heap</code>就可以看到连接到debug，然后输入<code>top</code>，就可以看到内存占用</p><ul><li>int: 867.57MB</li><li>bool: 116.42MB </li><li>struct{}{}: 0 </li></ul>]]></content:encoded>
      
      
      <category domain="http://zhoujunxiong.gitee.com/categories/Go/">Go</category>
      
      
      <category domain="http://zhoujunxiong.gitee.com/tags/Go/">Go</category>
      
      
      <comments>http://zhoujunxiong.gitee.com/2021/08/29/GO/go%E4%B9%8Bset/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>go之sync.Cond</title>
      <link>http://zhoujunxiong.gitee.com/2021/08/08/GO/go%E4%B9%8Bsync.cond/</link>
      <guid>http://zhoujunxiong.gitee.com/2021/08/08/GO/go%E4%B9%8Bsync.cond/</guid>
      <pubDate>Sun, 08 Aug 2021 00:33:04 GMT</pubDate>
      
        
        
      <description>&lt;h4 id=&quot;Cond是什么&quot;&gt;&lt;a href=&quot;#Cond是什么&quot; class=&quot;headerlink&quot; title=&quot;Cond是什么&quot;&gt;&lt;/a&gt;Cond是什么&lt;/h4&gt;&lt;p&gt;&lt;code&gt;cond&lt;/code&gt;是一个传统的用来对&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cond.Wait(</description>
        
      
      
      
      <content:encoded><![CDATA[<h4 id="Cond是什么"><a href="#Cond是什么" class="headerlink" title="Cond是什么"></a>Cond是什么</h4><p><code>cond</code>是一个传统的用来对</p><ul><li>cond.Wait()：让出当前执行权（就是执行unlock，并且休眠当前协程, 之后运行说明已经获取了锁）</li><li>cond.Signal()：用于唤醒单个协程</li><li>cond.Broadcat()：用于唤醒所有协程（并不是所有协程都会运行，而是所有线程进行唤醒，然后进行抢占）</li></ul><p>例如，有一个电影院卖电影票，有三个人同时去买票，有下面的代码实现</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;sync&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> global sync.WaitGroup</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  condDemo()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">condDemo</span><span class="params">()</span></span> &#123;</span><br><span class="line">global.Add(<span class="number">1</span>)</span><br><span class="line">电影院 := &amp;Cinema&#123;<span class="number">10000000</span>, sync.NewCond(&amp;sync.Mutex&#123;&#125;)&#125;</span><br><span class="line">高富帅 := &amp;People&#123;<span class="string">&quot;高富帅&quot;</span>, <span class="number">0</span>&#125;</span><br><span class="line">穷屌丝 := &amp;People&#123;<span class="string">&quot;穷屌丝&quot;</span>, <span class="number">0</span>&#125;</span><br><span class="line">黄牛 := &amp;People&#123;<span class="string">&quot;黄牛&quot;</span>, <span class="number">0</span>&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;电影院准备卖票啦！&quot;</span>)</span><br><span class="line">  <span class="comment">// 先加锁，防止抢跑，让所有的协程都运行起来之后</span></span><br><span class="line">电影院.L.Lock()</span><br><span class="line"><span class="keyword">go</span> 高富帅.Rob(电影院)</span><br><span class="line"><span class="keyword">go</span> 穷屌丝.Rob(电影院)</span><br><span class="line"><span class="keyword">go</span> 黄牛.Rob(电影院)</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line">fmt.Println(<span class="string">&quot;电影院通知卖票啦！！！&quot;</span>)</span><br><span class="line">timer := time.NewTicker(time.Second)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">3</span>; i &gt; <span class="number">0</span>; i-- &#123;</span><br><span class="line">&lt;-timer.C</span><br><span class="line">fmt.Println(i)</span><br><span class="line">&#125;</span><br><span class="line">timer.Stop()</span><br><span class="line">  <span class="comment">// 这里不需要使用await，不需要重新拿到执行权，直接使用lock释放锁就可以了</span></span><br><span class="line">电影院.L.Unlock()</span><br><span class="line">  <span class="comment">// 等待电影票归零</span></span><br><span class="line">global.Wait()</span><br><span class="line">fmt.Printf(<span class="string">&quot;电影院停止了卖票,一共卖出%v&quot;</span>, 高富帅.tickNum+穷屌丝.tickNum+黄牛.tickNum)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Cinema <span class="keyword">struct</span> &#123;</span><br><span class="line">ticket <span class="type">int</span></span><br><span class="line">*sync.Cond</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> People <span class="keyword">struct</span> &#123;</span><br><span class="line">name    <span class="type">string</span></span><br><span class="line">tickNum <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *People)</span></span> Rob(cinema *Cinema) &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%s收到电影院要卖票的消息了\n&quot;</span>, p.name)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 这里加锁，是为了让协程等待</span></span><br><span class="line">cinema.L.Lock()</span><br><span class="line"><span class="keyword">for</span> cinema.ticket &gt; <span class="number">0</span> &#123;</span><br><span class="line">p.tickNum++</span><br><span class="line">cinema.ticket--</span><br><span class="line">fmt.Printf(<span class="string">&quot;%s抢到了票, 现在有%v张, 电影院剩下%v\n&quot;</span>, p.name, p.tickNum, cinema.ticket)</span><br><span class="line">    <span class="comment">// 广播唤醒已经wait的协程进行抢占</span></span><br><span class="line">cinema.Broadcast()</span><br><span class="line">    <span class="comment">// 释放锁，并且休眠当前协程</span></span><br><span class="line">cinema.Wait()</span><br><span class="line">&#125;</span><br><span class="line">global.Done()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://zhoujunxiong.gitee.com/categories/Go/">Go</category>
      
      
      <category domain="http://zhoujunxiong.gitee.com/tags/Go/">Go</category>
      
      
      <comments>http://zhoujunxiong.gitee.com/2021/08/08/GO/go%E4%B9%8Bsync.cond/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>go之webAssembly</title>
      <link>http://zhoujunxiong.gitee.com/2021/08/01/GO/go%E4%B9%8BwebAssembly/</link>
      <guid>http://zhoujunxiong.gitee.com/2021/08/01/GO/go%E4%B9%8BwebAssembly/</guid>
      <pubDate>Sun, 01 Aug 2021 01:24:42 GMT</pubDate>
      
        
        
      <description>&lt;h4 id=&quot;编译与设置环境&quot;&gt;&lt;a href=&quot;#编译与设置环境&quot; class=&quot;headerlink&quot; title=&quot;编译与设置环境&quot;&gt;&lt;/a&gt;编译与设置环境&lt;/h4&gt;&lt;p&gt;&lt;code&gt;go&lt;/code&gt;设置环境非常简单,通过设置&lt;code&gt;GOOS&lt;/code&gt;与&lt;cod</description>
        
      
      
      
      <content:encoded><![CDATA[<h4 id="编译与设置环境"><a href="#编译与设置环境" class="headerlink" title="编译与设置环境"></a>编译与设置环境</h4><p><code>go</code>设置环境非常简单,通过设置<code>GOOS</code>与<code>GOARCH</code>环境变量，对文件进行编译</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">GOOS</span>=js <span class="variable constant_">GOARCH</span>=wasm go build -o main.<span class="property">wasm</span> </span><br></pre></td></tr></table></figure><p>为<code>vscode</code>设置<code>go</code>的<code>wasm</code>编译环境，让<code>ide</code>支持语法</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;go.toolsEnvVars&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;GOARCH&quot;</span><span class="punctuation">:</span> <span class="string">&quot;wasm&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;GOOS&quot;</span><span class="punctuation">:</span> <span class="string">&quot;js&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>之后就可以愉快对<code>go</code>代码进行编辑了</p><h4 id="编译并运行wasm"><a href="#编译并运行wasm" class="headerlink" title="编译并运行wasm"></a>编译并运行wasm</h4><p>首先编写<code>go</code>文件, 然后通过<code>GOOS=js GOARCH=wasm go build -o main.wasm</code>编译<code>wasm</code>文件</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="built_in">println</span>(<span class="string">&quot;hello wasm&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="node中运行wasm"><a href="#node中运行wasm" class="headerlink" title="node中运行wasm"></a>node中运行wasm</h5><p>node通过下面的命令就可以直接运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node $(go env GOROOT)/misc/wasm/wasm_exec.js main.wasm</span><br></pre></td></tr></table></figure><h5 id="浏览器中中运行wasm"><a href="#浏览器中中运行wasm" class="headerlink" title="浏览器中中运行wasm"></a>浏览器中中运行wasm</h5><p><code>wasm</code>运行需要使用<code>$(go env GOROOT)/misc/wasm/wasm_exec.js</code>这个目录下的js去运行</p><p>将这个文件拷贝到出来</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp $(go env GOROOT)/misc/wasm/wasm_exec.js ./exec.js</span><br></pre></td></tr></table></figure><p>在浏览器中执行需要使用<code>WebAssembly</code>api</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> go = <span class="keyword">new</span> <span class="title class_">Go</span>();  <span class="comment">// 这个函数就是 wasm_exec.js 提供的</span></span><br><span class="line"><span class="title class_">WebAssembly</span>.<span class="title function_">instantiateStreaming</span>(<span class="title function_">fetch</span>(<span class="string">&#x27;./main.wasm&#x27;</span>), go.<span class="property">importObject</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> go.<span class="title function_">run</span>(result.<span class="property">instance</span>))</span><br></pre></td></tr></table></figure><blockquote><p>注意：<code>instantiateStreaming</code>需要响应头中<code>content-type: application/wasm</code>, 所以可以用下面这钟方式</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchAndInstantiate</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&quot;./main.wasm&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> buffer = <span class="keyword">await</span> response.<span class="title function_">arrayBuffer</span>();</span><br><span class="line">  <span class="keyword">const</span> go = <span class="keyword">new</span> <span class="title class_">Go</span>();</span><br><span class="line">  <span class="title class_">WebAssembly</span>.<span class="title function_">instantiate</span>(buffer, go.<span class="property">importObject</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">    go.<span class="title function_">run</span>(result.<span class="property">instance</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fetchAndInstantiate</span>()</span><br></pre></td></tr></table></figure><h4 id="go中的wasm"><a href="#go中的wasm" class="headerlink" title="go中的wasm"></a>go中的wasm</h4><p>在<code>wasm</code>中可以调用<code>js</code>的方法，也可以为<code>js</code>注册方法</p><h5 id="调用js方法"><a href="#调用js方法" class="headerlink" title="调用js方法"></a>调用js方法</h5><p>例如调用<code>console</code>方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;syscall/js&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">log := js.Global().Get(<span class="string">&quot;console&quot;</span>).Get(<span class="string">&quot;log&quot;</span>)</span><br><span class="line">log.Invoke(<span class="string">&quot;卧槽，牛逼&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过<code>js.Global()</code>获取<code>window</code>对象，通过<code>Get</code>获取<code>console.log</code>对象，最后通过<code>Invoke</code>调用方法</p><p>同理调用<code>eval</code>方法, 就可以执行所有<code>js</code>代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">js.Global().Call(<span class="string">`eval`</span>, <span class="string">`console.log(&#x27;hello eval&#x27;)`</span>)</span><br></pre></td></tr></table></figure><h5 id="获取dom对象"><a href="#获取dom对象" class="headerlink" title="获取dom对象"></a>获取dom对象</h5><p>获取<code>dom</code>对象, 然后通过设置<code>Set</code>方法，进行赋值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">test := js.Global().Get(<span class="string">&quot;document&quot;</span>).Call(<span class="string">&quot;getElementById&quot;</span>, <span class="string">&quot;test&quot;</span>)</span><br><span class="line">test.Set(<span class="string">&quot;innerHTML&quot;</span>, <span class="string">&quot;牛逼&quot;</span>)</span><br></pre></td></tr></table></figure><h5 id="注册函数到js"><a href="#注册函数到js" class="headerlink" title="注册函数到js"></a>注册函数到js</h5><p>通过<code>js.FuncOf</code>定义函数，参数为<code>this</code>与<code>args</code>, 参数为<code>js.Value</code>类型</p><p>然后将这个函数设置到<code>js</code>环境中的</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">test := js.Global().Get(<span class="string">&quot;document&quot;</span>).Call(<span class="string">&quot;getElementById&quot;</span>, <span class="string">&quot;test&quot;</span>)</span><br><span class="line">test.Set(<span class="string">&quot;innerHTML&quot;</span>, <span class="string">&quot;牛逼&quot;</span>)</span><br><span class="line"></span><br><span class="line">callback := js.FuncOf(<span class="function"><span class="keyword">func</span><span class="params">(this js.Value, args []js.Value)</span></span> <span class="keyword">interface</span>&#123;&#125; &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;button clicked&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">test.Call(<span class="string">&quot;addEventListener&quot;</span>, <span class="string">&quot;click&quot;</span>, callback)</span><br></pre></td></tr></table></figure><p>注册一个函数到<code>window</code>对象</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  js.Global().Set(<span class="string">&quot;fib&quot;</span>, js.FuncOf(<span class="function"><span class="keyword">func</span><span class="params">(this js.Value, args []js.Value)</span></span> <span class="keyword">interface</span>&#123;&#125; &#123;</span><br><span class="line">      <span class="keyword">return</span> fib(args[<span class="number">0</span>].Int())</span><br><span class="line">    &#125;))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fib</span><span class="params">(n <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">if</span> n &lt;= <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> result = <span class="built_in">make</span>([]<span class="type">int</span>, n+<span class="number">1</span>)</span><br><span class="line">result[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">result[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> n &lt;= <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> result[n]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">2</span>; i &lt;= n; i++ &#123;</span><br><span class="line">result[i] = result[i<span class="number">-2</span>] + result[i<span class="number">-1</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result[n]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h4><p>在浏览器运行，<code>wasm</code>在函数运行结束后就会被销毁，所以需要控制主函数的退出</p><p>这里我们使用<code>channel</code>对函数进行控制</p><p>完整代码如下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;syscall/js&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">jsCall()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">jsCall</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="built_in">close</span> := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line">log := js.Global().Get(<span class="string">&quot;console&quot;</span>).Get(<span class="string">&quot;log&quot;</span>)</span><br><span class="line">log.Invoke(<span class="string">&quot;卧槽，牛逼&quot;</span>)</span><br><span class="line"></span><br><span class="line">js.Global().Call(<span class="string">`eval`</span>, <span class="string">`console.log(&#x27;hello eval&#x27;)`</span>)</span><br><span class="line"></span><br><span class="line">test := js.Global().Get(<span class="string">&quot;document&quot;</span>).Call(<span class="string">&quot;getElementById&quot;</span>, <span class="string">&quot;test&quot;</span>)</span><br><span class="line">test.Set(<span class="string">&quot;innerHTML&quot;</span>, <span class="string">&quot;牛逼&quot;</span>)</span><br><span class="line"></span><br><span class="line">callback := js.FuncOf(<span class="function"><span class="keyword">func</span><span class="params">(this js.Value, args []js.Value)</span></span> <span class="keyword">interface</span>&#123;&#125; &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;button clicked&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">test.Call(<span class="string">&quot;addEventListener&quot;</span>, <span class="string">&quot;click&quot;</span>, callback)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册一个函数</span></span><br><span class="line">js.Global().Set(<span class="string">&quot;fib&quot;</span>, js.FuncOf(<span class="function"><span class="keyword">func</span><span class="params">(this js.Value, args []js.Value)</span></span> <span class="keyword">interface</span>&#123;&#125; &#123;</span><br><span class="line"><span class="keyword">return</span> fib(args[<span class="number">0</span>].Int())</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line">&lt;-<span class="built_in">close</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fib</span><span class="params">(n <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">if</span> n &lt;= <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> result = <span class="built_in">make</span>([]<span class="type">int</span>, n+<span class="number">1</span>)</span><br><span class="line">result[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">result[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> n &lt;= <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> result[n]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">2</span>; i &lt;= n; i++ &#123;</span><br><span class="line">result[i] = result[i<span class="number">-2</span>] + result[i<span class="number">-1</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result[n]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://zhoujunxiong.gitee.com/categories/Go/">Go</category>
      
      
      <category domain="http://zhoujunxiong.gitee.com/tags/Go/">Go</category>
      
      
      <comments>http://zhoujunxiong.gitee.com/2021/08/01/GO/go%E4%B9%8BwebAssembly/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
